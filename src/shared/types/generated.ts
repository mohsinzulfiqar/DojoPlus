import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
const defaultOptions = {};
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** The `BigInt` scalar type represents whole numeric values. */
  BigInt: any;
  /** A date string, such as `2007-12-25`, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: any;
  /** A date-time string at UTC, such as `2007-12-25T16:15:30Z`, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  DateTime: any;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: any;
  /** A time string at UTC, such as `16:15:30Z`, compliant with the `full-time` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Time: any;
};

export type Achievement = {
  __typename?: 'Achievement';
  _description: Maybe<Scalars['String']>;
  ageDivision: Maybe<Scalars['String']>;
  beltLevel: Maybe<Scalars['String']>;
  championship: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  gender: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  location: Maybe<Scalars['String']>;
  martialArt: Maybe<MartialArt>;
  month: Maybe<Scalars['Int']>;
  name: Maybe<Scalars['String']>;
  profile: Maybe<Profile>;
  rankResult: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
  weight: Maybe<Scalars['String']>;
  year: Maybe<Scalars['Int']>;
};

/** Achievements create input */
export type AchievementCreateInput = {
  ageDivision?: Maybe<Scalars['String']>;
  beltLevel?: Maybe<Scalars['String']>;
  championship: Scalars['String'];
  gender?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  martialArt?: Maybe<AchievementsMartialArtRelationInput>;
  month?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  profile: AchievementsProfileRelationInput;
  rankResult?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  year?: Maybe<Scalars['Int']>;
};

/** Achievements create many input */
export type AchievementCreateManyInput = {
  ageDivision?: Maybe<Scalars['String']>;
  beltLevel?: Maybe<Scalars['String']>;
  championship: Scalars['String'];
  gender?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  martialArt?: Maybe<AchievementsMartialArtManyRelationInput>;
  month?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  profile: AchievementsProfileManyRelationInput;
  rankResult?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  year?: Maybe<Scalars['Int']>;
};

/** Achievements delete input */
export type AchievementDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** AchievementFieldsPermissions create input */
export type AchievementFieldsPermissions = {
  ageDivision?: Maybe<Scalars['Boolean']>;
  beltLevel?: Maybe<Scalars['Boolean']>;
  championship?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['Boolean']>;
  gender?: Maybe<Scalars['Boolean']>;
  location?: Maybe<Scalars['Boolean']>;
  month?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['Boolean']>;
  rankResult?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
  weight?: Maybe<Scalars['Boolean']>;
  year?: Maybe<Scalars['Boolean']>;
};

export type AchievementFilter = {
  AND?: Maybe<Array<AchievementFilter>>;
  OR?: Maybe<Array<AchievementFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  ageDivision?: Maybe<StringPredicate>;
  beltLevel?: Maybe<StringPredicate>;
  championship?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  gender?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  location?: Maybe<StringPredicate>;
  martialArt?: Maybe<MartialArtFilter>;
  month?: Maybe<IntPredicate>;
  name?: Maybe<StringPredicate>;
  profile?: Maybe<ProfileFilter>;
  rankResult?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
  weight?: Maybe<StringPredicate>;
  year?: Maybe<IntPredicate>;
};

export type AchievementGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: AchievementGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type AchievementGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  ageDivision?: Maybe<Array<GroupByField>>;
  beltLevel?: Maybe<Array<GroupByField>>;
  championship?: Maybe<Array<GroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  gender?: Maybe<Array<GroupByField>>;
  id?: Maybe<Array<GroupByField>>;
  location?: Maybe<Array<GroupByField>>;
  martialArt?: Maybe<MartialArtGroupByQuery>;
  month?: Maybe<Array<GroupByField>>;
  name?: Maybe<Array<GroupByField>>;
  profile?: Maybe<ProfileGroupByQuery>;
  rankResult?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
  weight?: Maybe<Array<GroupByField>>;
  year?: Maybe<Array<GroupByField>>;
};

export type AchievementKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** AchievementListResponse output */
export type AchievementListResponse = {
  __typename?: 'AchievementListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<Achievement>;
};

/** AchievementManyResponse output */
export type AchievementManyResponse = {
  __typename?: 'AchievementManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<Achievement>;
};

/** No longer supported. Use `sort` instead. */
export enum AchievementOrderBy {
  AgeDivisionAsc = 'ageDivision_ASC',
  AgeDivisionDesc = 'ageDivision_DESC',
  BeltLevelAsc = 'beltLevel_ASC',
  BeltLevelDesc = 'beltLevel_DESC',
  ChampionshipAsc = 'championship_ASC',
  ChampionshipDesc = 'championship_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GenderAsc = 'gender_ASC',
  GenderDesc = 'gender_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LocationAsc = 'location_ASC',
  LocationDesc = 'location_DESC',
  MonthAsc = 'month_ASC',
  MonthDesc = 'month_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  RankResultAsc = 'rankResult_ASC',
  RankResultDesc = 'rankResult_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WeightAsc = 'weight_ASC',
  WeightDesc = 'weight_DESC',
  YearAsc = 'year_ASC',
  YearDesc = 'year_DESC',
}

/** Achievements subscription payload */
export type AchievementPayload = {
  __typename?: 'AchievementPayload';
  mutation: MutationType;
  node: Maybe<Achievement>;
  previousValues: Maybe<Achievement>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type AchievementRelationFilter = {
  every?: Maybe<AchievementFilter>;
  none?: Maybe<AchievementFilter>;
  some?: Maybe<AchievementFilter>;
};

export type AchievementSort = {
  ageDivision?: Maybe<SortOrder>;
  beltLevel?: Maybe<SortOrder>;
  championship?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  gender?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  location?: Maybe<SortOrder>;
  martialArt?: Maybe<MartialArtSort>;
  month?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  profile?: Maybe<ProfileSort>;
  rankResult?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  weight?: Maybe<SortOrder>;
  year?: Maybe<SortOrder>;
};

/** Achievements subscription filter */
export type AchievementSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<AchievementFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** Achievements update input */
export type AchievementUpdateByFilterInput = {
  ageDivision?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  beltLevel?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  championship?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  gender?: Maybe<Array<Maybe<UpdateByFilterStringSwitchInput>>>;
  location?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  month?: Maybe<Array<Maybe<UpdateByFilterIntInput>>>;
  name?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  rankResult?: Maybe<Array<Maybe<UpdateByFilterStringSwitchInput>>>;
  weight?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  year?: Maybe<Array<Maybe<UpdateByFilterIntInput>>>;
};

/** Achievements update input */
export type AchievementUpdateInput = {
  ageDivision?: Maybe<Scalars['String']>;
  beltLevel?: Maybe<Scalars['String']>;
  championship?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  location?: Maybe<Scalars['String']>;
  martialArt?: Maybe<AchievementsMartialArtUpdateRelationInput>;
  month?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  profile?: Maybe<AchievementsProfileUpdateRelationInput>;
  rankResult?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  year?: Maybe<Scalars['Int']>;
};

export type Achievement_PermissionFilter = {
  AND?: Maybe<Array<Achievement_PermissionFilter>>;
  OR?: Maybe<Array<Achievement_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  ageDivision?: Maybe<StringPredicate>;
  beltLevel?: Maybe<StringPredicate>;
  championship?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  gender?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  location?: Maybe<StringPredicate>;
  martialArt?: Maybe<MartialArt_PermissionFilter>;
  month?: Maybe<IntPredicate>;
  name?: Maybe<StringPredicate>;
  profile?: Maybe<Profile_PermissionFilter>;
  rankResult?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
  weight?: Maybe<StringPredicate>;
  year?: Maybe<IntPredicate>;
};

export type Achievement_PermissionRelationFilter = {
  every?: Maybe<Achievement_PermissionFilter>;
  none?: Maybe<Achievement_PermissionFilter>;
  some?: Maybe<Achievement_PermissionFilter>;
};

/** Achievements relation input */
export type AchievementsMartialArtManyRelationInput = {
  connect?: Maybe<MartialArtKeyFilter>;
};

/** Achievements relation input */
export type AchievementsMartialArtRelationInput = {
  connect?: Maybe<MartialArtKeyFilter>;
  create?: Maybe<AchievementsMartialArt_MartialArtCreateInput>;
};

/** Achievements relation input */
export type AchievementsMartialArtUpdateRelationInput = {
  connect?: Maybe<MartialArtKeyFilter>;
  create?: Maybe<AchievementsMartialArt_MartialArtCreateInput>;
  disconnect?: Maybe<MartialArtKeyFilter>;
  reconnect?: Maybe<MartialArtKeyFilter>;
  update?: Maybe<AchievementsMartialArt_MartialArtUpdateInput>;
};

/** MartialArt create input from achievementsMartialArt */
export type AchievementsMartialArt_MartialArtCreateInput = {
  achievementsMartialArt?: Maybe<MartialArtAchievementsMartialArtRelationInput>;
  attachments?: Maybe<MartialArtAttachmentsRelationInput>;
  competitionId?: Maybe<MartialArtCompetitionIdRelationInput>;
  countryOrigin?: Maybe<Scalars['String']>;
  martialArtsAirtableId?: Maybe<Scalars['String']>;
  martialArtsSchool?: Maybe<MartialArtMartialArtsSchoolRelationInput>;
  name: Scalars['String'];
  rankMartialArt?: Maybe<MartialArtRankMartialArtRelationInput>;
  scheduleMartialArt?: Maybe<MartialArtScheduleMartialArtRelationInput>;
  schoolsAirtableId?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
};

/** MartialArt update input from achievementsMartialArt */
export type AchievementsMartialArt_MartialArtUpdateInput = {
  achievementsMartialArt?: Maybe<MartialArtAchievementsMartialArtUpdateRelationInput>;
  attachments?: Maybe<MartialArtAttachmentsUpdateRelationInput>;
  competitionId?: Maybe<MartialArtCompetitionIdUpdateRelationInput>;
  countryOrigin?: Maybe<Scalars['String']>;
  martialArtsAirtableId?: Maybe<Scalars['String']>;
  martialArtsSchool?: Maybe<MartialArtMartialArtsSchoolUpdateRelationInput>;
  name?: Maybe<Scalars['String']>;
  rankMartialArt?: Maybe<MartialArtRankMartialArtUpdateRelationInput>;
  scheduleMartialArt?: Maybe<MartialArtScheduleMartialArtUpdateRelationInput>;
  schoolsAirtableId?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
};

/** Achievements relation input */
export type AchievementsProfileManyRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
};

/** Achievements relation input */
export type AchievementsProfileRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
  create?: Maybe<Achievements_ProfileCreateInput>;
};

/** Achievements relation input */
export type AchievementsProfileUpdateRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
  create?: Maybe<Achievements_ProfileCreateInput>;
  disconnect?: Maybe<ProfileKeyFilter>;
  reconnect?: Maybe<ProfileKeyFilter>;
  update?: Maybe<Achievements_ProfileUpdateInput>;
};

/** Profile create input from achievements */
export type Achievements_ProfileCreateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8RelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24RelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Profile update input from achievements */
export type Achievements_ProfileUpdateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsUpdateRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinUpdateRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassUpdateRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationUpdateRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileUpdateRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoUpdateRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolUpdateRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationUpdateRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamUpdateRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileUpdateRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallUpdateRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8UpdateRelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24UpdateRelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileUpdateRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountUpdateRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkUpdateRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationUpdateRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

export enum AggregationFunctionType {
  AnyValue = 'ANY_VALUE',
  Avg = 'AVG',
  Count = 'COUNT',
  GroupConcat = 'GROUP_CONCAT',
  Max = 'MAX',
  Min = 'MIN',
  StddevPop = 'STDDEV_POP',
  StddevSamp = 'STDDEV_SAMP',
  Sum = 'SUM',
  VarPop = 'VAR_POP',
  VarSamp = 'VAR_SAMP',
}

export type ApiToken = {
  __typename?: 'ApiToken';
  _description: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
  roles: Maybe<RoleListResponse>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

export type ApiTokenRolesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<RoleFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<RoleGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<RoleOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<RoleSort>>;
};

/** ApiTokens create input */
export type ApiTokenCreateInput = {
  name: Scalars['String'];
  roles?: Maybe<ApiTokensRolesRelationInput>;
};

/** ApiTokens delete input */
export type ApiTokenDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

export type ApiTokenFilter = {
  AND?: Maybe<Array<ApiTokenFilter>>;
  OR?: Maybe<Array<ApiTokenFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  name?: Maybe<StringPredicate>;
  roles?: Maybe<RoleRelationFilter>;
  token?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type ApiTokenGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: ApiTokenGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type ApiTokenGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  id?: Maybe<Array<GroupByField>>;
  name?: Maybe<Array<GroupByField>>;
  roles?: Maybe<RoleGroupByQuery>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

export type ApiTokenKeyFilter = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
};

/** ApiTokenListResponse output */
export type ApiTokenListResponse = {
  __typename?: 'ApiTokenListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<ApiToken>;
};

/** ApiTokenManyResponse output */
export type ApiTokenManyResponse = {
  __typename?: 'ApiTokenManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<ApiToken>;
};

/** No longer supported. Use `sort` instead. */
export enum ApiTokenOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  TokenAsc = 'token_ASC',
  TokenDesc = 'token_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** ApiTokens subscription payload */
export type ApiTokenPayload = {
  __typename?: 'ApiTokenPayload';
  mutation: MutationType;
  node: Maybe<ApiToken>;
  previousValues: Maybe<ApiToken>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type ApiTokenRelationFilter = {
  every?: Maybe<ApiTokenFilter>;
  none?: Maybe<ApiTokenFilter>;
  some?: Maybe<ApiTokenFilter>;
};

/** API Token Response */
export type ApiTokenResponse = {
  __typename?: 'ApiTokenResponse';
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
  roles: Maybe<RoleListResponse>;
  token: Scalars['String'];
  updatedAt: Maybe<Scalars['DateTime']>;
};

/** API Token Response */
export type ApiTokenResponseRolesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<RoleFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<RoleGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<RoleOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<RoleSort>>;
};

export type ApiTokenSort = {
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
};

/** ApiTokens subscription filter */
export type ApiTokenSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<ApiTokenFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** ApiTokens update input */
export type ApiTokenUpdateByFilterInput = {
  name?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  token?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** ApiTokens update input */
export type ApiTokenUpdateInput = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  roles?: Maybe<ApiTokensRolesUpdateRelationInput>;
};

export type ApiToken_PermissionFilter = {
  AND?: Maybe<Array<ApiToken_PermissionFilter>>;
  OR?: Maybe<Array<ApiToken_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  name?: Maybe<StringPredicate>;
  roles?: Maybe<Role_PermissionRelationFilter>;
  token?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type ApiToken_PermissionRelationFilter = {
  every?: Maybe<ApiToken_PermissionFilter>;
  none?: Maybe<ApiToken_PermissionFilter>;
  some?: Maybe<ApiToken_PermissionFilter>;
};

/** ApiTokens relation input */
export type ApiTokensRolesRelationInput = {
  connect?: Maybe<Array<RoleKeyFilter>>;
  create?: Maybe<Array<Maybe<ApiTokens_RoleCreateInput>>>;
};

/** ApiTokens relation input */
export type ApiTokensRolesUpdateRelationInput = {
  connect?: Maybe<Array<RoleKeyFilter>>;
  create?: Maybe<Array<Maybe<ApiTokens_RoleCreateInput>>>;
  disconnect?: Maybe<Array<RoleKeyFilter>>;
  reconnect?: Maybe<Array<RoleKeyFilter>>;
  update?: Maybe<Array<Maybe<ApiTokens_RoleUpdateInput>>>;
};

/** Roles create input from apiTokens */
export type ApiTokens_RoleCreateInput = {
  apiTokens?: Maybe<RolesApiTokensRelationInput>;
  authenticationProfiles?: Maybe<RolesAuthenticationProfilesRelationInput>;
  description?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  permissions?: Maybe<PermissionsInput>;
  teamMembers?: Maybe<RolesTeamMembersRelationInput>;
  users?: Maybe<RolesUsersRelationInput>;
};

/** Roles update input from apiTokens */
export type ApiTokens_RoleUpdateInput = {
  data: RoleUpdateInput;
  filter?: Maybe<RoleKeyFilter>;
};

/** Application */
export type Application = {
  __typename?: 'Application';
  appType: Scalars['String'];
  createdAt: Scalars['DateTime'];
  description: Maybe<Scalars['String']>;
  displayName: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  status: ApplicationStatusEnum;
};

/** ApplicationDeleteMutationInput */
export type ApplicationDeleteMutationInput = {
  force?: Maybe<Scalars['Boolean']>;
  id: Scalars['String'];
};

/** Application install input */
export type ApplicationInstallInput = {
  appType: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  status?: Maybe<ApplicationStatusEnum>;
};

/** ApplicationListResponse output */
export type ApplicationListResponse = {
  __typename?: 'ApplicationListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<Application>;
};

/** Application Status Enum */
export enum ApplicationStatusEnum {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
}

/** Application update input */
export type ApplicationUpdateInput = {
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  status?: Maybe<ApplicationStatusEnum>;
};

/** Async Session */
export type AsyncSession = {
  __typename?: 'AsyncSession';
  sessionId: Scalars['String'];
};

export type AsyncSessionStatusResponse = {
  __typename?: 'AsyncSessionStatusResponse';
  message: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

/** MartialArt create input from attachments */
export type Attachments_MartialArtCreateInput = {
  achievementsMartialArt?: Maybe<MartialArtAchievementsMartialArtRelationInput>;
  attachments?: Maybe<MartialArtAttachmentsRelationInput>;
  competitionId?: Maybe<MartialArtCompetitionIdRelationInput>;
  countryOrigin?: Maybe<Scalars['String']>;
  martialArtsAirtableId?: Maybe<Scalars['String']>;
  martialArtsSchool?: Maybe<MartialArtMartialArtsSchoolRelationInput>;
  name: Scalars['String'];
  rankMartialArt?: Maybe<MartialArtRankMartialArtRelationInput>;
  scheduleMartialArt?: Maybe<MartialArtScheduleMartialArtRelationInput>;
  schoolsAirtableId?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
};

/** MartialArt update input from attachments */
export type Attachments_MartialArtUpdateInput = {
  data: MartialArtUpdateInput;
  filter?: Maybe<MartialArtKeyFilter>;
};

/** PlanCategory create input from attachments */
export type Attachments_PlanCategoryCreateInput = {
  attachments?: Maybe<PlanCategoryAttachmentsRelationInput>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  plan?: Maybe<PlanCategoryPlanRelationInput>;
  status?: Maybe<Scalars['String']>;
};

/** PlanCategory update input from attachments */
export type Attachments_PlanCategoryUpdateInput = {
  data: PlanCategoryUpdateInput;
  filter?: Maybe<PlanCategoryKeyFilter>;
};

/** Auth response */
export type Auth = {
  __typename?: 'Auth';
  idToken: Maybe<Scalars['String']>;
  refreshToken: Maybe<Scalars['String']>;
};

export type AuthenticationProfile = {
  __typename?: 'AuthenticationProfile';
  _description: Maybe<Scalars['String']>;
  attributes: Maybe<AuthenticationProfileAttributes>;
  audiences: Maybe<Array<Maybe<Scalars['String']>>>;
  clientId: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  databaseName: Maybe<Scalars['String']>;
  deletedAt: Maybe<Scalars['Int']>;
  domain: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  managementDomain: Maybe<Scalars['String']>;
  name: Maybe<Scalars['String']>;
  roles: Maybe<RoleListResponse>;
  secret: Maybe<Scalars['String']>;
  selfSignUpEmailDomains: Maybe<Array<Maybe<Scalars['String']>>>;
  selfSignUpEnabled: Maybe<Scalars['Boolean']>;
  type: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

export type AuthenticationProfileRolesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<RoleFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<RoleGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<RoleOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<RoleSort>>;
};

/** Authentication Profile Attributes */
export type AuthenticationProfileAttributes = CognitoAuthProfileAttributes;

/** Authentication profile connection options */
export type AuthenticationProfileConnectionOptions = {
  __typename?: 'AuthenticationProfileConnectionOptions';
  facebook: Maybe<FacebookOptions>;
  github: Maybe<GithubOptions>;
  google: Maybe<GoogleOptions>;
};

/** Authentication profile connection options input */
export type AuthenticationProfileConnectionsOptionsInput = {
  facebook?: Maybe<FacebookOptionsInput>;
  github?: Maybe<GithubOptionsInput>;
  google?: Maybe<GoogleOptionsInput>;
};

/** AuthenticationProfiles create input */
export type AuthenticationProfileCreateInput = {
  audiences?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientId?: Maybe<Scalars['String']>;
  databaseName?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  managementDomain?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  roles?: Maybe<AuthenticationProfilesRolesRelationInput>;
  secret?: Maybe<Scalars['String']>;
  selfSignUpEmailDomains?: Maybe<Array<Maybe<Scalars['String']>>>;
  selfSignUpEnabled?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
};

/** AuthenticationProfiles create many input */
export type AuthenticationProfileCreateManyInput = {
  audiences?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientId?: Maybe<Scalars['String']>;
  databaseName?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  managementDomain?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  roles?: Maybe<AuthenticationProfilesRolesManyRelationInput>;
  secret?: Maybe<Scalars['String']>;
  selfSignUpEmailDomains?: Maybe<Array<Maybe<Scalars['String']>>>;
  selfSignUpEnabled?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
};

/** AuthenticationProfiles delete input */
export type AuthenticationProfileDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

export type AuthenticationProfileFilter = {
  AND?: Maybe<Array<AuthenticationProfileFilter>>;
  OR?: Maybe<Array<AuthenticationProfileFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  clientId?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  databaseName?: Maybe<StringPredicate>;
  deletedAt?: Maybe<IntPredicate>;
  domain?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  managementDomain?: Maybe<StringPredicate>;
  name?: Maybe<StringPredicate>;
  roles?: Maybe<RoleRelationFilter>;
  secret?: Maybe<StringPredicate>;
  selfSignUpEnabled?: Maybe<BoolPredicate>;
  type?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type AuthenticationProfileGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: AuthenticationProfileGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type AuthenticationProfileGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  audiences?: Maybe<Array<GroupByField>>;
  clientId?: Maybe<Array<GroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  databaseName?: Maybe<Array<GroupByField>>;
  domain?: Maybe<Array<GroupByField>>;
  id?: Maybe<Array<GroupByField>>;
  managementDomain?: Maybe<Array<GroupByField>>;
  name?: Maybe<Array<GroupByField>>;
  roles?: Maybe<RoleGroupByQuery>;
  secret?: Maybe<Array<GroupByField>>;
  selfSignUpEmailDomains?: Maybe<Array<GroupByField>>;
  selfSignUpEnabled?: Maybe<Array<GroupByField>>;
  type?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

export type AuthenticationProfileKeyFilter = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
};

/** AuthenticationProfileListResponse output */
export type AuthenticationProfileListResponse = {
  __typename?: 'AuthenticationProfileListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<AuthenticationProfile>;
};

/** AuthenticationProfileManyResponse output */
export type AuthenticationProfileManyResponse = {
  __typename?: 'AuthenticationProfileManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<AuthenticationProfile>;
};

/** No longer supported. Use `sort` instead. */
export enum AuthenticationProfileOrderBy {
  ClientIdAsc = 'clientId_ASC',
  ClientIdDesc = 'clientId_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DatabaseNameAsc = 'databaseName_ASC',
  DatabaseNameDesc = 'databaseName_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DomainAsc = 'domain_ASC',
  DomainDesc = 'domain_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  ManagementDomainAsc = 'managementDomain_ASC',
  ManagementDomainDesc = 'managementDomain_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  SecretAsc = 'secret_ASC',
  SecretDesc = 'secret_DESC',
  SelfSignUpEnabledAsc = 'selfSignUpEnabled_ASC',
  SelfSignUpEnabledDesc = 'selfSignUpEnabled_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** AuthenticationProfiles subscription payload */
export type AuthenticationProfilePayload = {
  __typename?: 'AuthenticationProfilePayload';
  mutation: MutationType;
  node: Maybe<AuthenticationProfile>;
  previousValues: Maybe<AuthenticationProfile>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type AuthenticationProfileRelationFilter = {
  every?: Maybe<AuthenticationProfileFilter>;
  none?: Maybe<AuthenticationProfileFilter>;
  some?: Maybe<AuthenticationProfileFilter>;
};

export type AuthenticationProfileSort = {
  clientId?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  databaseName?: Maybe<SortOrder>;
  deletedAt?: Maybe<SortOrder>;
  domain?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  managementDomain?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  secret?: Maybe<SortOrder>;
  selfSignUpEnabled?: Maybe<SortOrder>;
  type?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
};

/** AuthenticationProfiles subscription filter */
export type AuthenticationProfileSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<AuthenticationProfileFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** AuthenticationProfiles update input */
export type AuthenticationProfileUpdateByFilterInput = {
  audiences?: Maybe<Array<Maybe<UpdateByFilterListStringInput>>>;
  clientId?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  databaseName?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  domain?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  managementDomain?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  name?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  secret?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  selfSignUpEmailDomains?: Maybe<Array<Maybe<UpdateByFilterListStringInput>>>;
  selfSignUpEnabled?: Maybe<Array<Maybe<UpdateByFilterBooleanSwitchInput>>>;
  type?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** AuthenticationProfiles update input */
export type AuthenticationProfileUpdateInput = {
  audiences?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientId?: Maybe<Scalars['String']>;
  databaseName?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  managementDomain?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  roles?: Maybe<AuthenticationProfilesRolesUpdateRelationInput>;
  secret?: Maybe<Scalars['String']>;
  selfSignUpEmailDomains?: Maybe<Array<Maybe<Scalars['String']>>>;
  selfSignUpEnabled?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
};

export type AuthenticationProfile_PermissionFilter = {
  AND?: Maybe<Array<AuthenticationProfile_PermissionFilter>>;
  OR?: Maybe<Array<AuthenticationProfile_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  clientId?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  databaseName?: Maybe<StringPredicate>;
  deletedAt?: Maybe<IntPredicate>;
  domain?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  managementDomain?: Maybe<StringPredicate>;
  name?: Maybe<StringPredicate>;
  roles?: Maybe<Role_PermissionRelationFilter>;
  secret?: Maybe<StringPredicate>;
  selfSignUpEnabled?: Maybe<BoolPredicate>;
  type?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type AuthenticationProfile_PermissionRelationFilter = {
  every?: Maybe<AuthenticationProfile_PermissionFilter>;
  none?: Maybe<AuthenticationProfile_PermissionFilter>;
  some?: Maybe<AuthenticationProfile_PermissionFilter>;
};

/** AuthenticationProfiles relation input */
export type AuthenticationProfilesRolesManyRelationInput = {
  connect?: Maybe<Array<RoleKeyFilter>>;
};

/** AuthenticationProfiles relation input */
export type AuthenticationProfilesRolesRelationInput = {
  connect?: Maybe<Array<RoleKeyFilter>>;
  create?: Maybe<Array<Maybe<AuthenticationProfiles_RoleCreateInput>>>;
};

/** AuthenticationProfiles relation input */
export type AuthenticationProfilesRolesUpdateRelationInput = {
  connect?: Maybe<Array<RoleKeyFilter>>;
  create?: Maybe<Array<Maybe<AuthenticationProfiles_RoleCreateInput>>>;
  disconnect?: Maybe<Array<RoleKeyFilter>>;
  reconnect?: Maybe<Array<RoleKeyFilter>>;
  update?: Maybe<Array<Maybe<AuthenticationProfiles_RoleUpdateInput>>>;
};

/** Roles create input from authenticationProfiles */
export type AuthenticationProfiles_RoleCreateInput = {
  apiTokens?: Maybe<RolesApiTokensRelationInput>;
  authenticationProfiles?: Maybe<RolesAuthenticationProfilesRelationInput>;
  description?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  permissions?: Maybe<PermissionsInput>;
  teamMembers?: Maybe<RolesTeamMembersRelationInput>;
  users?: Maybe<RolesUsersRelationInput>;
};

/** Roles update input from authenticationProfiles */
export type AuthenticationProfiles_RoleUpdateInput = {
  data: RoleUpdateInput;
  filter?: Maybe<RoleKeyFilter>;
};

export type AuthenticationSetting = {
  __typename?: 'AuthenticationSetting';
  _description: Maybe<Scalars['String']>;
  allowedCallbacks: Maybe<Array<Maybe<Scalars['String']>>>;
  allowedLogouts: Maybe<Array<Maybe<Scalars['String']>>>;
  allowedWebOrigins: Maybe<Array<Maybe<Scalars['String']>>>;
  connections: Maybe<AuthenticationProfileConnectionOptions>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

export type AuthenticationSettingFilter = {
  AND?: Maybe<Array<AuthenticationSettingFilter>>;
  OR?: Maybe<Array<AuthenticationSettingFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

/** AuthenticationSettings subscription payload */
export type AuthenticationSettingPayload = {
  __typename?: 'AuthenticationSettingPayload';
  mutation: MutationType;
  node: Maybe<AuthenticationSetting>;
  previousValues: Maybe<AuthenticationSetting>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** AuthenticationSettings subscription filter */
export type AuthenticationSettingSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<AuthenticationSettingFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** AuthenticationSettings update input */
export type AuthenticationSettingUpdateInput = {
  allowedCallbacks?: Maybe<Array<Maybe<Scalars['String']>>>;
  allowedLogouts?: Maybe<Array<Maybe<Scalars['String']>>>;
  allowedWebOrigins?: Maybe<Array<Maybe<Scalars['String']>>>;
  connections?: Maybe<AuthenticationProfileConnectionsOptionsInput>;
};

/** TeamMembers update input from avatar */
export type Avatar_TeamMemberUpdateInput = {
  data: TeamMemberUpdateInput;
  filter?: Maybe<TeamMemberKeyFilter>;
};

/** Users create input from avatar */
export type Avatar_UserCreateInput = {
  avatar?: Maybe<UsersAvatarRelationInput>;
  email: Scalars['String'];
  firstName?: Maybe<Scalars['String']>;
  idUser?: Maybe<UsersIdUserRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  roles?: Maybe<UsersRolesRelationInput>;
  schools?: Maybe<UsersSchoolsRelationInput>;
  status?: Maybe<Scalars['String']>;
  timezone?: Maybe<Scalars['String']>;
};

/** Users update input from avatar */
export type Avatar_UserUpdateInput = {
  data: UserUpdateInput;
  filter?: Maybe<UserKeyFilter>;
};

export type BigIntPredicateHaving = {
  AND?: Maybe<Array<BigIntPredicateHaving>>;
  OR?: Maybe<Array<BigIntPredicateHaving>>;
  equals?: Maybe<Scalars['BigInt']>;
  gt?: Maybe<Scalars['BigInt']>;
  gte?: Maybe<Scalars['BigInt']>;
  in?: Maybe<Array<Scalars['BigInt']>>;
  is_empty?: Maybe<Scalars['Boolean']>;
  is_not_empty?: Maybe<Scalars['Boolean']>;
  lt?: Maybe<Scalars['BigInt']>;
  lte?: Maybe<Scalars['BigInt']>;
  not_equals?: Maybe<Scalars['BigInt']>;
  not_in?: Maybe<Array<Scalars['BigInt']>>;
};

export type BillingCurrentPlanResponse = {
  __typename?: 'BillingCurrentPlanResponse';
  displayName: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
  nextPlan: Maybe<BillingNextPlanResponse>;
  price: Maybe<Scalars['Int']>;
  status: Maybe<WorkspaceStatus>;
  trialEnd: Maybe<Scalars['DateTime']>;
};

export type BillingDetailsResponse = {
  __typename?: 'BillingDetailsResponse';
  brand: Maybe<Scalars['String']>;
  expMonth: Maybe<Scalars['Int']>;
  expYear: Maybe<Scalars['Int']>;
  last4: Maybe<Scalars['String']>;
};

/** BillingDetailsUpdateMutationInput */
export type BillingDetailsUpdateMutationInput = {
  cardToken: Scalars['String'];
};

export type BillingInvoiceItem = {
  __typename?: 'BillingInvoiceItem';
  amountDue: Maybe<Scalars['Float']>;
  amountPaid: Maybe<Scalars['Float']>;
  amountRemaining: Maybe<Scalars['Float']>;
  description: Maybe<Scalars['String']>;
  endingBalance: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  invoicePdf: Maybe<Scalars['String']>;
  number: Maybe<Scalars['String']>;
  organization: Maybe<BillingInvoiceItemOrganizationInfo>;
  paid: Maybe<Scalars['Boolean']>;
  periodEnd: Maybe<Scalars['DateTime']>;
  periodStart: Maybe<Scalars['DateTime']>;
  plan: Maybe<BillingInvoiceItemPlanInfo>;
  status: Maybe<Scalars['String']>;
  total: Maybe<Scalars['Float']>;
  workspace: Maybe<BillingInvoiceItemWorkspaceInfo>;
};

export type BillingInvoiceItemOrganizationInfo = {
  __typename?: 'BillingInvoiceItemOrganizationInfo';
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
};

export type BillingInvoiceItemPlanInfo = {
  __typename?: 'BillingInvoiceItemPlanInfo';
  displayName: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
};

export type BillingInvoiceItemWorkspaceInfo = {
  __typename?: 'BillingInvoiceItemWorkspaceInfo';
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
};

export enum BillingInvoicesListFilterType {
  Customer = 'CUSTOMER',
  Workspace = 'WORKSPACE',
}

/** BillingInvoicesListResponse output */
export type BillingInvoicesListResponse = {
  __typename?: 'BillingInvoicesListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<BillingInvoiceItem>;
};

export type BillingLimitMetricItem = {
  __typename?: 'BillingLimitMetricItem';
  displayName: Maybe<Scalars['String']>;
  name: Maybe<Scalars['String']>;
  showPriority: Maybe<Scalars['Int']>;
  unit: Maybe<Scalars['String']>;
};

export type BillingMetricUsageItem = {
  __typename?: 'BillingMetricUsageItem';
  limitMetric: Maybe<BillingLimitMetricItem>;
  value: Maybe<Scalars['Float']>;
};

export type BillingMetricUsageQuotaItem = {
  __typename?: 'BillingMetricUsageQuotaItem';
  limitMetric: Maybe<BillingLimitMetricItem>;
  value: Maybe<Scalars['Float']>;
};

/** BillingMetricUsageQuotasListResponse output */
export type BillingMetricUsageQuotasListResponse = {
  __typename?: 'BillingMetricUsageQuotasListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<BillingMetricUsageQuotaItem>;
};

export type BillingMetricUsagesListFilter = {
  entryDate: DateTimePredicate;
};

/** BillingMetricUsagesListResponse output */
export type BillingMetricUsagesListResponse = {
  __typename?: 'BillingMetricUsagesListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<BillingMetricUsageItem>;
};

export type BillingNextPlanResponse = {
  __typename?: 'BillingNextPlanResponse';
  displayName: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
  price: Maybe<Scalars['Int']>;
};

export type BillingPlanBaseInfo = {
  __typename?: 'BillingPlanBaseInfo';
  description: Maybe<Scalars['String']>;
  displayName: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  isCustom: Maybe<Scalars['Boolean']>;
  isLegacy: Maybe<Scalars['Boolean']>;
  limitMetrics: Maybe<Array<Maybe<BillingPlanLimitMetricItem>>>;
  name: Maybe<Scalars['String']>;
  price: Maybe<Scalars['Int']>;
};

export type BillingPlanLimitMetricItem = {
  __typename?: 'BillingPlanLimitMetricItem';
  displayName: Maybe<Scalars['String']>;
  hardLimit: Maybe<Scalars['Float']>;
  name: Maybe<Scalars['String']>;
  overagePrice: Maybe<Scalars['Int']>;
  softLimit: Maybe<Scalars['Float']>;
};

/** BillingPlanUpdateMutationInput */
export type BillingPlanUpdateMutationInput = {
  planId: Scalars['ID'];
};

export type BoolPredicate = {
  equals?: Maybe<Scalars['Boolean']>;
  is_empty?: Maybe<Scalars['Boolean']>;
  is_not_empty?: Maybe<Scalars['Boolean']>;
  not_equals?: Maybe<Scalars['Boolean']>;
};

export type BoolPredicateHaving = {
  AND?: Maybe<Array<BoolPredicateHaving>>;
  OR?: Maybe<Array<BoolPredicateHaving>>;
  equals?: Maybe<Scalars['Boolean']>;
  is_empty?: Maybe<Scalars['Boolean']>;
  is_not_empty?: Maybe<Scalars['Boolean']>;
  not_equals?: Maybe<Scalars['Boolean']>;
};

export type Brand = {
  __typename?: 'Brand';
  _description: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  instagram: Maybe<Scalars['String']>;
  logo: Maybe<File>;
  name: Maybe<Scalars['String']>;
  type: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
  website: Maybe<Scalars['String']>;
};

/** Brand create input */
export type BrandCreateInput = {
  instagram?: Maybe<Scalars['String']>;
  logo?: Maybe<BrandLogoRelationInput>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

/** Brand create many input */
export type BrandCreateManyInput = {
  instagram?: Maybe<Scalars['String']>;
  logo?: Maybe<BrandLogoManyRelationInput>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

/** Brand delete input */
export type BrandDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** BrandFieldsPermissions create input */
export type BrandFieldsPermissions = {
  createdAt?: Maybe<Scalars['Boolean']>;
  instagram?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
  website?: Maybe<Scalars['Boolean']>;
};

export type BrandFilter = {
  AND?: Maybe<Array<BrandFilter>>;
  OR?: Maybe<Array<BrandFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  instagram?: Maybe<StringPredicate>;
  logo?: Maybe<FileFilter>;
  name?: Maybe<StringPredicate>;
  type?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
  website?: Maybe<StringPredicate>;
};

export type BrandGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: BrandGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type BrandGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  id?: Maybe<Array<GroupByField>>;
  instagram?: Maybe<Array<GroupByField>>;
  logo?: Maybe<FileGroupByQuery>;
  name?: Maybe<Array<GroupByField>>;
  type?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
  website?: Maybe<Array<GroupByField>>;
};

export type BrandKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** BrandListResponse output */
export type BrandListResponse = {
  __typename?: 'BrandListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<Brand>;
};

/** Brand relation input */
export type BrandLogoManyRelationInput = {
  connect?: Maybe<FileKeyFilter>;
};

/** Brand relation input */
export type BrandLogoRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Brand_Logo_FileCreateInput>;
};

/** Brand relation input */
export type BrandLogoUpdateRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Brand_Logo_FileCreateInput>;
  disconnect?: Maybe<FileKeyFilter>;
  reconnect?: Maybe<FileKeyFilter>;
  update?: Maybe<Brand_Logo_FileUpdateInput>;
};

/** BrandManyResponse output */
export type BrandManyResponse = {
  __typename?: 'BrandManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<Brand>;
};

/** No longer supported. Use `sort` instead. */
export enum BrandOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  InstagramAsc = 'instagram_ASC',
  InstagramDesc = 'instagram_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WebsiteAsc = 'website_ASC',
  WebsiteDesc = 'website_DESC',
}

/** Brand subscription payload */
export type BrandPayload = {
  __typename?: 'BrandPayload';
  mutation: MutationType;
  node: Maybe<Brand>;
  previousValues: Maybe<Brand>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type BrandRelationFilter = {
  every?: Maybe<BrandFilter>;
  none?: Maybe<BrandFilter>;
  some?: Maybe<BrandFilter>;
};

export type BrandSort = {
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  instagram?: Maybe<SortOrder>;
  logo?: Maybe<FileSort>;
  name?: Maybe<SortOrder>;
  type?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  website?: Maybe<SortOrder>;
};

/** Brand subscription filter */
export type BrandSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<BrandFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** Brand update input */
export type BrandUpdateByFilterInput = {
  instagram?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  name?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  type?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  website?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** Brand update input */
export type BrandUpdateInput = {
  id?: Maybe<Scalars['ID']>;
  instagram?: Maybe<Scalars['String']>;
  logo?: Maybe<BrandLogoUpdateRelationInput>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type Brand_PermissionFilter = {
  AND?: Maybe<Array<Brand_PermissionFilter>>;
  OR?: Maybe<Array<Brand_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  instagram?: Maybe<StringPredicate>;
  logo?: Maybe<File_PermissionFilter>;
  name?: Maybe<StringPredicate>;
  type?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
  website?: Maybe<StringPredicate>;
};

export type Brand_PermissionRelationFilter = {
  every?: Maybe<Brand_PermissionFilter>;
  none?: Maybe<Brand_PermissionFilter>;
  some?: Maybe<Brand_PermissionFilter>;
};

/** Files create input from brand_logo */
export type Brand_Logo_FileCreateInput = {
  brand_logo?: Maybe<FilesBrand_LogoRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8RelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24RelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8RelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8RelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24RelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailRelationInput>;
  video_video?: Maybe<FilesVideo_VideoRelationInput>;
};

/** Files update input from brand_logo */
export type Brand_Logo_FileUpdateInput = {
  brand_logo?: Maybe<FilesBrand_LogoUpdateRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverUpdateRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsUpdateRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsUpdateRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoUpdateRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallUpdateRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8UpdateRelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24UpdateRelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoUpdateRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8UpdateRelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8UpdateRelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24UpdateRelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoUpdateRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarUpdateRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoUpdateRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarUpdateRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewUpdateRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailUpdateRelationInput>;
  video_video?: Maybe<FilesVideo_VideoUpdateRelationInput>;
};

/** Plan create input from categoryPlan */
export type CategoryPlan_PlanCreateInput = {
  categoryPlan?: Maybe<PlanCategoryPlanRelationInput>;
  description?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  school?: Maybe<PlanSchoolRelationInput>;
  type?: Maybe<Scalars['String']>;
};

/** Plan update input from categoryPlan */
export type CategoryPlan_PlanUpdateInput = {
  categoryPlan?: Maybe<PlanCategoryPlanUpdateRelationInput>;
  description?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  school?: Maybe<PlanSchoolUpdateRelationInput>;
  type?: Maybe<Scalars['String']>;
};

/** ProductCategory create input from categoryProductRelation */
export type CategoryProductRelation_ProductCategoryCreateInput = {
  categoryProductRelation?: Maybe<ProductCategoryCategoryProductRelationRelationInput>;
  description?: Maybe<Scalars['String']>;
  name: Scalars['String'];
};

/** ProductCategory update input from categoryProductRelation */
export type CategoryProductRelation_ProductCategoryUpdateInput = {
  categoryProductRelation?: Maybe<ProductCategoryCategoryProductRelationUpdateRelationInput>;
  description?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** Product create input from category */
export type Category_ProductCreateInput = {
  amount: Scalars['Int'];
  category?: Maybe<ProductCategoryRelationInput>;
  currency?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  feesAmount?: Maybe<Scalars['Int']>;
  feesLookupKey?: Maybe<Scalars['String']>;
  interval: Scalars['String'];
  isActive?: Maybe<Scalars['Boolean']>;
  lookupKey?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  productSubscriptionsRelation?: Maybe<ProductProductSubscriptionsRelationRelationInput>;
  school?: Maybe<ProductSchoolRelationInput>;
  stripeProductId?: Maybe<Scalars['String']>;
};

/** Product update input from category */
export type Category_ProductUpdateInput = {
  data: ProductUpdateInput;
  filter?: Maybe<ProductKeyFilter>;
};

/** ChangePasswordInput */
export type ChangePasswordInput = {
  authProfileId: Scalars['ID'];
  email: Scalars['String'];
  newPassword: Scalars['String'];
  oldPassword: Scalars['String'];
  refreshToken: Scalars['String'];
};

export type Checkin = {
  __typename?: 'Checkin';
  _description: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  date: Maybe<Scalars['Date']>;
  deletedAt: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  profile: Maybe<Profile>;
  schedule: Maybe<Schedule>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

/** Checkin create input */
export type CheckinCreateInput = {
  date?: Maybe<Scalars['Date']>;
  profile?: Maybe<CheckinProfileRelationInput>;
  schedule?: Maybe<CheckinScheduleRelationInput>;
};

/** Checkin create many input */
export type CheckinCreateManyInput = {
  date?: Maybe<Scalars['Date']>;
  profile?: Maybe<CheckinProfileManyRelationInput>;
  schedule?: Maybe<CheckinScheduleManyRelationInput>;
};

/** Checkin delete input */
export type CheckinDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** CheckinFieldsPermissions create input */
export type CheckinFieldsPermissions = {
  createdAt?: Maybe<Scalars['Boolean']>;
  date?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type CheckinFilter = {
  AND?: Maybe<Array<CheckinFilter>>;
  OR?: Maybe<Array<CheckinFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  date?: Maybe<DatePredicate>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  profile?: Maybe<ProfileFilter>;
  schedule?: Maybe<ScheduleFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type CheckinGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: CheckinGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type CheckinGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  date?: Maybe<Array<GroupByField>>;
  id?: Maybe<Array<GroupByField>>;
  profile?: Maybe<ProfileGroupByQuery>;
  schedule?: Maybe<ScheduleGroupByQuery>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

export type CheckinKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** CheckinListResponse output */
export type CheckinListResponse = {
  __typename?: 'CheckinListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<Checkin>;
};

/** CheckinManyResponse output */
export type CheckinManyResponse = {
  __typename?: 'CheckinManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<Checkin>;
};

/** No longer supported. Use `sort` instead. */
export enum CheckinOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DateAsc = 'date_ASC',
  DateDesc = 'date_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** Checkin subscription payload */
export type CheckinPayload = {
  __typename?: 'CheckinPayload';
  mutation: MutationType;
  node: Maybe<Checkin>;
  previousValues: Maybe<Checkin>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** Checkin relation input */
export type CheckinProfileManyRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
};

/** Checkin relation input */
export type CheckinProfileRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
  create?: Maybe<Checkin_ProfileCreateInput>;
};

/** Checkin relation input */
export type CheckinProfileUpdateRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
  create?: Maybe<Checkin_ProfileCreateInput>;
  disconnect?: Maybe<ProfileKeyFilter>;
  reconnect?: Maybe<ProfileKeyFilter>;
  update?: Maybe<Checkin_ProfileUpdateInput>;
};

export type CheckinRelationFilter = {
  every?: Maybe<CheckinFilter>;
  none?: Maybe<CheckinFilter>;
  some?: Maybe<CheckinFilter>;
};

/** Checkin relation input */
export type CheckinScheduleManyRelationInput = {
  connect?: Maybe<ScheduleKeyFilter>;
};

/** Checkin relation input */
export type CheckinScheduleRelationInput = {
  connect?: Maybe<ScheduleKeyFilter>;
  create?: Maybe<Checkin_ScheduleCreateInput>;
};

/** Checkin relation input */
export type CheckinScheduleUpdateRelationInput = {
  connect?: Maybe<ScheduleKeyFilter>;
  create?: Maybe<Checkin_ScheduleCreateInput>;
  disconnect?: Maybe<ScheduleKeyFilter>;
  reconnect?: Maybe<ScheduleKeyFilter>;
  update?: Maybe<Checkin_ScheduleUpdateInput>;
};

export type CheckinSort = {
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  date?: Maybe<SortOrder>;
  deletedAt?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  profile?: Maybe<ProfileSort>;
  schedule?: Maybe<ScheduleSort>;
  updatedAt?: Maybe<SortOrder>;
};

/** Checkin subscription filter */
export type CheckinSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<CheckinFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** Checkin update input */
export type CheckinUpdateByFilterInput = {
  date?: Maybe<Array<Maybe<UpdateByFilterDateInput>>>;
};

/** Checkin update input */
export type CheckinUpdateInput = {
  date?: Maybe<Scalars['Date']>;
  id?: Maybe<Scalars['ID']>;
  profile?: Maybe<CheckinProfileUpdateRelationInput>;
  schedule?: Maybe<CheckinScheduleUpdateRelationInput>;
};

export type Checkin_PermissionFilter = {
  AND?: Maybe<Array<Checkin_PermissionFilter>>;
  OR?: Maybe<Array<Checkin_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  date?: Maybe<DatePredicate>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  profile?: Maybe<Profile_PermissionFilter>;
  schedule?: Maybe<Schedule_PermissionFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type Checkin_PermissionRelationFilter = {
  every?: Maybe<Checkin_PermissionFilter>;
  none?: Maybe<Checkin_PermissionFilter>;
  some?: Maybe<Checkin_PermissionFilter>;
};

/** Profile create input from checkin */
export type Checkin_ProfileCreateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8RelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24RelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Profile update input from checkin */
export type Checkin_ProfileUpdateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsUpdateRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinUpdateRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassUpdateRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationUpdateRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileUpdateRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoUpdateRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolUpdateRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationUpdateRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamUpdateRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileUpdateRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallUpdateRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8UpdateRelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24UpdateRelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileUpdateRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountUpdateRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkUpdateRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationUpdateRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Schedule create input from checkin */
export type Checkin_ScheduleCreateInput = {
  airtableId?: Maybe<Scalars['String']>;
  checkin?: Maybe<ScheduleCheckinRelationInput>;
  endTime?: Maybe<Scalars['String']>;
  idMartialArt?: Maybe<ScheduleIdMartialArtRelationInput>;
  idProfile?: Maybe<ScheduleIdProfileRelationInput>;
  idSchool?: Maybe<ScheduleIdSchoolRelationInput>;
  name?: Maybe<Scalars['String']>;
  room?: Maybe<Scalars['String']>;
  startTime?: Maybe<Scalars['String']>;
  weekday?: Maybe<Scalars['String']>;
};

/** Schedule update input from checkin */
export type Checkin_ScheduleUpdateInput = {
  airtableId?: Maybe<Scalars['String']>;
  checkin?: Maybe<ScheduleCheckinUpdateRelationInput>;
  endTime?: Maybe<Scalars['String']>;
  idMartialArt?: Maybe<ScheduleIdMartialArtUpdateRelationInput>;
  idProfile?: Maybe<ScheduleIdProfileUpdateRelationInput>;
  idSchool?: Maybe<ScheduleIdSchoolUpdateRelationInput>;
  name?: Maybe<Scalars['String']>;
  room?: Maybe<Scalars['String']>;
  startTime?: Maybe<Scalars['String']>;
  weekday?: Maybe<Scalars['String']>;
};

export type CiCdMigration = {
  __typename?: 'CiCdMigration';
  _description: Maybe<Scalars['String']>;
  code: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

/** CiCdMigrations create input */
export type CiCdMigrationCreateInput = {
  code?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** CiCdMigrations create many input */
export type CiCdMigrationCreateManyInput = {
  code?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** CiCdMigrations delete input */
export type CiCdMigrationDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** CiCdMigrationFieldsPermissions create input */
export type CiCdMigrationFieldsPermissions = {
  code?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type CiCdMigrationFilter = {
  AND?: Maybe<Array<CiCdMigrationFilter>>;
  OR?: Maybe<Array<CiCdMigrationFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  code?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  name?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type CiCdMigrationGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: CiCdMigrationGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type CiCdMigrationGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  code?: Maybe<Array<GroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  id?: Maybe<Array<GroupByField>>;
  name?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

export type CiCdMigrationKeyFilter = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
};

/** CiCdMigrationListResponse output */
export type CiCdMigrationListResponse = {
  __typename?: 'CiCdMigrationListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<CiCdMigration>;
};

/** CiCdMigrationManyResponse output */
export type CiCdMigrationManyResponse = {
  __typename?: 'CiCdMigrationManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<CiCdMigration>;
};

/** No longer supported. Use `sort` instead. */
export enum CiCdMigrationOrderBy {
  CodeAsc = 'code_ASC',
  CodeDesc = 'code_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** CiCdMigrations subscription payload */
export type CiCdMigrationPayload = {
  __typename?: 'CiCdMigrationPayload';
  mutation: MutationType;
  node: Maybe<CiCdMigration>;
  previousValues: Maybe<CiCdMigration>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type CiCdMigrationSort = {
  code?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
};

/** CiCdMigrations subscription filter */
export type CiCdMigrationSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<CiCdMigrationFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** CiCdMigrations update input */
export type CiCdMigrationUpdateByFilterInput = {
  code?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  name?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** CiCdMigrations update input */
export type CiCdMigrationUpdateInput = {
  code?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
};

export type CiCdMigration_PermissionFilter = {
  AND?: Maybe<Array<CiCdMigration_PermissionFilter>>;
  OR?: Maybe<Array<CiCdMigration_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  code?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  name?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

/** PrivateClasses create input from classPrivateClassPurchaseRelation */
export type ClassPrivateClassPurchaseRelation_PrivateClassCreateInput = {
  amount: Scalars['Int'];
  classPrivateClassPurchaseRelation?: Maybe<PrivateClassesClassPrivateClassPurchaseRelationRelationInput>;
  currency?: Maybe<Scalars['String']>;
  days?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  /** Duration saved in minutes */
  duration?: Maybe<Scalars['Int']>;
  endTime?: Maybe<Scalars['DateTime']>;
  instructor?: Maybe<PrivateClassesInstructorRelationInput>;
  isActive?: Maybe<Scalars['Boolean']>;
  lookupKey?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  school?: Maybe<PrivateClassesSchoolRelationInput>;
  startTime?: Maybe<Scalars['DateTime']>;
  stripeProductId: Scalars['String'];
};

/** PrivateClasses update input from classPrivateClassPurchaseRelation */
export type ClassPrivateClassPurchaseRelation_PrivateClassUpdateInput = {
  amount?: Maybe<Scalars['Int']>;
  classPrivateClassPurchaseRelation?: Maybe<PrivateClassesClassPrivateClassPurchaseRelationUpdateRelationInput>;
  currency?: Maybe<Scalars['String']>;
  days?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  /** Duration saved in minutes */
  duration?: Maybe<Scalars['Int']>;
  endTime?: Maybe<Scalars['DateTime']>;
  instructor?: Maybe<PrivateClassesInstructorUpdateRelationInput>;
  isActive?: Maybe<Scalars['Boolean']>;
  lookupKey?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  school?: Maybe<PrivateClassesSchoolUpdateRelationInput>;
  startTime?: Maybe<Scalars['DateTime']>;
  stripeProductId?: Maybe<Scalars['String']>;
};

/** PrivateClassPurchase create input from class */
export type Class_PrivateClassPurchaseCreateInput = {
  class?: Maybe<PrivateClassPurchaseClassRelationInput>;
  customer?: Maybe<PrivateClassPurchaseCustomerRelationInput>;
  /** Duration saved in minutes */
  duration?: Maybe<Scalars['Int']>;
  paymentIntent?: Maybe<Scalars['String']>;
  startTime?: Maybe<Scalars['DateTime']>;
  status?: Maybe<Scalars['String']>;
};

/** PrivateClassPurchase update input from class */
export type Class_PrivateClassPurchaseUpdateInput = {
  data: PrivateClassPurchaseUpdateInput;
  filter?: Maybe<PrivateClassPurchaseKeyFilter>;
};

/** Authentication Profile Attributes for Cognito */
export type CognitoAuthProfileAttributes = {
  __typename?: 'CognitoAuthProfileAttributes';
  clientAuthDomain: Maybe<Scalars['String']>;
};

export type Competition = {
  __typename?: 'Competition';
  _description: Maybe<Scalars['String']>;
  airtableId: Maybe<Scalars['String']>;
  city: Maybe<Scalars['String']>;
  country: Maybe<Scalars['String']>;
  cover: Maybe<File>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  date: Maybe<Scalars['DateTime']>;
  deletedAt: Maybe<Scalars['Int']>;
  email: Maybe<Scalars['String']>;
  eventWebsite: Maybe<Scalars['String']>;
  facebook: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  information: Maybe<Scalars['String']>;
  instagram: Maybe<Scalars['String']>;
  martialArt: Maybe<MartialArt>;
  name: Maybe<Scalars['String']>;
  phone: Maybe<Scalars['String']>;
  registrationLink: Maybe<Scalars['String']>;
  state: Maybe<Scalars['String']>;
  twitter: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
  youtube: Maybe<Scalars['String']>;
};

/** Competition relation input */
export type CompetitionCoverManyRelationInput = {
  connect?: Maybe<FileKeyFilter>;
};

/** Competition relation input */
export type CompetitionCoverRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Competition_Cover_FileCreateInput>;
};

/** Competition relation input */
export type CompetitionCoverUpdateRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Competition_Cover_FileCreateInput>;
  disconnect?: Maybe<FileKeyFilter>;
  reconnect?: Maybe<FileKeyFilter>;
  update?: Maybe<Competition_Cover_FileUpdateInput>;
};

/** Competition create input */
export type CompetitionCreateInput = {
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  cover?: Maybe<CompetitionCoverRelationInput>;
  date?: Maybe<Scalars['DateTime']>;
  email?: Maybe<Scalars['String']>;
  eventWebsite?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  information?: Maybe<Scalars['String']>;
  instagram?: Maybe<Scalars['String']>;
  martialArt?: Maybe<CompetitionMartialArtRelationInput>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  registrationLink?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Competition create many input */
export type CompetitionCreateManyInput = {
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  cover?: Maybe<CompetitionCoverManyRelationInput>;
  date?: Maybe<Scalars['DateTime']>;
  email?: Maybe<Scalars['String']>;
  eventWebsite?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  information?: Maybe<Scalars['String']>;
  instagram?: Maybe<Scalars['String']>;
  martialArt?: Maybe<CompetitionMartialArtManyRelationInput>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  registrationLink?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Competition delete input */
export type CompetitionDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** CompetitionFieldsPermissions create input */
export type CompetitionFieldsPermissions = {
  airtableId?: Maybe<Scalars['Boolean']>;
  city?: Maybe<Scalars['Boolean']>;
  country?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['Boolean']>;
  date?: Maybe<Scalars['Boolean']>;
  email?: Maybe<Scalars['Boolean']>;
  eventWebsite?: Maybe<Scalars['Boolean']>;
  facebook?: Maybe<Scalars['Boolean']>;
  information?: Maybe<Scalars['Boolean']>;
  instagram?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['Boolean']>;
  registrationLink?: Maybe<Scalars['Boolean']>;
  state?: Maybe<Scalars['Boolean']>;
  twitter?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
  youtube?: Maybe<Scalars['Boolean']>;
};

export type CompetitionFilter = {
  AND?: Maybe<Array<CompetitionFilter>>;
  OR?: Maybe<Array<CompetitionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  airtableId?: Maybe<StringPredicate>;
  city?: Maybe<StringPredicate>;
  country?: Maybe<StringPredicate>;
  cover?: Maybe<FileFilter>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  date?: Maybe<DateTimePredicate>;
  deletedAt?: Maybe<IntPredicate>;
  email?: Maybe<StringPredicate>;
  eventWebsite?: Maybe<StringPredicate>;
  facebook?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  information?: Maybe<StringPredicate>;
  instagram?: Maybe<StringPredicate>;
  martialArt?: Maybe<MartialArtFilter>;
  name?: Maybe<StringPredicate>;
  phone?: Maybe<StringPredicate>;
  registrationLink?: Maybe<StringPredicate>;
  state?: Maybe<StringPredicate>;
  twitter?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
  youtube?: Maybe<StringPredicate>;
};

export type CompetitionGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: CompetitionGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type CompetitionGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  airtableId?: Maybe<Array<GroupByField>>;
  city?: Maybe<Array<GroupByField>>;
  country?: Maybe<Array<GroupByField>>;
  cover?: Maybe<FileGroupByQuery>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  date?: Maybe<Array<GroupByField>>;
  email?: Maybe<Array<GroupByField>>;
  eventWebsite?: Maybe<Array<GroupByField>>;
  facebook?: Maybe<Array<GroupByField>>;
  id?: Maybe<Array<GroupByField>>;
  information?: Maybe<Array<GroupByField>>;
  instagram?: Maybe<Array<GroupByField>>;
  martialArt?: Maybe<MartialArtGroupByQuery>;
  name?: Maybe<Array<GroupByField>>;
  phone?: Maybe<Array<GroupByField>>;
  registrationLink?: Maybe<Array<GroupByField>>;
  state?: Maybe<Array<GroupByField>>;
  twitter?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
  youtube?: Maybe<Array<GroupByField>>;
};

/** MartialArt create input from competitionId */
export type CompetitionId_MartialArtCreateInput = {
  achievementsMartialArt?: Maybe<MartialArtAchievementsMartialArtRelationInput>;
  attachments?: Maybe<MartialArtAttachmentsRelationInput>;
  competitionId?: Maybe<MartialArtCompetitionIdRelationInput>;
  countryOrigin?: Maybe<Scalars['String']>;
  martialArtsAirtableId?: Maybe<Scalars['String']>;
  martialArtsSchool?: Maybe<MartialArtMartialArtsSchoolRelationInput>;
  name: Scalars['String'];
  rankMartialArt?: Maybe<MartialArtRankMartialArtRelationInput>;
  scheduleMartialArt?: Maybe<MartialArtScheduleMartialArtRelationInput>;
  schoolsAirtableId?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
};

/** MartialArt update input from competitionId */
export type CompetitionId_MartialArtUpdateInput = {
  achievementsMartialArt?: Maybe<MartialArtAchievementsMartialArtUpdateRelationInput>;
  attachments?: Maybe<MartialArtAttachmentsUpdateRelationInput>;
  competitionId?: Maybe<MartialArtCompetitionIdUpdateRelationInput>;
  countryOrigin?: Maybe<Scalars['String']>;
  martialArtsAirtableId?: Maybe<Scalars['String']>;
  martialArtsSchool?: Maybe<MartialArtMartialArtsSchoolUpdateRelationInput>;
  name?: Maybe<Scalars['String']>;
  rankMartialArt?: Maybe<MartialArtRankMartialArtUpdateRelationInput>;
  scheduleMartialArt?: Maybe<MartialArtScheduleMartialArtUpdateRelationInput>;
  schoolsAirtableId?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
};

export type CompetitionKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** CompetitionListResponse output */
export type CompetitionListResponse = {
  __typename?: 'CompetitionListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<Competition>;
};

/** CompetitionManyResponse output */
export type CompetitionManyResponse = {
  __typename?: 'CompetitionManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<Competition>;
};

/** Competition relation input */
export type CompetitionMartialArtManyRelationInput = {
  connect?: Maybe<MartialArtKeyFilter>;
};

/** Competition relation input */
export type CompetitionMartialArtRelationInput = {
  connect?: Maybe<MartialArtKeyFilter>;
  create?: Maybe<CompetitionId_MartialArtCreateInput>;
};

/** Competition relation input */
export type CompetitionMartialArtUpdateRelationInput = {
  connect?: Maybe<MartialArtKeyFilter>;
  create?: Maybe<CompetitionId_MartialArtCreateInput>;
  disconnect?: Maybe<MartialArtKeyFilter>;
  reconnect?: Maybe<MartialArtKeyFilter>;
  update?: Maybe<CompetitionId_MartialArtUpdateInput>;
};

/** No longer supported. Use `sort` instead. */
export enum CompetitionOrderBy {
  AirtableIdAsc = 'airtableId_ASC',
  AirtableIdDesc = 'airtableId_DESC',
  CityAsc = 'city_ASC',
  CityDesc = 'city_DESC',
  CountryAsc = 'country_ASC',
  CountryDesc = 'country_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DateAsc = 'date_ASC',
  DateDesc = 'date_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  EmailAsc = 'email_ASC',
  EmailDesc = 'email_DESC',
  EventWebsiteAsc = 'eventWebsite_ASC',
  EventWebsiteDesc = 'eventWebsite_DESC',
  FacebookAsc = 'facebook_ASC',
  FacebookDesc = 'facebook_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  InformationAsc = 'information_ASC',
  InformationDesc = 'information_DESC',
  InstagramAsc = 'instagram_ASC',
  InstagramDesc = 'instagram_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PhoneAsc = 'phone_ASC',
  PhoneDesc = 'phone_DESC',
  RegistrationLinkAsc = 'registrationLink_ASC',
  RegistrationLinkDesc = 'registrationLink_DESC',
  StateAsc = 'state_ASC',
  StateDesc = 'state_DESC',
  TwitterAsc = 'twitter_ASC',
  TwitterDesc = 'twitter_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  YoutubeAsc = 'youtube_ASC',
  YoutubeDesc = 'youtube_DESC',
}

/** Competition subscription payload */
export type CompetitionPayload = {
  __typename?: 'CompetitionPayload';
  mutation: MutationType;
  node: Maybe<Competition>;
  previousValues: Maybe<Competition>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type CompetitionRelationFilter = {
  every?: Maybe<CompetitionFilter>;
  none?: Maybe<CompetitionFilter>;
  some?: Maybe<CompetitionFilter>;
};

export type CompetitionSort = {
  airtableId?: Maybe<SortOrder>;
  city?: Maybe<SortOrder>;
  country?: Maybe<SortOrder>;
  cover?: Maybe<FileSort>;
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  date?: Maybe<SortOrder>;
  deletedAt?: Maybe<SortOrder>;
  email?: Maybe<SortOrder>;
  eventWebsite?: Maybe<SortOrder>;
  facebook?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  information?: Maybe<SortOrder>;
  instagram?: Maybe<SortOrder>;
  martialArt?: Maybe<MartialArtSort>;
  name?: Maybe<SortOrder>;
  phone?: Maybe<SortOrder>;
  registrationLink?: Maybe<SortOrder>;
  state?: Maybe<SortOrder>;
  twitter?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  youtube?: Maybe<SortOrder>;
};

/** Competition subscription filter */
export type CompetitionSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<CompetitionFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** Competition update input */
export type CompetitionUpdateByFilterInput = {
  airtableId?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  city?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  country?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  date?: Maybe<Array<Maybe<UpdateByFilterDateTimeInput>>>;
  email?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  eventWebsite?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  facebook?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  information?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  instagram?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  name?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  phone?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  registrationLink?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  state?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  twitter?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  youtube?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** Competition update input */
export type CompetitionUpdateInput = {
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  cover?: Maybe<CompetitionCoverUpdateRelationInput>;
  date?: Maybe<Scalars['DateTime']>;
  email?: Maybe<Scalars['String']>;
  eventWebsite?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  information?: Maybe<Scalars['String']>;
  instagram?: Maybe<Scalars['String']>;
  martialArt?: Maybe<CompetitionMartialArtUpdateRelationInput>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  registrationLink?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

export type Competition_PermissionFilter = {
  AND?: Maybe<Array<Competition_PermissionFilter>>;
  OR?: Maybe<Array<Competition_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  airtableId?: Maybe<StringPredicate>;
  city?: Maybe<StringPredicate>;
  country?: Maybe<StringPredicate>;
  cover?: Maybe<File_PermissionFilter>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  date?: Maybe<DateTimePredicate>;
  deletedAt?: Maybe<IntPredicate>;
  email?: Maybe<StringPredicate>;
  eventWebsite?: Maybe<StringPredicate>;
  facebook?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  information?: Maybe<StringPredicate>;
  instagram?: Maybe<StringPredicate>;
  martialArt?: Maybe<MartialArt_PermissionFilter>;
  name?: Maybe<StringPredicate>;
  phone?: Maybe<StringPredicate>;
  registrationLink?: Maybe<StringPredicate>;
  state?: Maybe<StringPredicate>;
  twitter?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
  youtube?: Maybe<StringPredicate>;
};

export type Competition_PermissionRelationFilter = {
  every?: Maybe<Competition_PermissionFilter>;
  none?: Maybe<Competition_PermissionFilter>;
  some?: Maybe<Competition_PermissionFilter>;
};

/** Files create input from competition_cover */
export type Competition_Cover_FileCreateInput = {
  brand_logo?: Maybe<FilesBrand_LogoRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8RelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24RelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8RelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8RelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24RelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailRelationInput>;
  video_video?: Maybe<FilesVideo_VideoRelationInput>;
};

/** Files update input from competition_cover */
export type Competition_Cover_FileUpdateInput = {
  brand_logo?: Maybe<FilesBrand_LogoUpdateRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverUpdateRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsUpdateRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsUpdateRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoUpdateRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallUpdateRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8UpdateRelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24UpdateRelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoUpdateRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8UpdateRelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8UpdateRelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24UpdateRelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoUpdateRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarUpdateRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoUpdateRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarUpdateRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewUpdateRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailUpdateRelationInput>;
  video_video?: Maybe<FilesVideo_VideoUpdateRelationInput>;
};

/** Computed field mode */
export enum ComputedFieldMode {
  Stored = 'STORED',
  Virtual = 'VIRTUAL',
}

/** Countries relation input */
export type CountriesCountryLanguageManyRelationInput = {
  connect?: Maybe<Array<LanguageCountryKeyFilter>>;
};

/** Countries relation input */
export type CountriesCountryLanguageRelationInput = {
  connect?: Maybe<Array<LanguageCountryKeyFilter>>;
  create?: Maybe<Array<Maybe<IdCountry_LanguageCountryCreateInput>>>;
};

/** Countries relation input */
export type CountriesCountryLanguageUpdateRelationInput = {
  connect?: Maybe<Array<LanguageCountryKeyFilter>>;
  create?: Maybe<Array<Maybe<IdCountry_LanguageCountryCreateInput>>>;
  disconnect?: Maybe<Array<LanguageCountryKeyFilter>>;
  reconnect?: Maybe<Array<LanguageCountryKeyFilter>>;
  update?: Maybe<Array<Maybe<IdCountry_LanguageCountryUpdateInput>>>;
};

export type Country = {
  __typename?: 'Country';
  _description: Maybe<Scalars['String']>;
  airtableId: Maybe<Scalars['String']>;
  countryLanguage: Maybe<LanguageCountryListResponse>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

export type CountryCountryLanguageArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<LanguageCountryFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<LanguageCountryGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<LanguageCountryOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<LanguageCountrySort>>;
};

/** Countries create input */
export type CountryCreateInput = {
  airtableId?: Maybe<Scalars['String']>;
  countryLanguage?: Maybe<CountriesCountryLanguageRelationInput>;
  name?: Maybe<Scalars['String']>;
};

/** Countries create many input */
export type CountryCreateManyInput = {
  airtableId?: Maybe<Scalars['String']>;
  countryLanguage?: Maybe<CountriesCountryLanguageManyRelationInput>;
  name?: Maybe<Scalars['String']>;
};

/** Countries delete input */
export type CountryDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** CountryFieldsPermissions create input */
export type CountryFieldsPermissions = {
  airtableId?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type CountryFilter = {
  AND?: Maybe<Array<CountryFilter>>;
  OR?: Maybe<Array<CountryFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  airtableId?: Maybe<StringPredicate>;
  countryLanguage?: Maybe<LanguageCountryRelationFilter>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  name?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type CountryGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: CountryGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type CountryGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  airtableId?: Maybe<Array<GroupByField>>;
  countryLanguage?: Maybe<LanguageCountryGroupByQuery>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  id?: Maybe<Array<GroupByField>>;
  name?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

export type CountryKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** Countries create input from countryLanguage */
export type CountryLanguage_CountryCreateInput = {
  airtableId?: Maybe<Scalars['String']>;
  countryLanguage?: Maybe<CountriesCountryLanguageRelationInput>;
  name?: Maybe<Scalars['String']>;
};

/** Countries update input from countryLanguage */
export type CountryLanguage_CountryUpdateInput = {
  airtableId?: Maybe<Scalars['String']>;
  countryLanguage?: Maybe<CountriesCountryLanguageUpdateRelationInput>;
  name?: Maybe<Scalars['String']>;
};

/** CountryListResponse output */
export type CountryListResponse = {
  __typename?: 'CountryListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<Country>;
};

/** CountryManyResponse output */
export type CountryManyResponse = {
  __typename?: 'CountryManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<Country>;
};

/** No longer supported. Use `sort` instead. */
export enum CountryOrderBy {
  AirtableIdAsc = 'airtableId_ASC',
  AirtableIdDesc = 'airtableId_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** Countries subscription payload */
export type CountryPayload = {
  __typename?: 'CountryPayload';
  mutation: MutationType;
  node: Maybe<Country>;
  previousValues: Maybe<Country>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type CountrySort = {
  airtableId?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
};

/** Countries subscription filter */
export type CountrySubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<CountryFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** Countries update input */
export type CountryUpdateByFilterInput = {
  airtableId?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  name?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** Countries update input */
export type CountryUpdateInput = {
  airtableId?: Maybe<Scalars['String']>;
  countryLanguage?: Maybe<CountriesCountryLanguageUpdateRelationInput>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
};

export type Country_PermissionFilter = {
  AND?: Maybe<Array<Country_PermissionFilter>>;
  OR?: Maybe<Array<Country_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  airtableId?: Maybe<StringPredicate>;
  countryLanguage?: Maybe<LanguageCountry_PermissionRelationFilter>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  name?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

/** Competition create input from cover */
export type Cover_CompetitionCreateInput = {
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  cover?: Maybe<CompetitionCoverRelationInput>;
  date?: Maybe<Scalars['DateTime']>;
  email?: Maybe<Scalars['String']>;
  eventWebsite?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  information?: Maybe<Scalars['String']>;
  instagram?: Maybe<Scalars['String']>;
  martialArt?: Maybe<CompetitionMartialArtRelationInput>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  registrationLink?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Competition update input from cover */
export type Cover_CompetitionUpdateInput = {
  data: CompetitionUpdateInput;
  filter?: Maybe<CompetitionKeyFilter>;
};

export type CreateCheckoutSessionInput = {
  cancelUrl: Scalars['String'];
  email: Scalars['String'];
  feesLookupKey: Scalars['String'];
  lookupKey: Scalars['String'];
  successUrl: Scalars['String'];
};

export type CreateCheckoutSessionResponse = {
  __typename?: 'CreateCheckoutSessionResponse';
  redirectUrl: Maybe<Scalars['String']>;
};

export type CreateCustomerResolverInput = {
  description?: Maybe<Scalars['String']>;
  email: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
};

export type CreateCustomerResolverResponse = {
  __typename?: 'CreateCustomerResolverResponse';
  description: Maybe<Scalars['String']>;
  email: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
  phone: Maybe<Scalars['String']>;
  stripeCustomerId: Maybe<Scalars['String']>;
};

export type CreatePrivateClassCheckoutInput = {
  cancelUrl: Scalars['String'];
  duration: Scalars['Int'];
  email: Scalars['String'];
  lookupKey: Scalars['String'];
  startTime: Scalars['DateTime'];
  successUrl: Scalars['String'];
};

export type CreatePrivateClassResolverInput = {
  amount: Scalars['Int'];
  currency: Scalars['String'];
  days: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  duration: Scalars['Int'];
  endTime: Scalars['DateTime'];
  instructorId: Scalars['ID'];
  name: Scalars['String'];
  schoolId: Scalars['ID'];
  startTime: Scalars['DateTime'];
};

export type CreateProductResolverInput = {
  amount: Scalars['Int'];
  categoryId: Scalars['ID'];
  currency: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  fees: Scalars['Int'];
  interval: Scalars['String'];
  name: Scalars['String'];
  schoolId: Scalars['ID'];
};

export type CreateProductResolverResponse = {
  __typename?: 'CreateProductResolverResponse';
  id: Maybe<Scalars['ID']>;
  isActive: Maybe<Scalars['Boolean']>;
  stripeProductId: Maybe<Scalars['String']>;
};

export type CreateStripeAccountResponse = {
  __typename?: 'CreateStripeAccountResponse';
  id: Maybe<Scalars['ID']>;
  stripeAccountId: Maybe<Scalars['String']>;
  stripeAccountStatus: Maybe<Scalars['String']>;
};

/** Custom Table Field Type */
export type CustomTableField = {
  __typename?: 'CustomTableField';
  computedMode: Maybe<ComputedFieldMode>;
  defaultValue: Maybe<Scalars['String']>;
  description: Maybe<Scalars['String']>;
  displayName: Maybe<Scalars['String']>;
  expression: Maybe<Scalars['String']>;
  fieldType: Maybe<FieldType>;
  fieldTypeAttributes: Maybe<FieldTypeAttributes>;
  isList: Scalars['Boolean'];
  isRequired: Scalars['Boolean'];
  isUnique: Maybe<Scalars['Boolean']>;
  name: Maybe<Scalars['String']>;
};

export type Customer = {
  __typename?: 'Customer';
  _description: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  customerPrivateClassPurchaseRelation: Maybe<PrivateClassPurchaseListResponse>;
  customerSubscriptionsRelation: Maybe<ProductSubscriptionListResponse>;
  deletedAt: Maybe<Scalars['Int']>;
  description: Maybe<Scalars['String']>;
  email: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
  phone: Maybe<Scalars['String']>;
  stripeCustomerId: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

export type CustomerCustomerPrivateClassPurchaseRelationArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<PrivateClassPurchaseFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<PrivateClassPurchaseGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<PrivateClassPurchaseOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<PrivateClassPurchaseSort>>;
};

export type CustomerCustomerSubscriptionsRelationArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ProductSubscriptionFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ProductSubscriptionGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ProductSubscriptionOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ProductSubscriptionSort>>;
};

/** Customer create input */
export type CustomerCreateInput = {
  customerPrivateClassPurchaseRelation?: Maybe<CustomerCustomerPrivateClassPurchaseRelationRelationInput>;
  customerSubscriptionsRelation?: Maybe<CustomerCustomerSubscriptionsRelationRelationInput>;
  description?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  stripeCustomerId?: Maybe<Scalars['String']>;
};

/** Customer create many input */
export type CustomerCreateManyInput = {
  customerPrivateClassPurchaseRelation?: Maybe<CustomerCustomerPrivateClassPurchaseRelationManyRelationInput>;
  customerSubscriptionsRelation?: Maybe<CustomerCustomerSubscriptionsRelationManyRelationInput>;
  description?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  stripeCustomerId?: Maybe<Scalars['String']>;
};

/** Customer relation input */
export type CustomerCustomerPrivateClassPurchaseRelationManyRelationInput = {
  connect?: Maybe<Array<PrivateClassPurchaseKeyFilter>>;
};

/** Customer relation input */
export type CustomerCustomerPrivateClassPurchaseRelationRelationInput = {
  connect?: Maybe<Array<PrivateClassPurchaseKeyFilter>>;
  create?: Maybe<Array<Maybe<Customer_PrivateClassPurchaseCreateInput>>>;
};

/** Customer relation input */
export type CustomerCustomerPrivateClassPurchaseRelationUpdateRelationInput = {
  connect?: Maybe<Array<PrivateClassPurchaseKeyFilter>>;
  create?: Maybe<Array<Maybe<Customer_PrivateClassPurchaseCreateInput>>>;
  disconnect?: Maybe<Array<PrivateClassPurchaseKeyFilter>>;
  reconnect?: Maybe<Array<PrivateClassPurchaseKeyFilter>>;
  update?: Maybe<Array<Maybe<Customer_PrivateClassPurchaseUpdateInput>>>;
};

/** Customer relation input */
export type CustomerCustomerSubscriptionsRelationManyRelationInput = {
  connect?: Maybe<Array<ProductSubscriptionKeyFilter>>;
};

/** Customer relation input */
export type CustomerCustomerSubscriptionsRelationRelationInput = {
  connect?: Maybe<Array<ProductSubscriptionKeyFilter>>;
  create?: Maybe<Array<Maybe<Customer_ProductSubscriptionCreateInput>>>;
};

/** Customer relation input */
export type CustomerCustomerSubscriptionsRelationUpdateRelationInput = {
  connect?: Maybe<Array<ProductSubscriptionKeyFilter>>;
  create?: Maybe<Array<Maybe<Customer_ProductSubscriptionCreateInput>>>;
  disconnect?: Maybe<Array<ProductSubscriptionKeyFilter>>;
  reconnect?: Maybe<Array<ProductSubscriptionKeyFilter>>;
  update?: Maybe<Array<Maybe<Customer_ProductSubscriptionUpdateInput>>>;
};

/** Customer delete input */
export type CustomerDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** CustomerFieldsPermissions create input */
export type CustomerFieldsPermissions = {
  createdAt?: Maybe<Scalars['Boolean']>;
  description?: Maybe<Scalars['Boolean']>;
  email?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['Boolean']>;
  stripeCustomerId?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type CustomerFilter = {
  AND?: Maybe<Array<CustomerFilter>>;
  OR?: Maybe<Array<CustomerFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  customerPrivateClassPurchaseRelation?: Maybe<PrivateClassPurchaseRelationFilter>;
  customerSubscriptionsRelation?: Maybe<ProductSubscriptionRelationFilter>;
  deletedAt?: Maybe<IntPredicate>;
  description?: Maybe<StringPredicate>;
  email?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  name?: Maybe<StringPredicate>;
  phone?: Maybe<StringPredicate>;
  stripeCustomerId?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type CustomerGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: CustomerGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type CustomerGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  customerPrivateClassPurchaseRelation?: Maybe<PrivateClassPurchaseGroupByQuery>;
  customerSubscriptionsRelation?: Maybe<ProductSubscriptionGroupByQuery>;
  description?: Maybe<Array<GroupByField>>;
  email?: Maybe<Array<GroupByField>>;
  id?: Maybe<Array<GroupByField>>;
  name?: Maybe<Array<GroupByField>>;
  phone?: Maybe<Array<GroupByField>>;
  stripeCustomerId?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

export type CustomerKeyFilter = {
  id?: Maybe<Scalars['ID']>;
  stripeCustomerId?: Maybe<Scalars['String']>;
};

/** CustomerListResponse output */
export type CustomerListResponse = {
  __typename?: 'CustomerListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<Customer>;
};

/** CustomerManyResponse output */
export type CustomerManyResponse = {
  __typename?: 'CustomerManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<Customer>;
};

/** No longer supported. Use `sort` instead. */
export enum CustomerOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  EmailAsc = 'email_ASC',
  EmailDesc = 'email_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PhoneAsc = 'phone_ASC',
  PhoneDesc = 'phone_DESC',
  StripeCustomerIdAsc = 'stripeCustomerId_ASC',
  StripeCustomerIdDesc = 'stripeCustomerId_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** Customer subscription payload */
export type CustomerPayload = {
  __typename?: 'CustomerPayload';
  mutation: MutationType;
  node: Maybe<Customer>;
  previousValues: Maybe<Customer>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** Customer create input from customerPrivateClassPurchaseRelation */
export type CustomerPrivateClassPurchaseRelation_CustomerCreateInput = {
  customerPrivateClassPurchaseRelation?: Maybe<CustomerCustomerPrivateClassPurchaseRelationRelationInput>;
  customerSubscriptionsRelation?: Maybe<CustomerCustomerSubscriptionsRelationRelationInput>;
  description?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  stripeCustomerId?: Maybe<Scalars['String']>;
};

/** Customer update input from customerPrivateClassPurchaseRelation */
export type CustomerPrivateClassPurchaseRelation_CustomerUpdateInput = {
  customerPrivateClassPurchaseRelation?: Maybe<CustomerCustomerPrivateClassPurchaseRelationUpdateRelationInput>;
  customerSubscriptionsRelation?: Maybe<CustomerCustomerSubscriptionsRelationUpdateRelationInput>;
  description?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  stripeCustomerId?: Maybe<Scalars['String']>;
};

/** XCustomer create input from customerSchool */
export type CustomerSchool_XCustomerCreateInput = {
  customerAirtableId?: Maybe<Scalars['String']>;
  customerSchool?: Maybe<XCustomerCustomerSchoolRelationInput>;
  email?: Maybe<Scalars['String']>;
  interest?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  schools?: Maybe<XCustomerSchoolsRelationInput>;
};

/** XCustomer update input from customerSchool */
export type CustomerSchool_XCustomerUpdateInput = {
  customerAirtableId?: Maybe<Scalars['String']>;
  customerSchool?: Maybe<XCustomerCustomerSchoolUpdateRelationInput>;
  email?: Maybe<Scalars['String']>;
  interest?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  schools?: Maybe<XCustomerSchoolsUpdateRelationInput>;
};

export type CustomerSort = {
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  description?: Maybe<SortOrder>;
  email?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  phone?: Maybe<SortOrder>;
  stripeCustomerId?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
};

/** Customer subscription filter */
export type CustomerSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<CustomerFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** Customer create input from customerSubscriptionsRelation */
export type CustomerSubscriptionsRelation_CustomerCreateInput = {
  customerPrivateClassPurchaseRelation?: Maybe<CustomerCustomerPrivateClassPurchaseRelationRelationInput>;
  customerSubscriptionsRelation?: Maybe<CustomerCustomerSubscriptionsRelationRelationInput>;
  description?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  stripeCustomerId?: Maybe<Scalars['String']>;
};

/** Customer update input from customerSubscriptionsRelation */
export type CustomerSubscriptionsRelation_CustomerUpdateInput = {
  customerPrivateClassPurchaseRelation?: Maybe<CustomerCustomerPrivateClassPurchaseRelationUpdateRelationInput>;
  customerSubscriptionsRelation?: Maybe<CustomerCustomerSubscriptionsRelationUpdateRelationInput>;
  description?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  stripeCustomerId?: Maybe<Scalars['String']>;
};

/** Customer update input */
export type CustomerUpdateByFilterInput = {
  description?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  email?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  name?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  phone?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  stripeCustomerId?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** Customer update input */
export type CustomerUpdateInput = {
  customerPrivateClassPurchaseRelation?: Maybe<CustomerCustomerPrivateClassPurchaseRelationUpdateRelationInput>;
  customerSubscriptionsRelation?: Maybe<CustomerCustomerSubscriptionsRelationUpdateRelationInput>;
  description?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  stripeCustomerId?: Maybe<Scalars['String']>;
};

export type Customer_PermissionFilter = {
  AND?: Maybe<Array<Customer_PermissionFilter>>;
  OR?: Maybe<Array<Customer_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  customerPrivateClassPurchaseRelation?: Maybe<PrivateClassPurchase_PermissionRelationFilter>;
  customerSubscriptionsRelation?: Maybe<ProductSubscription_PermissionRelationFilter>;
  deletedAt?: Maybe<IntPredicate>;
  description?: Maybe<StringPredicate>;
  email?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  name?: Maybe<StringPredicate>;
  phone?: Maybe<StringPredicate>;
  stripeCustomerId?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

/** PrivateClassPurchase create input from customer */
export type Customer_PrivateClassPurchaseCreateInput = {
  class?: Maybe<PrivateClassPurchaseClassRelationInput>;
  customer?: Maybe<PrivateClassPurchaseCustomerRelationInput>;
  /** Duration saved in minutes */
  duration?: Maybe<Scalars['Int']>;
  paymentIntent?: Maybe<Scalars['String']>;
  startTime?: Maybe<Scalars['DateTime']>;
  status?: Maybe<Scalars['String']>;
};

/** PrivateClassPurchase update input from customer */
export type Customer_PrivateClassPurchaseUpdateInput = {
  data: PrivateClassPurchaseUpdateInput;
  filter?: Maybe<PrivateClassPurchaseKeyFilter>;
};

/** ProductSubscription create input from customer */
export type Customer_ProductSubscriptionCreateInput = {
  customer?: Maybe<ProductSubscriptionCustomerRelationInput>;
  periodEnd?: Maybe<Scalars['DateTime']>;
  periodStart?: Maybe<Scalars['DateTime']>;
  product: ProductSubscriptionProductRelationInput;
  status?: Maybe<Scalars['String']>;
  stripeSubscriptionId: Scalars['String'];
};

/** ProductSubscription update input from customer */
export type Customer_ProductSubscriptionUpdateInput = {
  data: ProductSubscriptionUpdateInput;
  filter?: Maybe<ProductSubscriptionKeyFilter>;
};

/** School create input from customersSchoolRelation */
export type CustomersSchoolRelation_SchoolCreateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountRelationInput>;
  user?: Maybe<SchoolUserRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

/** School update input from customersSchoolRelation */
export type CustomersSchoolRelation_SchoolUpdateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationUpdateRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolUpdateRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolUpdateRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolUpdateRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerUpdateRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoUpdateRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsUpdateRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationUpdateRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationUpdateRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationUpdateRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileUpdateRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationUpdateRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamUpdateRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountUpdateRelationInput>;
  user?: Maybe<SchoolUserUpdateRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

/** Date Field Attributes */
export type DateFieldTypeAttributes = {
  __typename?: 'DateFieldTypeAttributes';
  format: Scalars['String'];
};

export enum DatePartFunctionType {
  Date = 'DATE',
  Day = 'DAY',
  DayName = 'DAY_NAME',
  DayOfMonth = 'DAY_OF_MONTH',
  DayOfWeek = 'DAY_OF_WEEK',
  DayOfYear = 'DAY_OF_YEAR',
  Hour = 'HOUR',
  LastDay = 'LAST_DAY',
  Microsecond = 'MICROSECOND',
  Minute = 'MINUTE',
  Month = 'MONTH',
  MonthName = 'MONTH_NAME',
  Quarter = 'QUARTER',
  Second = 'SECOND',
  Time = 'TIME',
  Week = 'WEEK',
  WeekDay = 'WEEK_DAY',
  WeekOfYear = 'WEEK_OF_YEAR',
  Year = 'YEAR',
  YearWeek = 'YEAR_WEEK',
}

export type DatePredicate = {
  equals?: Maybe<Scalars['Date']>;
  gt?: Maybe<Scalars['Date']>;
  gte?: Maybe<Scalars['Date']>;
  in?: Maybe<Array<Scalars['Date']>>;
  is_empty?: Maybe<Scalars['Boolean']>;
  is_not_empty?: Maybe<Scalars['Boolean']>;
  lt?: Maybe<Scalars['Date']>;
  lte?: Maybe<Scalars['Date']>;
  not_equals?: Maybe<Scalars['Date']>;
  not_in?: Maybe<Array<Scalars['Date']>>;
  relative?: Maybe<DateRelativePredicates>;
};

export type DatePredicateHaving = {
  AND?: Maybe<Array<DatePredicateHaving>>;
  OR?: Maybe<Array<DatePredicateHaving>>;
  equals?: Maybe<Scalars['Date']>;
  gt?: Maybe<Scalars['Date']>;
  gte?: Maybe<Scalars['Date']>;
  in?: Maybe<Array<Scalars['Date']>>;
  is_empty?: Maybe<Scalars['Boolean']>;
  is_not_empty?: Maybe<Scalars['Boolean']>;
  lt?: Maybe<Scalars['Date']>;
  lte?: Maybe<Scalars['Date']>;
  not_equals?: Maybe<Scalars['Date']>;
  not_in?: Maybe<Array<Scalars['Date']>>;
};

export type DateRelativePredicateType = {
  op?: Maybe<RelativePredicateOpEnum>;
  unit?: Maybe<RelativePredicateUnitEnum>;
  value: Scalars['String'];
};

export type DateRelativePredicates = {
  gt?: Maybe<DateRelativePredicateType>;
  gte?: Maybe<DateRelativePredicateType>;
  lt?: Maybe<DateRelativePredicateType>;
  lte?: Maybe<DateRelativePredicateType>;
};

export type DateTimePredicate = {
  equals?: Maybe<Scalars['DateTime']>;
  gt?: Maybe<Scalars['DateTime']>;
  gte?: Maybe<Scalars['DateTime']>;
  in?: Maybe<Array<Scalars['DateTime']>>;
  is_empty?: Maybe<Scalars['Boolean']>;
  is_not_empty?: Maybe<Scalars['Boolean']>;
  lt?: Maybe<Scalars['DateTime']>;
  lte?: Maybe<Scalars['DateTime']>;
  not_equals?: Maybe<Scalars['DateTime']>;
  not_in?: Maybe<Array<Scalars['DateTime']>>;
  relative?: Maybe<DateRelativePredicates>;
};

export type DateTimePredicateHaving = {
  AND?: Maybe<Array<DateTimePredicateHaving>>;
  OR?: Maybe<Array<DateTimePredicateHaving>>;
  equals?: Maybe<Scalars['DateTime']>;
  gt?: Maybe<Scalars['DateTime']>;
  gte?: Maybe<Scalars['DateTime']>;
  in?: Maybe<Array<Scalars['DateTime']>>;
  is_empty?: Maybe<Scalars['Boolean']>;
  is_not_empty?: Maybe<Scalars['Boolean']>;
  lt?: Maybe<Scalars['DateTime']>;
  lte?: Maybe<Scalars['DateTime']>;
  not_equals?: Maybe<Scalars['DateTime']>;
  not_in?: Maybe<Array<Scalars['DateTime']>>;
};

/** Date Type Format Enum */
export enum DateTypeFormatEnum {
  Date = 'DATE',
  Datetime = 'DATETIME',
}

/** DeployDataResponse */
export type DeployDataResponse = {
  __typename?: 'DeployDataResponse';
  buildName: Scalars['String'];
  uploadBuildUrl: Scalars['String'];
  uploadMetaDataUrl: Scalars['String'];
};

export enum DeployModeEnum {
  Full = 'FULL',
  Functions = 'FUNCTIONS',
  Migrations = 'MIGRATIONS',
  OnlyPlugins = 'ONLY_PLUGINS',
  OnlyProject = 'ONLY_PROJECT',
}

/** DeployOptions */
export type DeployOptions = {
  extensionNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  mode?: Maybe<DeployModeEnum>;
  pluginNames?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export enum DeployStatusEnum {
  Compiling = 'compiling',
  CompleteError = 'complete_error',
  CompleteSuccess = 'complete_success',
  Deploying = 'deploying',
  Initialize = 'initialize',
  Preparing = 'preparing',
}

/** DeployStatusResult */
export type DeployStatusResult = {
  __typename?: 'DeployStatusResult';
  message: Maybe<Scalars['String']>;
  status: DeployStatusEnum;
};

/** DeployingBuildInput */
export type DeployingBuildInput = {
  buildName: Scalars['String'];
  options?: Maybe<DeployOptions>;
};

export type Discount = {
  __typename?: 'Discount';
  _description: Maybe<Scalars['String']>;
  active: Maybe<Scalars['Boolean']>;
  amount: Maybe<Scalars['Float']>;
  amountType: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  description: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
  type: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

/** Discount create input */
export type DiscountCreateInput = {
  active?: Maybe<Scalars['Boolean']>;
  amount?: Maybe<Scalars['Float']>;
  amountType?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** Discount create many input */
export type DiscountCreateManyInput = {
  active?: Maybe<Scalars['Boolean']>;
  amount?: Maybe<Scalars['Float']>;
  amountType?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** Discount delete input */
export type DiscountDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** DiscountFieldsPermissions create input */
export type DiscountFieldsPermissions = {
  active?: Maybe<Scalars['Boolean']>;
  amount?: Maybe<Scalars['Boolean']>;
  amountType?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['Boolean']>;
  description?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type DiscountFilter = {
  AND?: Maybe<Array<DiscountFilter>>;
  OR?: Maybe<Array<DiscountFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  active?: Maybe<BoolPredicate>;
  amount?: Maybe<FloatPredicate>;
  amountType?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  description?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  name?: Maybe<StringPredicate>;
  type?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type DiscountGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: DiscountGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type DiscountGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  active?: Maybe<Array<GroupByField>>;
  amount?: Maybe<Array<GroupByField>>;
  amountType?: Maybe<Array<GroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  description?: Maybe<Array<GroupByField>>;
  id?: Maybe<Array<GroupByField>>;
  name?: Maybe<Array<GroupByField>>;
  type?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

export type DiscountKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** DiscountListResponse output */
export type DiscountListResponse = {
  __typename?: 'DiscountListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<Discount>;
};

/** DiscountManyResponse output */
export type DiscountManyResponse = {
  __typename?: 'DiscountManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<Discount>;
};

/** No longer supported. Use `sort` instead. */
export enum DiscountOrderBy {
  ActiveAsc = 'active_ASC',
  ActiveDesc = 'active_DESC',
  AmountTypeAsc = 'amountType_ASC',
  AmountTypeDesc = 'amountType_DESC',
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** Discount subscription payload */
export type DiscountPayload = {
  __typename?: 'DiscountPayload';
  mutation: MutationType;
  node: Maybe<Discount>;
  previousValues: Maybe<Discount>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type DiscountSort = {
  active?: Maybe<SortOrder>;
  amount?: Maybe<SortOrder>;
  amountType?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  description?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  type?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
};

/** Discount subscription filter */
export type DiscountSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<DiscountFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** Discount update input */
export type DiscountUpdateByFilterInput = {
  active?: Maybe<Array<Maybe<UpdateByFilterBooleanSwitchInput>>>;
  amount?: Maybe<Array<Maybe<UpdateByFilterFloatInput>>>;
  amountType?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  description?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  name?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  type?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** Discount update input */
export type DiscountUpdateInput = {
  active?: Maybe<Scalars['Boolean']>;
  amount?: Maybe<Scalars['Float']>;
  amountType?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type Discount_PermissionFilter = {
  AND?: Maybe<Array<Discount_PermissionFilter>>;
  OR?: Maybe<Array<Discount_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  active?: Maybe<BoolPredicate>;
  amount?: Maybe<FloatPredicate>;
  amountType?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  description?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  name?: Maybe<StringPredicate>;
  type?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

/** RankIssued create input from displayName */
export type DisplayName_RankIssuedCreateInput = {
  displayName?: Maybe<RankIssuedDisplayNameRelationInput>;
  graduated?: Maybe<Scalars['Date']>;
  master?: Maybe<RankIssuedMasterRelationInput>;
  masterPhoto?: Maybe<RankIssuedMasterPhotoRelationInput>;
  rank?: Maybe<RankIssuedRankRelationInput>;
  school?: Maybe<RankIssuedSchoolRelationInput>;
  verified?: Maybe<Scalars['Boolean']>;
};

/** RankIssued update input from displayName */
export type DisplayName_RankIssuedUpdateInput = {
  data: RankIssuedUpdateInput;
  filter?: Maybe<RankIssuedKeyFilter>;
};

export type EmailTemplate = {
  __typename?: 'EmailTemplate';
  _description: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  language: Maybe<Scalars['String']>;
  rawText: Maybe<Scalars['String']>;
  sender: Maybe<Scalars['String']>;
  subject: Maybe<Scalars['String']>;
  templateKey: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

/** EmailTemplate create input */
export type EmailTemplateCreateInput = {
  language?: Maybe<Scalars['String']>;
  rawText?: Maybe<Scalars['String']>;
  sender?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  templateKey?: Maybe<Scalars['String']>;
};

/** EmailTemplate create many input */
export type EmailTemplateCreateManyInput = {
  language?: Maybe<Scalars['String']>;
  rawText?: Maybe<Scalars['String']>;
  sender?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  templateKey?: Maybe<Scalars['String']>;
};

/** EmailTemplate delete input */
export type EmailTemplateDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** EmailTemplateFieldsPermissions create input */
export type EmailTemplateFieldsPermissions = {
  createdAt?: Maybe<Scalars['Boolean']>;
  language?: Maybe<Scalars['Boolean']>;
  rawText?: Maybe<Scalars['Boolean']>;
  sender?: Maybe<Scalars['Boolean']>;
  subject?: Maybe<Scalars['Boolean']>;
  templateKey?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type EmailTemplateFilter = {
  AND?: Maybe<Array<EmailTemplateFilter>>;
  OR?: Maybe<Array<EmailTemplateFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  language?: Maybe<StringPredicate>;
  rawText?: Maybe<StringPredicate>;
  sender?: Maybe<StringPredicate>;
  subject?: Maybe<StringPredicate>;
  templateKey?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type EmailTemplateGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: EmailTemplateGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type EmailTemplateGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  id?: Maybe<Array<GroupByField>>;
  language?: Maybe<Array<GroupByField>>;
  rawText?: Maybe<Array<GroupByField>>;
  sender?: Maybe<Array<GroupByField>>;
  subject?: Maybe<Array<GroupByField>>;
  templateKey?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

export type EmailTemplateKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** EmailTemplateListResponse output */
export type EmailTemplateListResponse = {
  __typename?: 'EmailTemplateListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<EmailTemplate>;
};

/** EmailTemplateManyResponse output */
export type EmailTemplateManyResponse = {
  __typename?: 'EmailTemplateManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<EmailTemplate>;
};

/** No longer supported. Use `sort` instead. */
export enum EmailTemplateOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LanguageAsc = 'language_ASC',
  LanguageDesc = 'language_DESC',
  RawTextAsc = 'rawText_ASC',
  RawTextDesc = 'rawText_DESC',
  SenderAsc = 'sender_ASC',
  SenderDesc = 'sender_DESC',
  SubjectAsc = 'subject_ASC',
  SubjectDesc = 'subject_DESC',
  TemplateKeyAsc = 'templateKey_ASC',
  TemplateKeyDesc = 'templateKey_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** EmailTemplate subscription payload */
export type EmailTemplatePayload = {
  __typename?: 'EmailTemplatePayload';
  mutation: MutationType;
  node: Maybe<EmailTemplate>;
  previousValues: Maybe<EmailTemplate>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type EmailTemplateSort = {
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  language?: Maybe<SortOrder>;
  rawText?: Maybe<SortOrder>;
  sender?: Maybe<SortOrder>;
  subject?: Maybe<SortOrder>;
  templateKey?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
};

/** EmailTemplate subscription filter */
export type EmailTemplateSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<EmailTemplateFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** EmailTemplate update input */
export type EmailTemplateUpdateByFilterInput = {
  language?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  rawText?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  sender?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  subject?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  templateKey?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** EmailTemplate update input */
export type EmailTemplateUpdateInput = {
  id?: Maybe<Scalars['ID']>;
  language?: Maybe<Scalars['String']>;
  rawText?: Maybe<Scalars['String']>;
  sender?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  templateKey?: Maybe<Scalars['String']>;
};

export type EmailTemplate_PermissionFilter = {
  AND?: Maybe<Array<EmailTemplate_PermissionFilter>>;
  OR?: Maybe<Array<EmailTemplate_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  language?: Maybe<StringPredicate>;
  rawText?: Maybe<StringPredicate>;
  sender?: Maybe<StringPredicate>;
  subject?: Maybe<StringPredicate>;
  templateKey?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type EnvironmentBackupItem = {
  __typename?: 'EnvironmentBackupItem';
  name: Scalars['String'];
  size: Scalars['Float'];
};

export type EnvironmentItem = {
  __typename?: 'EnvironmentItem';
  id: Scalars['ID'];
  name: Scalars['String'];
};

/** EnvironmentSetupInput */
export type EnvironmentSetupInput = {
  deleteLock?: Maybe<Scalars['Boolean']>;
};

export type EnvironmentVariable = {
  __typename?: 'EnvironmentVariable';
  _description: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
  value: Maybe<Scalars['String']>;
};

/** EnvironmentVariables create input */
export type EnvironmentVariableCreateInput = {
  name: Scalars['String'];
  value: Scalars['String'];
};

/** EnvironmentVariables create many input */
export type EnvironmentVariableCreateManyInput = {
  name: Scalars['String'];
  value: Scalars['String'];
};

/** EnvironmentVariables delete input */
export type EnvironmentVariableDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

export type EnvironmentVariableFilter = {
  AND?: Maybe<Array<EnvironmentVariableFilter>>;
  OR?: Maybe<Array<EnvironmentVariableFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  name?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
  value?: Maybe<StringPredicate>;
};

export type EnvironmentVariableGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: EnvironmentVariableGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type EnvironmentVariableGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  id?: Maybe<Array<GroupByField>>;
  name?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
  value?: Maybe<Array<GroupByField>>;
};

export type EnvironmentVariableKeyFilter = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
};

/** EnvironmentVariableListResponse output */
export type EnvironmentVariableListResponse = {
  __typename?: 'EnvironmentVariableListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<EnvironmentVariable>;
};

/** EnvironmentVariableManyResponse output */
export type EnvironmentVariableManyResponse = {
  __typename?: 'EnvironmentVariableManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<EnvironmentVariable>;
};

/** No longer supported. Use `sort` instead. */
export enum EnvironmentVariableOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  ValueAsc = 'value_ASC',
  ValueDesc = 'value_DESC',
}

/** EnvironmentVariables subscription payload */
export type EnvironmentVariablePayload = {
  __typename?: 'EnvironmentVariablePayload';
  mutation: MutationType;
  node: Maybe<EnvironmentVariable>;
  previousValues: Maybe<EnvironmentVariable>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type EnvironmentVariableSort = {
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  value?: Maybe<SortOrder>;
};

/** EnvironmentVariables subscription filter */
export type EnvironmentVariableSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<EnvironmentVariableFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** EnvironmentVariables update input */
export type EnvironmentVariableUpdateByFilterInput = {
  name?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  value?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** EnvironmentVariables update input */
export type EnvironmentVariableUpdateInput = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** Facebook connection params */
export type FacebookOptions = {
  __typename?: 'FacebookOptions';
  app_id: Scalars['String'];
  app_secret: Scalars['String'];
  enabled: Scalars['Boolean'];
};

/** Facebook connection params input */
export type FacebookOptionsInput = {
  app_id: Scalars['String'];
  app_secret: Scalars['String'];
  enabled: Scalars['Boolean'];
};

/** Field Data Features */
export type FieldDataFeatures = {
  __typename?: 'FieldDataFeatures';
  create: Scalars['Boolean'];
  sort: Scalars['Boolean'];
  update: Scalars['Boolean'];
};

/** Field Schema Features */
export type FieldSchemaFeatures = {
  __typename?: 'FieldSchemaFeatures';
  delete: Scalars['Boolean'];
  update: Scalars['Boolean'];
};

/** Field types */
export enum FieldType {
  Date = 'DATE',
  File = 'FILE',
  Geo = 'GEO',
  Id = 'ID',
  Json = 'JSON',
  MissingRelation = 'MISSING_RELATION',
  Number = 'NUMBER',
  OneWayRelation = 'ONE_WAY_RELATION',
  Relation = 'RELATION',
  Smart = 'SMART',
  Switch = 'SWITCH',
  Text = 'TEXT',
  Uuid = 'UUID',
}

/** Field Type Attributes */
export type FieldTypeAttributes =
  | DateFieldTypeAttributes
  | FileFieldTypeAttributes
  | GeoFieldTypeAttributes
  | MissingRelationFieldTypeAttributes
  | NumberFieldTypeAttributes
  | SmartFieldTypeAttributes
  | SwitchFieldTypeAttributes
  | TextFieldTypeAttributes
  | UuidFieldTypeAttributes;

/** Field Type Attributes Input */
export type FieldTypeAttributesInput = {
  autoIncrement?: Maybe<Scalars['Boolean']>;
  currency?: Maybe<Scalars['String']>;
  expiration?: Maybe<Scalars['Int']>;
  fieldSize?: Maybe<Scalars['Int']>;
  format?: Maybe<Scalars['String']>;
  isBigInt?: Maybe<Scalars['Boolean']>;
  listOptions?: Maybe<Array<Scalars['String']>>;
  maxSize?: Maybe<Scalars['Int']>;
  maxValue?: Maybe<Scalars['Float']>;
  minValue?: Maybe<Scalars['Float']>;
  precision?: Maybe<Scalars['Int']>;
  srid?: Maybe<Scalars['Int']>;
  typeRestrictions?: Maybe<Array<Scalars['String']>>;
};

export type File = {
  __typename?: 'File';
  _description: Maybe<Scalars['String']>;
  brand_logo: Maybe<BrandListResponse>;
  competition_cover: Maybe<CompetitionListResponse>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  downloadStorageUrl: Maybe<Scalars['String']>;
  downloadUrl: Maybe<Scalars['String']>;
  fields: Maybe<Scalars['JSON']>;
  fileId: Maybe<Scalars['String']>;
  filename: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  martialArts_attachments: Maybe<MartialArtListResponse>;
  meta: Maybe<Scalars['JSON']>;
  mods: Maybe<Scalars['JSON']>;
  planCategory_attachments: Maybe<PlanCategoryListResponse>;
  previewUrl: Maybe<Scalars['String']>;
  profiles_photo: Maybe<ProfileListResponse>;
  profiles_rankSmall: Maybe<ProfileListResponse>;
  profiles_rankw80h8: Maybe<ProfileListResponse>;
  profiles_rankw375h24: Maybe<ProfileListResponse>;
  provider: Maybe<Scalars['String']>;
  public: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto: Maybe<RankIssuedListResponse>;
  rank_rankImageW64H8: Maybe<RankListResponse>;
  rank_rankImageW80H8: Maybe<RankListResponse>;
  rank_rankImageW375H24: Maybe<RankListResponse>;
  schools_schoolLogo: Maybe<SchoolListResponse>;
  settings_landingPageImage: Maybe<SettingListResponse>;
  settings_menuBarLogo: Maybe<SettingListResponse>;
  shareUrl: Maybe<Scalars['String']>;
  teamMembers_avatar: Maybe<TeamMemberListResponse>;
  teams_teamLogo: Maybe<TeamListResponse>;
  updatedAt: Maybe<Scalars['DateTime']>;
  uploadUrl: Maybe<Scalars['String']>;
  uploaded: Maybe<Scalars['Boolean']>;
  users_avatar: Maybe<UserListResponse>;
  video_preview: Maybe<VideoListResponse>;
  video_thumbnail: Maybe<VideoListResponse>;
  video_video: Maybe<VideoListResponse>;
};

export type FileBrand_LogoArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<BrandFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<BrandGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<BrandOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<BrandSort>>;
};

export type FileCompetition_CoverArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<CompetitionFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<CompetitionGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<CompetitionOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<CompetitionSort>>;
};

export type FileMartialArts_AttachmentsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<MartialArtFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<MartialArtGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<MartialArtOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<MartialArtSort>>;
};

export type FilePlanCategory_AttachmentsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<PlanCategoryFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<PlanCategoryGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<PlanCategoryOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<PlanCategorySort>>;
};

export type FileProfiles_PhotoArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ProfileFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ProfileGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ProfileOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ProfileSort>>;
};

export type FileProfiles_RankSmallArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ProfileFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ProfileGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ProfileOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ProfileSort>>;
};

export type FileProfiles_Rankw80h8Args = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ProfileFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ProfileGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ProfileOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ProfileSort>>;
};

export type FileProfiles_Rankw375h24Args = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ProfileFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ProfileGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ProfileOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ProfileSort>>;
};

export type FileRankIssued_MasterPhotoArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<RankIssuedFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<RankIssuedGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<RankIssuedOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<RankIssuedSort>>;
};

export type FileRank_RankImageW64H8Args = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<RankFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<RankGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<RankOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<RankSort>>;
};

export type FileRank_RankImageW80H8Args = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<RankFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<RankGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<RankOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<RankSort>>;
};

export type FileRank_RankImageW375H24Args = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<RankFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<RankGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<RankOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<RankSort>>;
};

export type FileSchools_SchoolLogoArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<SchoolFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<SchoolGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<SchoolOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<SchoolSort>>;
};

export type FileSettings_LandingPageImageArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<SettingFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<SettingGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<SettingOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<SettingSort>>;
};

export type FileSettings_MenuBarLogoArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<SettingFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<SettingGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<SettingOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<SettingSort>>;
};

export type FileTeamMembers_AvatarArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<TeamMemberFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<TeamMemberGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<TeamMemberOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<TeamMemberSort>>;
};

export type FileTeams_TeamLogoArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<TeamFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<TeamGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<TeamOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<TeamSort>>;
};

export type FileUsers_AvatarArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<UserFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<UserGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<UserOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<UserSort>>;
};

export type FileVideo_PreviewArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<VideoFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<VideoGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<VideoOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<VideoSort>>;
};

export type FileVideo_ThumbnailArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<VideoFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<VideoGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<VideoOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<VideoSort>>;
};

export type FileVideo_VideoArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<VideoFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<VideoGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<VideoOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<VideoSort>>;
};

/** Files create input */
export type FileCreateInput = {
  brand_logo?: Maybe<FilesBrand_LogoRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8RelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24RelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8RelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8RelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24RelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailRelationInput>;
  video_video?: Maybe<FilesVideo_VideoRelationInput>;
};

/** Files create many input */
export type FileCreateManyInput = {
  brand_logo?: Maybe<FilesBrand_LogoManyRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverManyRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsManyRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsManyRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoManyRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallManyRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8ManyRelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24ManyRelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoManyRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8ManyRelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8ManyRelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24ManyRelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoManyRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarManyRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoManyRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarManyRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewManyRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailManyRelationInput>;
  video_video?: Maybe<FilesVideo_VideoManyRelationInput>;
};

/** Files delete input */
export type FileDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** File Field Attributes */
export type FileFieldTypeAttributes = {
  __typename?: 'FileFieldTypeAttributes';
  expiration: Maybe<Scalars['Int']>;
  format: Scalars['String'];
  maxSize: Maybe<Scalars['Int']>;
  /** @deprecated Field is deprecated */
  showTitle: Maybe<Scalars['Boolean']>;
  /** @deprecated Field is deprecated */
  showUrl: Maybe<Scalars['Boolean']>;
  typeRestrictions: Maybe<Array<Scalars['String']>>;
};

/** FileFieldsPermissions create input */
export type FileFieldsPermissions = {
  createdAt?: Maybe<Scalars['Boolean']>;
  downloadUrl?: Maybe<Scalars['Boolean']>;
  fields?: Maybe<Scalars['Boolean']>;
  fileId?: Maybe<Scalars['Boolean']>;
  filename?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['Boolean']>;
  mods?: Maybe<Scalars['Boolean']>;
  provider?: Maybe<Scalars['Boolean']>;
  public?: Maybe<Scalars['Boolean']>;
  shareUrl?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
  uploadUrl?: Maybe<Scalars['Boolean']>;
  uploaded?: Maybe<Scalars['Boolean']>;
};

export type FileFilter = {
  AND?: Maybe<Array<FileFilter>>;
  OR?: Maybe<Array<FileFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  brand_logo?: Maybe<BrandRelationFilter>;
  competition_cover?: Maybe<CompetitionRelationFilter>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  downloadUrl?: Maybe<StringPredicate>;
  fileId?: Maybe<StringPredicate>;
  filename?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  martialArts_attachments?: Maybe<MartialArtRelationFilter>;
  planCategory_attachments?: Maybe<PlanCategoryRelationFilter>;
  profiles_photo?: Maybe<ProfileRelationFilter>;
  profiles_rankSmall?: Maybe<ProfileRelationFilter>;
  profiles_rankw80h8?: Maybe<ProfileRelationFilter>;
  profiles_rankw375h24?: Maybe<ProfileRelationFilter>;
  provider?: Maybe<StringPredicate>;
  public?: Maybe<BoolPredicate>;
  rankIssued_masterPhoto?: Maybe<RankIssuedRelationFilter>;
  rank_rankImageW64H8?: Maybe<RankRelationFilter>;
  rank_rankImageW80H8?: Maybe<RankRelationFilter>;
  rank_rankImageW375H24?: Maybe<RankRelationFilter>;
  schools_schoolLogo?: Maybe<SchoolRelationFilter>;
  settings_landingPageImage?: Maybe<SettingRelationFilter>;
  settings_menuBarLogo?: Maybe<SettingRelationFilter>;
  shareUrl?: Maybe<StringPredicate>;
  teamMembers_avatar?: Maybe<TeamMemberRelationFilter>;
  teams_teamLogo?: Maybe<TeamRelationFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
  uploadUrl?: Maybe<StringPredicate>;
  uploaded?: Maybe<BoolPredicate>;
  users_avatar?: Maybe<UserRelationFilter>;
  video_preview?: Maybe<VideoRelationFilter>;
  video_thumbnail?: Maybe<VideoRelationFilter>;
  video_video?: Maybe<VideoRelationFilter>;
};

export type FileGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: FileGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type FileGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  brand_logo?: Maybe<BrandGroupByQuery>;
  competition_cover?: Maybe<CompetitionGroupByQuery>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  downloadUrl?: Maybe<Array<GroupByField>>;
  fields?: Maybe<Array<GroupByField>>;
  fileId?: Maybe<Array<GroupByField>>;
  filename?: Maybe<Array<GroupByField>>;
  id?: Maybe<Array<GroupByField>>;
  martialArts_attachments?: Maybe<MartialArtGroupByQuery>;
  meta?: Maybe<Array<GroupByField>>;
  mods?: Maybe<Array<GroupByField>>;
  planCategory_attachments?: Maybe<PlanCategoryGroupByQuery>;
  profiles_photo?: Maybe<ProfileGroupByQuery>;
  profiles_rankSmall?: Maybe<ProfileGroupByQuery>;
  profiles_rankw80h8?: Maybe<ProfileGroupByQuery>;
  profiles_rankw375h24?: Maybe<ProfileGroupByQuery>;
  provider?: Maybe<Array<GroupByField>>;
  public?: Maybe<Array<GroupByField>>;
  rankIssued_masterPhoto?: Maybe<RankIssuedGroupByQuery>;
  rank_rankImageW64H8?: Maybe<RankGroupByQuery>;
  rank_rankImageW80H8?: Maybe<RankGroupByQuery>;
  rank_rankImageW375H24?: Maybe<RankGroupByQuery>;
  schools_schoolLogo?: Maybe<SchoolGroupByQuery>;
  settings_landingPageImage?: Maybe<SettingGroupByQuery>;
  settings_menuBarLogo?: Maybe<SettingGroupByQuery>;
  shareUrl?: Maybe<Array<GroupByField>>;
  teamMembers_avatar?: Maybe<TeamMemberGroupByQuery>;
  teams_teamLogo?: Maybe<TeamGroupByQuery>;
  updatedAt?: Maybe<Array<GroupByField>>;
  uploadUrl?: Maybe<Array<GroupByField>>;
  uploaded?: Maybe<Array<GroupByField>>;
  users_avatar?: Maybe<UserGroupByQuery>;
  video_preview?: Maybe<VideoGroupByQuery>;
  video_thumbnail?: Maybe<VideoGroupByQuery>;
  video_video?: Maybe<VideoGroupByQuery>;
};

export type FileKeyFilter = {
  fileId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
};

/** FileListResponse output */
export type FileListResponse = {
  __typename?: 'FileListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<File>;
};

/** FileManyResponse output */
export type FileManyResponse = {
  __typename?: 'FileManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<File>;
};

/** No longer supported. Use `sort` instead. */
export enum FileOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DownloadUrlAsc = 'downloadUrl_ASC',
  DownloadUrlDesc = 'downloadUrl_DESC',
  FieldsAsc = 'fields_ASC',
  FieldsDesc = 'fields_DESC',
  FileIdAsc = 'fileId_ASC',
  FileIdDesc = 'fileId_DESC',
  FilenameAsc = 'filename_ASC',
  FilenameDesc = 'filename_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  MetaAsc = 'meta_ASC',
  MetaDesc = 'meta_DESC',
  ModsAsc = 'mods_ASC',
  ModsDesc = 'mods_DESC',
  ProviderAsc = 'provider_ASC',
  ProviderDesc = 'provider_DESC',
  PublicAsc = 'public_ASC',
  PublicDesc = 'public_DESC',
  ShareUrlAsc = 'shareUrl_ASC',
  ShareUrlDesc = 'shareUrl_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  UploadUrlAsc = 'uploadUrl_ASC',
  UploadUrlDesc = 'uploadUrl_DESC',
  UploadedAsc = 'uploaded_ASC',
  UploadedDesc = 'uploaded_DESC',
}

/** Files subscription payload */
export type FilePayload = {
  __typename?: 'FilePayload';
  mutation: MutationType;
  node: Maybe<File>;
  previousValues: Maybe<File>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type FileSort = {
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  downloadUrl?: Maybe<SortOrder>;
  fileId?: Maybe<SortOrder>;
  filename?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  provider?: Maybe<SortOrder>;
  public?: Maybe<SortOrder>;
  shareUrl?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  uploadUrl?: Maybe<SortOrder>;
  uploaded?: Maybe<SortOrder>;
};

/** Files subscription filter */
export type FileSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<FileFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** File Type Format Enum */
export enum FileTypeFormatEnum {
  File = 'FILE',
  Image = 'IMAGE',
}

/** Files update input */
export type FileUpdateByFilterInput = {
  downloadUrl?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  fields?: Maybe<Array<Maybe<UpdateByFilterJsonInput>>>;
  filename?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  meta?: Maybe<Array<Maybe<UpdateByFilterJsonInput>>>;
  mods?: Maybe<Array<Maybe<UpdateByFilterJsonInput>>>;
  provider?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  public?: Maybe<Array<Maybe<UpdateByFilterBooleanSwitchInput>>>;
  shareUrl?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  uploadUrl?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  uploaded?: Maybe<Array<Maybe<UpdateByFilterBooleanSwitchInput>>>;
};

/** Files update input */
export type FileUpdateInput = {
  brand_logo?: Maybe<FilesBrand_LogoUpdateRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverUpdateRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsUpdateRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsUpdateRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoUpdateRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallUpdateRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8UpdateRelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24UpdateRelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoUpdateRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8UpdateRelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8UpdateRelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24UpdateRelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoUpdateRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarUpdateRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoUpdateRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarUpdateRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewUpdateRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailUpdateRelationInput>;
  video_video?: Maybe<FilesVideo_VideoUpdateRelationInput>;
};

export type FileUploadInfoResponse = {
  __typename?: 'FileUploadInfoResponse';
  apiKey: Scalars['String'];
  path: Scalars['String'];
  policy: Scalars['String'];
  signature: Scalars['String'];
};

export type File_PermissionFilter = {
  AND?: Maybe<Array<File_PermissionFilter>>;
  OR?: Maybe<Array<File_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  brand_logo?: Maybe<Brand_PermissionRelationFilter>;
  competition_cover?: Maybe<Competition_PermissionRelationFilter>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  downloadUrl?: Maybe<StringPredicate>;
  fileId?: Maybe<StringPredicate>;
  filename?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  martialArts_attachments?: Maybe<MartialArt_PermissionRelationFilter>;
  planCategory_attachments?: Maybe<PlanCategory_PermissionRelationFilter>;
  profiles_photo?: Maybe<Profile_PermissionRelationFilter>;
  profiles_rankSmall?: Maybe<Profile_PermissionRelationFilter>;
  profiles_rankw80h8?: Maybe<Profile_PermissionRelationFilter>;
  profiles_rankw375h24?: Maybe<Profile_PermissionRelationFilter>;
  provider?: Maybe<StringPredicate>;
  public?: Maybe<BoolPredicate>;
  rankIssued_masterPhoto?: Maybe<RankIssued_PermissionRelationFilter>;
  rank_rankImageW64H8?: Maybe<Rank_PermissionRelationFilter>;
  rank_rankImageW80H8?: Maybe<Rank_PermissionRelationFilter>;
  rank_rankImageW375H24?: Maybe<Rank_PermissionRelationFilter>;
  schools_schoolLogo?: Maybe<School_PermissionRelationFilter>;
  settings_landingPageImage?: Maybe<Setting_PermissionRelationFilter>;
  settings_menuBarLogo?: Maybe<Setting_PermissionRelationFilter>;
  shareUrl?: Maybe<StringPredicate>;
  teamMembers_avatar?: Maybe<TeamMember_PermissionRelationFilter>;
  teams_teamLogo?: Maybe<Team_PermissionRelationFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
  uploadUrl?: Maybe<StringPredicate>;
  uploaded?: Maybe<BoolPredicate>;
  users_avatar?: Maybe<User_PermissionRelationFilter>;
  video_preview?: Maybe<Video_PermissionRelationFilter>;
  video_thumbnail?: Maybe<Video_PermissionRelationFilter>;
  video_video?: Maybe<Video_PermissionRelationFilter>;
};

/** Files relation input */
export type FilesBrand_LogoManyRelationInput = {
  connect?: Maybe<Array<BrandKeyFilter>>;
};

/** Files relation input */
export type FilesBrand_LogoRelationInput = {
  connect?: Maybe<Array<BrandKeyFilter>>;
  create?: Maybe<Array<Maybe<Logo_BrandCreateInput>>>;
};

/** Files relation input */
export type FilesBrand_LogoUpdateRelationInput = {
  connect?: Maybe<Array<BrandKeyFilter>>;
  create?: Maybe<Array<Maybe<Logo_BrandCreateInput>>>;
  disconnect?: Maybe<Array<BrandKeyFilter>>;
  reconnect?: Maybe<Array<BrandKeyFilter>>;
  update?: Maybe<Array<Maybe<Logo_BrandUpdateInput>>>;
};

/** Files relation input */
export type FilesCompetition_CoverManyRelationInput = {
  connect?: Maybe<Array<CompetitionKeyFilter>>;
};

/** Files relation input */
export type FilesCompetition_CoverRelationInput = {
  connect?: Maybe<Array<CompetitionKeyFilter>>;
  create?: Maybe<Array<Maybe<Cover_CompetitionCreateInput>>>;
};

/** Files relation input */
export type FilesCompetition_CoverUpdateRelationInput = {
  connect?: Maybe<Array<CompetitionKeyFilter>>;
  create?: Maybe<Array<Maybe<Cover_CompetitionCreateInput>>>;
  disconnect?: Maybe<Array<CompetitionKeyFilter>>;
  reconnect?: Maybe<Array<CompetitionKeyFilter>>;
  update?: Maybe<Array<Maybe<Cover_CompetitionUpdateInput>>>;
};

/** Files relation input */
export type FilesMartialArts_AttachmentsManyRelationInput = {
  connect?: Maybe<Array<MartialArtKeyFilter>>;
};

/** Files relation input */
export type FilesMartialArts_AttachmentsRelationInput = {
  connect?: Maybe<Array<MartialArtKeyFilter>>;
  create?: Maybe<Array<Maybe<Attachments_MartialArtCreateInput>>>;
};

/** Files relation input */
export type FilesMartialArts_AttachmentsUpdateRelationInput = {
  connect?: Maybe<Array<MartialArtKeyFilter>>;
  create?: Maybe<Array<Maybe<Attachments_MartialArtCreateInput>>>;
  disconnect?: Maybe<Array<MartialArtKeyFilter>>;
  reconnect?: Maybe<Array<MartialArtKeyFilter>>;
  update?: Maybe<Array<Maybe<Attachments_MartialArtUpdateInput>>>;
};

/** Files relation input */
export type FilesPlanCategory_AttachmentsManyRelationInput = {
  connect?: Maybe<Array<PlanCategoryKeyFilter>>;
};

/** Files relation input */
export type FilesPlanCategory_AttachmentsRelationInput = {
  connect?: Maybe<Array<PlanCategoryKeyFilter>>;
  create?: Maybe<Array<Maybe<Attachments_PlanCategoryCreateInput>>>;
};

/** Files relation input */
export type FilesPlanCategory_AttachmentsUpdateRelationInput = {
  connect?: Maybe<Array<PlanCategoryKeyFilter>>;
  create?: Maybe<Array<Maybe<Attachments_PlanCategoryCreateInput>>>;
  disconnect?: Maybe<Array<PlanCategoryKeyFilter>>;
  reconnect?: Maybe<Array<PlanCategoryKeyFilter>>;
  update?: Maybe<Array<Maybe<Attachments_PlanCategoryUpdateInput>>>;
};

/** Files relation input */
export type FilesProfiles_PhotoManyRelationInput = {
  connect?: Maybe<Array<ProfileKeyFilter>>;
};

/** Files relation input */
export type FilesProfiles_PhotoRelationInput = {
  connect?: Maybe<Array<ProfileKeyFilter>>;
  create?: Maybe<Array<Maybe<Photo_ProfileCreateInput>>>;
};

/** Files relation input */
export type FilesProfiles_PhotoUpdateRelationInput = {
  connect?: Maybe<Array<ProfileKeyFilter>>;
  create?: Maybe<Array<Maybe<Photo_ProfileCreateInput>>>;
  disconnect?: Maybe<Array<ProfileKeyFilter>>;
  reconnect?: Maybe<Array<ProfileKeyFilter>>;
  update?: Maybe<Array<Maybe<Photo_ProfileUpdateInput>>>;
};

/** Files relation input */
export type FilesProfiles_RankSmallManyRelationInput = {
  connect?: Maybe<Array<ProfileKeyFilter>>;
};

/** Files relation input */
export type FilesProfiles_RankSmallRelationInput = {
  connect?: Maybe<Array<ProfileKeyFilter>>;
  create?: Maybe<Array<Maybe<RankSmall_ProfileCreateInput>>>;
};

/** Files relation input */
export type FilesProfiles_RankSmallUpdateRelationInput = {
  connect?: Maybe<Array<ProfileKeyFilter>>;
  create?: Maybe<Array<Maybe<RankSmall_ProfileCreateInput>>>;
  disconnect?: Maybe<Array<ProfileKeyFilter>>;
  reconnect?: Maybe<Array<ProfileKeyFilter>>;
  update?: Maybe<Array<Maybe<RankSmall_ProfileUpdateInput>>>;
};

/** Files relation input */
export type FilesProfiles_Rankw80h8ManyRelationInput = {
  connect?: Maybe<Array<ProfileKeyFilter>>;
};

/** Files relation input */
export type FilesProfiles_Rankw80h8RelationInput = {
  connect?: Maybe<Array<ProfileKeyFilter>>;
  create?: Maybe<Array<Maybe<Rankw80h8_ProfileCreateInput>>>;
};

/** Files relation input */
export type FilesProfiles_Rankw80h8UpdateRelationInput = {
  connect?: Maybe<Array<ProfileKeyFilter>>;
  create?: Maybe<Array<Maybe<Rankw80h8_ProfileCreateInput>>>;
  disconnect?: Maybe<Array<ProfileKeyFilter>>;
  reconnect?: Maybe<Array<ProfileKeyFilter>>;
  update?: Maybe<Array<Maybe<Rankw80h8_ProfileUpdateInput>>>;
};

/** Files relation input */
export type FilesProfiles_Rankw375h24ManyRelationInput = {
  connect?: Maybe<Array<ProfileKeyFilter>>;
};

/** Files relation input */
export type FilesProfiles_Rankw375h24RelationInput = {
  connect?: Maybe<Array<ProfileKeyFilter>>;
  create?: Maybe<Array<Maybe<Rankw375h24_ProfileCreateInput>>>;
};

/** Files relation input */
export type FilesProfiles_Rankw375h24UpdateRelationInput = {
  connect?: Maybe<Array<ProfileKeyFilter>>;
  create?: Maybe<Array<Maybe<Rankw375h24_ProfileCreateInput>>>;
  disconnect?: Maybe<Array<ProfileKeyFilter>>;
  reconnect?: Maybe<Array<ProfileKeyFilter>>;
  update?: Maybe<Array<Maybe<Rankw375h24_ProfileUpdateInput>>>;
};

/** Files relation input */
export type FilesRankIssued_MasterPhotoManyRelationInput = {
  connect?: Maybe<Array<RankIssuedKeyFilter>>;
};

/** Files relation input */
export type FilesRankIssued_MasterPhotoRelationInput = {
  connect?: Maybe<Array<RankIssuedKeyFilter>>;
  create?: Maybe<Array<Maybe<MasterPhoto_RankIssuedCreateInput>>>;
};

/** Files relation input */
export type FilesRankIssued_MasterPhotoUpdateRelationInput = {
  connect?: Maybe<Array<RankIssuedKeyFilter>>;
  create?: Maybe<Array<Maybe<MasterPhoto_RankIssuedCreateInput>>>;
  disconnect?: Maybe<Array<RankIssuedKeyFilter>>;
  reconnect?: Maybe<Array<RankIssuedKeyFilter>>;
  update?: Maybe<Array<Maybe<MasterPhoto_RankIssuedUpdateInput>>>;
};

/** Files relation input */
export type FilesRank_RankImageW64H8ManyRelationInput = {
  connect?: Maybe<Array<RankKeyFilter>>;
};

/** Files relation input */
export type FilesRank_RankImageW64H8RelationInput = {
  connect?: Maybe<Array<RankKeyFilter>>;
  create?: Maybe<Array<Maybe<RankImageW64H8_RankCreateInput>>>;
};

/** Files relation input */
export type FilesRank_RankImageW64H8UpdateRelationInput = {
  connect?: Maybe<Array<RankKeyFilter>>;
  create?: Maybe<Array<Maybe<RankImageW64H8_RankCreateInput>>>;
  disconnect?: Maybe<Array<RankKeyFilter>>;
  reconnect?: Maybe<Array<RankKeyFilter>>;
  update?: Maybe<Array<Maybe<RankImageW64H8_RankUpdateInput>>>;
};

/** Files relation input */
export type FilesRank_RankImageW80H8ManyRelationInput = {
  connect?: Maybe<Array<RankKeyFilter>>;
};

/** Files relation input */
export type FilesRank_RankImageW80H8RelationInput = {
  connect?: Maybe<Array<RankKeyFilter>>;
  create?: Maybe<Array<Maybe<RankImageW80H8_RankCreateInput>>>;
};

/** Files relation input */
export type FilesRank_RankImageW80H8UpdateRelationInput = {
  connect?: Maybe<Array<RankKeyFilter>>;
  create?: Maybe<Array<Maybe<RankImageW80H8_RankCreateInput>>>;
  disconnect?: Maybe<Array<RankKeyFilter>>;
  reconnect?: Maybe<Array<RankKeyFilter>>;
  update?: Maybe<Array<Maybe<RankImageW80H8_RankUpdateInput>>>;
};

/** Files relation input */
export type FilesRank_RankImageW375H24ManyRelationInput = {
  connect?: Maybe<Array<RankKeyFilter>>;
};

/** Files relation input */
export type FilesRank_RankImageW375H24RelationInput = {
  connect?: Maybe<Array<RankKeyFilter>>;
  create?: Maybe<Array<Maybe<RankImageW375H24_RankCreateInput>>>;
};

/** Files relation input */
export type FilesRank_RankImageW375H24UpdateRelationInput = {
  connect?: Maybe<Array<RankKeyFilter>>;
  create?: Maybe<Array<Maybe<RankImageW375H24_RankCreateInput>>>;
  disconnect?: Maybe<Array<RankKeyFilter>>;
  reconnect?: Maybe<Array<RankKeyFilter>>;
  update?: Maybe<Array<Maybe<RankImageW375H24_RankUpdateInput>>>;
};

/** Files relation input */
export type FilesSchools_SchoolLogoManyRelationInput = {
  connect?: Maybe<Array<SchoolKeyFilter>>;
};

/** Files relation input */
export type FilesSchools_SchoolLogoRelationInput = {
  connect?: Maybe<Array<SchoolKeyFilter>>;
  create?: Maybe<Array<Maybe<SchoolLogo_SchoolCreateInput>>>;
};

/** Files relation input */
export type FilesSchools_SchoolLogoUpdateRelationInput = {
  connect?: Maybe<Array<SchoolKeyFilter>>;
  create?: Maybe<Array<Maybe<SchoolLogo_SchoolCreateInput>>>;
  disconnect?: Maybe<Array<SchoolKeyFilter>>;
  reconnect?: Maybe<Array<SchoolKeyFilter>>;
  update?: Maybe<Array<Maybe<SchoolLogo_SchoolUpdateInput>>>;
};

/** Files relation input */
export type FilesTeamMembers_AvatarManyRelationInput = {
  connect?: Maybe<Array<TeamMemberKeyFilter>>;
};

/** Files relation input */
export type FilesTeamMembers_AvatarRelationInput = {
  connect?: Maybe<Array<TeamMemberKeyFilter>>;
};

/** Files relation input */
export type FilesTeamMembers_AvatarUpdateRelationInput = {
  connect?: Maybe<Array<TeamMemberKeyFilter>>;
  disconnect?: Maybe<Array<TeamMemberKeyFilter>>;
  reconnect?: Maybe<Array<TeamMemberKeyFilter>>;
  update?: Maybe<Array<Maybe<Avatar_TeamMemberUpdateInput>>>;
};

/** Files relation input */
export type FilesTeams_TeamLogoManyRelationInput = {
  connect?: Maybe<Array<TeamKeyFilter>>;
};

/** Files relation input */
export type FilesTeams_TeamLogoRelationInput = {
  connect?: Maybe<Array<TeamKeyFilter>>;
  create?: Maybe<Array<Maybe<TeamLogo_TeamCreateInput>>>;
};

/** Files relation input */
export type FilesTeams_TeamLogoUpdateRelationInput = {
  connect?: Maybe<Array<TeamKeyFilter>>;
  create?: Maybe<Array<Maybe<TeamLogo_TeamCreateInput>>>;
  disconnect?: Maybe<Array<TeamKeyFilter>>;
  reconnect?: Maybe<Array<TeamKeyFilter>>;
  update?: Maybe<Array<Maybe<TeamLogo_TeamUpdateInput>>>;
};

/** Files relation input */
export type FilesUsers_AvatarManyRelationInput = {
  connect?: Maybe<Array<UserKeyFilter>>;
};

/** Files relation input */
export type FilesUsers_AvatarRelationInput = {
  connect?: Maybe<Array<UserKeyFilter>>;
  create?: Maybe<Array<Maybe<Avatar_UserCreateInput>>>;
};

/** Files relation input */
export type FilesUsers_AvatarUpdateRelationInput = {
  connect?: Maybe<Array<UserKeyFilter>>;
  create?: Maybe<Array<Maybe<Avatar_UserCreateInput>>>;
  disconnect?: Maybe<Array<UserKeyFilter>>;
  reconnect?: Maybe<Array<UserKeyFilter>>;
  update?: Maybe<Array<Maybe<Avatar_UserUpdateInput>>>;
};

/** Files relation input */
export type FilesVideo_PreviewManyRelationInput = {
  connect?: Maybe<Array<VideoKeyFilter>>;
};

/** Files relation input */
export type FilesVideo_PreviewRelationInput = {
  connect?: Maybe<Array<VideoKeyFilter>>;
  create?: Maybe<Array<Maybe<Preview_VideoCreateInput>>>;
};

/** Files relation input */
export type FilesVideo_PreviewUpdateRelationInput = {
  connect?: Maybe<Array<VideoKeyFilter>>;
  create?: Maybe<Array<Maybe<Preview_VideoCreateInput>>>;
  disconnect?: Maybe<Array<VideoKeyFilter>>;
  reconnect?: Maybe<Array<VideoKeyFilter>>;
  update?: Maybe<Array<Maybe<Preview_VideoUpdateInput>>>;
};

/** Files relation input */
export type FilesVideo_ThumbnailManyRelationInput = {
  connect?: Maybe<Array<VideoKeyFilter>>;
};

/** Files relation input */
export type FilesVideo_ThumbnailRelationInput = {
  connect?: Maybe<Array<VideoKeyFilter>>;
  create?: Maybe<Array<Maybe<Thumbnail_VideoCreateInput>>>;
};

/** Files relation input */
export type FilesVideo_ThumbnailUpdateRelationInput = {
  connect?: Maybe<Array<VideoKeyFilter>>;
  create?: Maybe<Array<Maybe<Thumbnail_VideoCreateInput>>>;
  disconnect?: Maybe<Array<VideoKeyFilter>>;
  reconnect?: Maybe<Array<VideoKeyFilter>>;
  update?: Maybe<Array<Maybe<Thumbnail_VideoUpdateInput>>>;
};

/** Files relation input */
export type FilesVideo_VideoManyRelationInput = {
  connect?: Maybe<Array<VideoKeyFilter>>;
};

/** Files relation input */
export type FilesVideo_VideoRelationInput = {
  connect?: Maybe<Array<VideoKeyFilter>>;
  create?: Maybe<Array<Maybe<Video_VideoCreateInput>>>;
};

/** Files relation input */
export type FilesVideo_VideoUpdateRelationInput = {
  connect?: Maybe<Array<VideoKeyFilter>>;
  create?: Maybe<Array<Maybe<Video_VideoCreateInput>>>;
  disconnect?: Maybe<Array<VideoKeyFilter>>;
  reconnect?: Maybe<Array<VideoKeyFilter>>;
  update?: Maybe<Array<Maybe<Video_VideoUpdateInput>>>;
};

export type FloatPredicate = {
  equals?: Maybe<Scalars['Float']>;
  gt?: Maybe<Scalars['Float']>;
  gte?: Maybe<Scalars['Float']>;
  in?: Maybe<Array<Scalars['Float']>>;
  is_empty?: Maybe<Scalars['Boolean']>;
  is_not_empty?: Maybe<Scalars['Boolean']>;
  lt?: Maybe<Scalars['Float']>;
  lte?: Maybe<Scalars['Float']>;
  not_equals?: Maybe<Scalars['Float']>;
  not_in?: Maybe<Array<Scalars['Float']>>;
};

export type FloatPredicateHaving = {
  AND?: Maybe<Array<FloatPredicateHaving>>;
  OR?: Maybe<Array<FloatPredicateHaving>>;
  equals?: Maybe<Scalars['Float']>;
  gt?: Maybe<Scalars['Float']>;
  gte?: Maybe<Scalars['Float']>;
  in?: Maybe<Array<Scalars['Float']>>;
  is_empty?: Maybe<Scalars['Boolean']>;
  is_not_empty?: Maybe<Scalars['Boolean']>;
  lt?: Maybe<Scalars['Float']>;
  lte?: Maybe<Scalars['Float']>;
  not_equals?: Maybe<Scalars['Float']>;
  not_in?: Maybe<Array<Scalars['Float']>>;
};

/** FunctionInfo */
export type FunctionInfo = {
  application: Maybe<Application>;
  description: Maybe<Scalars['String']>;
  functionType: FunctionType;
  name: Scalars['String'];
};

/** FunctionInfoFilter */
export type FunctionInfoFilter = {
  description?: Maybe<Scalars['String']>;
  functionType?: Maybe<FunctionType>;
  name?: Maybe<Scalars['String']>;
};

/** FunctionInfoOrderBy */
export enum FunctionInfoOrderBy {
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  FunctionTypeAsc = 'functionType_ASC',
  FunctionTypeDesc = 'functionType_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
}

/** FunctionListResponse output */
export type FunctionListResponse = {
  __typename?: 'FunctionListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<FunctionInfo>;
};

/** FunctionResolverInfo */
export type FunctionResolverInfo = FunctionInfo & {
  __typename?: 'FunctionResolverInfo';
  application: Maybe<Application>;
  description: Maybe<Scalars['String']>;
  functionType: FunctionType;
  gqlType: Scalars['String'];
  name: Scalars['String'];
};

/** FunctionTaskInfo */
export type FunctionTaskInfo = FunctionInfo & {
  __typename?: 'FunctionTaskInfo';
  application: Maybe<Application>;
  description: Maybe<Scalars['String']>;
  functionType: FunctionType;
  name: Scalars['String'];
  scheduleExpression: Maybe<Scalars['String']>;
};

/** FunctionTriggerInfo */
export type FunctionTriggerInfo = FunctionInfo & {
  __typename?: 'FunctionTriggerInfo';
  application: Maybe<Application>;
  description: Maybe<Scalars['String']>;
  functionType: FunctionType;
  name: Scalars['String'];
  operation: Scalars['String'];
  tableName: Scalars['String'];
  type: Scalars['String'];
};

/** FunctionType */
export enum FunctionType {
  Resolver = 'resolver',
  Schedule = 'schedule',
  Task = 'task',
  Trigger = 'trigger',
  Webhook = 'webhook',
}

/** FunctionWebhookInfo */
export type FunctionWebhookInfo = FunctionInfo & {
  __typename?: 'FunctionWebhookInfo';
  application: Maybe<Application>;
  description: Maybe<Scalars['String']>;
  functionType: FunctionType;
  httpMethod: Scalars['String'];
  name: Scalars['String'];
  workspaceFullPath: Scalars['String'];
  workspaceRelativePath: Scalars['String'];
};

export type GenerateAccountLinkInput = {
  profileId?: Maybe<Scalars['String']>;
  returnUrl: Scalars['String'];
  schoolId?: Maybe<Scalars['String']>;
};

export type GenerateAccountLinkResponse = {
  __typename?: 'GenerateAccountLinkResponse';
  url: Maybe<Scalars['String']>;
};

/** Geo Field Attributes */
export type GeoFieldTypeAttributes = {
  __typename?: 'GeoFieldTypeAttributes';
  format: Scalars['String'];
  srid: Maybe<Scalars['Int']>;
};

/** Github connection params */
export type GithubOptions = {
  __typename?: 'GithubOptions';
  client_id: Scalars['String'];
  client_secret: Scalars['String'];
  enabled: Scalars['Boolean'];
};

/** Github connection params input */
export type GithubOptionsInput = {
  client_id: Scalars['String'];
  client_secret: Scalars['String'];
  enabled: Scalars['Boolean'];
};

/** Google connection params */
export type GoogleOptions = {
  __typename?: 'GoogleOptions';
  client_id: Scalars['String'];
  client_secret: Scalars['String'];
  enabled: Scalars['Boolean'];
};

/** Google connection params input */
export type GoogleOptionsInput = {
  client_id: Scalars['String'];
  client_secret: Scalars['String'];
  enabled: Scalars['Boolean'];
};

/** GraphQLCreateFileCustomInput */
export type GraphQlCreateFileCustomInput = {
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  public?: Maybe<Scalars['Boolean']>;
};

/** GraphQLCreateFileItemInput */
export type GraphQlCreateFileItemInput = {
  create?: Maybe<GraphQlCreateFileCustomInput>;
};

/** GraphQLFileItemResponse */
export type GraphQlFileItemResponse = {
  __typename?: 'GraphQLFileItemResponse';
  downloadUrl: Maybe<Scalars['String']>;
  id: Maybe<Scalars['String']>;
};

export type GroupByField = {
  as?: Maybe<Scalars['String']>;
  fn?: Maybe<Array<Maybe<GroupByFieldFunction>>>;
};

export type GroupByFieldFunction = {
  abs?: Maybe<Scalars['Boolean']>;
  aggregate?: Maybe<AggregationFunctionType>;
  ascii?: Maybe<Scalars['Boolean']>;
  bitLength?: Maybe<Scalars['Boolean']>;
  ceil?: Maybe<Scalars['Boolean']>;
  charLength?: Maybe<Scalars['Boolean']>;
  crc32?: Maybe<Scalars['Boolean']>;
  datePart?: Maybe<DatePartFunctionType>;
  distinct?: Maybe<Scalars['Boolean']>;
  floor?: Maybe<Scalars['Boolean']>;
  hex?: Maybe<Scalars['Boolean']>;
  ifNull?: Maybe<Scalars['String']>;
  isNull?: Maybe<Scalars['Boolean']>;
  left?: Maybe<Scalars['Int']>;
  length?: Maybe<Scalars['Boolean']>;
  like?: Maybe<PatternFunctionArguments>;
  locate?: Maybe<LocateFunctionArguments>;
  lower?: Maybe<Scalars['Boolean']>;
  lpad?: Maybe<StringPadFunctionArguments>;
  ltrim?: Maybe<Scalars['Boolean']>;
  mod?: Maybe<Scalars['Int']>;
  notLike?: Maybe<PatternFunctionArguments>;
  nullIf?: Maybe<Scalars['String']>;
  replace?: Maybe<ReplaceFunctionArguments>;
  reverse?: Maybe<Scalars['Boolean']>;
  right?: Maybe<Scalars['Int']>;
  round?: Maybe<Scalars['Int']>;
  rpad?: Maybe<StringPadFunctionArguments>;
  rtrim?: Maybe<Scalars['Boolean']>;
  sign?: Maybe<Scalars['Boolean']>;
  substring?: Maybe<SubstringFunctionArguments>;
  trim?: Maybe<TrimFunctionArguments>;
  truncate?: Maybe<Scalars['Int']>;
  upper?: Maybe<Scalars['Boolean']>;
};

export type GroupByResponse = {
  __typename?: 'GroupByResponse';
  AchievementGroup: AchievementListResponse;
  ApiTokenGroup: ApiTokenListResponse;
  AuthenticationProfileGroup: AuthenticationProfileListResponse;
  BigInt: Maybe<Scalars['BigInt']>;
  Boolean: Maybe<Scalars['Boolean']>;
  BrandGroup: BrandListResponse;
  CheckinGroup: CheckinListResponse;
  CiCdMigrationGroup: CiCdMigrationListResponse;
  CompetitionGroup: CompetitionListResponse;
  CountryGroup: CountryListResponse;
  CustomerGroup: CustomerListResponse;
  Date: Maybe<Scalars['Date']>;
  DateTime: Maybe<Scalars['DateTime']>;
  DiscountGroup: DiscountListResponse;
  EmailTemplateGroup: EmailTemplateListResponse;
  EnvironmentVariableGroup: EnvironmentVariableListResponse;
  FileGroup: FileListResponse;
  Float: Maybe<Scalars['Float']>;
  GroupIds: Maybe<Array<Scalars['ID']>>;
  GroupalClassGroup: GroupalClassListResponse;
  ID: Maybe<Scalars['ID']>;
  Int: Maybe<Scalars['Int']>;
  JSON: Maybe<Scalars['JSON']>;
  LanguageCountryGroup: LanguageCountryListResponse;
  LanguageGroup: LanguageListResponse;
  MartialArtGroup: MartialArtListResponse;
  PlanCategoryGroup: PlanCategoryListResponse;
  PlanGroup: PlanListResponse;
  PreSignupGroup: PreSignupListResponse;
  PrivateClassGroup: PrivateClassListResponse;
  PrivateClassPurchaseGroup: PrivateClassPurchaseListResponse;
  ProductCategoryGroup: ProductCategoryListResponse;
  ProductGroup: ProductListResponse;
  ProductSubscriptionGroup: ProductSubscriptionListResponse;
  ProfileGroup: ProfileListResponse;
  RankGroup: RankListResponse;
  RankIssuedGroup: RankIssuedListResponse;
  RoleGroup: RoleListResponse;
  ScheduleGroup: ScheduleListResponse;
  SchoolGroup: SchoolListResponse;
  SchoolMartialArtGroup: SchoolMartialArtListResponse;
  SchoolProfileGroup: SchoolProfileListResponse;
  SchoolStripeAccountGroup: SchoolStripeAccountListResponse;
  SchoolTeamGroup: SchoolTeamListResponse;
  ShortLinkGroup: ShortLinkListResponse;
  ShortUrlGroup: ShortUrlListResponse;
  SignUpGroup: SignUpListResponse;
  String: Maybe<Scalars['String']>;
  StripeAccountGroup: StripeAccountListResponse;
  TeamGroup: TeamListResponse;
  TeamMemberGroup: TeamMemberListResponse;
  TeamProfileGroup: TeamProfileListResponse;
  TextGroup: TextListResponse;
  UnknowGroup: UnknowListResponse;
  UserGroup: UserListResponse;
  UserProfileGroup: UserProfileListResponse;
  UserSchoolGroup: UserSchoolListResponse;
  VideoGroup: VideoListResponse;
  VideoLinkGroup: VideoLinkListResponse;
  WaitingListGroup: WaitingListListResponse;
  XCustomerGroup: XCustomerListResponse;
  XSchoolCustomerGroup: XSchoolCustomerListResponse;
};

export type GroupByResponseAchievementGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<AchievementFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<AchievementGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<AchievementOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<AchievementSort>>;
};

export type GroupByResponseApiTokenGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ApiTokenFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ApiTokenGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ApiTokenOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ApiTokenSort>>;
};

export type GroupByResponseAuthenticationProfileGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<AuthenticationProfileFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<AuthenticationProfileGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<AuthenticationProfileOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<AuthenticationProfileSort>>;
};

export type GroupByResponseBrandGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<BrandFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<BrandGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<BrandOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<BrandSort>>;
};

export type GroupByResponseCheckinGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<CheckinFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<CheckinGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<CheckinOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<CheckinSort>>;
};

export type GroupByResponseCiCdMigrationGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<CiCdMigrationFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<CiCdMigrationGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<CiCdMigrationOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<CiCdMigrationSort>>;
};

export type GroupByResponseCompetitionGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<CompetitionFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<CompetitionGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<CompetitionOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<CompetitionSort>>;
};

export type GroupByResponseCountryGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<CountryFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<CountryGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<CountryOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<CountrySort>>;
};

export type GroupByResponseCustomerGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<CustomerFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<CustomerGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<CustomerOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<CustomerSort>>;
};

export type GroupByResponseDiscountGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<DiscountFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<DiscountGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<DiscountOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<DiscountSort>>;
};

export type GroupByResponseEmailTemplateGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<EmailTemplateFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<EmailTemplateGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<EmailTemplateOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<EmailTemplateSort>>;
};

export type GroupByResponseEnvironmentVariableGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<EnvironmentVariableFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<EnvironmentVariableGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<EnvironmentVariableOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<EnvironmentVariableSort>>;
};

export type GroupByResponseFileGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<FileFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<FileGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<FileOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<FileSort>>;
};

export type GroupByResponseGroupalClassGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<GroupalClassFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<GroupalClassGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<GroupalClassOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupalClassSort>>;
};

export type GroupByResponseLanguageCountryGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<LanguageCountryFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<LanguageCountryGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<LanguageCountryOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<LanguageCountrySort>>;
};

export type GroupByResponseLanguageGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<LanguageFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<LanguageGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<LanguageOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<LanguageSort>>;
};

export type GroupByResponseMartialArtGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<MartialArtFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<MartialArtGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<MartialArtOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<MartialArtSort>>;
};

export type GroupByResponsePlanCategoryGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<PlanCategoryFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<PlanCategoryGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<PlanCategoryOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<PlanCategorySort>>;
};

export type GroupByResponsePlanGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<PlanFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<PlanGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<PlanOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<PlanSort>>;
};

export type GroupByResponsePreSignupGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<PreSignupFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<PreSignupGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<PreSignupOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<PreSignupSort>>;
};

export type GroupByResponsePrivateClassGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<PrivateClassFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<PrivateClassGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<PrivateClassOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<PrivateClassSort>>;
};

export type GroupByResponsePrivateClassPurchaseGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<PrivateClassPurchaseFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<PrivateClassPurchaseGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<PrivateClassPurchaseOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<PrivateClassPurchaseSort>>;
};

export type GroupByResponseProductCategoryGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ProductCategoryFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ProductCategoryGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ProductCategoryOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ProductCategorySort>>;
};

export type GroupByResponseProductGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ProductFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ProductGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ProductOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ProductSort>>;
};

export type GroupByResponseProductSubscriptionGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ProductSubscriptionFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ProductSubscriptionGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ProductSubscriptionOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ProductSubscriptionSort>>;
};

export type GroupByResponseProfileGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ProfileFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ProfileGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ProfileOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ProfileSort>>;
};

export type GroupByResponseRankGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<RankFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<RankGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<RankOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<RankSort>>;
};

export type GroupByResponseRankIssuedGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<RankIssuedFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<RankIssuedGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<RankIssuedOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<RankIssuedSort>>;
};

export type GroupByResponseRoleGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<RoleFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<RoleGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<RoleOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<RoleSort>>;
};

export type GroupByResponseScheduleGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ScheduleFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ScheduleGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ScheduleOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ScheduleSort>>;
};

export type GroupByResponseSchoolGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<SchoolFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<SchoolGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<SchoolOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<SchoolSort>>;
};

export type GroupByResponseSchoolMartialArtGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<SchoolMartialArtFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<SchoolMartialArtGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<SchoolMartialArtOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<SchoolMartialArtSort>>;
};

export type GroupByResponseSchoolProfileGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<SchoolProfileFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<SchoolProfileGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<SchoolProfileOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<SchoolProfileSort>>;
};

export type GroupByResponseSchoolStripeAccountGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<SchoolStripeAccountFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<SchoolStripeAccountGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<SchoolStripeAccountOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<SchoolStripeAccountSort>>;
};

export type GroupByResponseSchoolTeamGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<SchoolTeamFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<SchoolTeamGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<SchoolTeamOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<SchoolTeamSort>>;
};

export type GroupByResponseShortLinkGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ShortLinkFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ShortLinkGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ShortLinkOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ShortLinkSort>>;
};

export type GroupByResponseShortUrlGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ShortUrlFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ShortUrlGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ShortUrlOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ShortUrlSort>>;
};

export type GroupByResponseSignUpGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<SignUpFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<SignUpGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<SignUpOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<SignUpSort>>;
};

export type GroupByResponseStripeAccountGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<StripeAccountFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<StripeAccountGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<StripeAccountOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<StripeAccountSort>>;
};

export type GroupByResponseTeamGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<TeamFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<TeamGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<TeamOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<TeamSort>>;
};

export type GroupByResponseTeamMemberGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<TeamMemberFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<TeamMemberGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<TeamMemberOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<TeamMemberSort>>;
};

export type GroupByResponseTeamProfileGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<TeamProfileFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<TeamProfileGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<TeamProfileOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<TeamProfileSort>>;
};

export type GroupByResponseTextGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<TextFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<TextGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<TextOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<TextSort>>;
};

export type GroupByResponseUnknowGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<UnknowFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<UnknowGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<UnknowOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<UnknowSort>>;
};

export type GroupByResponseUserGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<UserFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<UserGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<UserOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<UserSort>>;
};

export type GroupByResponseUserProfileGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<UserProfileFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<UserProfileGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<UserProfileOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<UserProfileSort>>;
};

export type GroupByResponseUserSchoolGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<UserSchoolFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<UserSchoolGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<UserSchoolOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<UserSchoolSort>>;
};

export type GroupByResponseVideoGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<VideoFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<VideoGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<VideoOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<VideoSort>>;
};

export type GroupByResponseVideoLinkGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<VideoLinkFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<VideoLinkGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<VideoLinkOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<VideoLinkSort>>;
};

export type GroupByResponseWaitingListGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<WaitingListFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<WaitingListGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<WaitingListOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<WaitingListSort>>;
};

export type GroupByResponseXCustomerGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<XCustomerFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<XCustomerGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<XCustomerOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<XCustomerSort>>;
};

export type GroupByResponseXSchoolCustomerGroupArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<XSchoolCustomerFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<XSchoolCustomerGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<XSchoolCustomerOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<XSchoolCustomerSort>>;
};

export type GroupBySort = {
  alias: Scalars['String'];
  direction: SortOrder;
};

export type GroupIdentifiersGroupByField = {
  as: Scalars['String'];
};

export type GroupalClass = {
  __typename?: 'GroupalClass';
  _description: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  days: Maybe<Scalars['String']>;
  deletedAt: Maybe<Scalars['Int']>;
  duration: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
  profile: Maybe<Profile>;
  school: Maybe<School>;
  startTime: Maybe<Scalars['DateTime']>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

/** GroupalClass create input */
export type GroupalClassCreateInput = {
  days?: Maybe<Scalars['String']>;
  duration?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  profile?: Maybe<GroupalClassProfileRelationInput>;
  school?: Maybe<GroupalClassSchoolRelationInput>;
  startTime?: Maybe<Scalars['DateTime']>;
};

/** GroupalClass create many input */
export type GroupalClassCreateManyInput = {
  days?: Maybe<Scalars['String']>;
  duration?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  profile?: Maybe<GroupalClassProfileManyRelationInput>;
  school?: Maybe<GroupalClassSchoolManyRelationInput>;
  startTime?: Maybe<Scalars['DateTime']>;
};

/** GroupalClass delete input */
export type GroupalClassDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** GroupalClassFieldsPermissions create input */
export type GroupalClassFieldsPermissions = {
  createdAt?: Maybe<Scalars['Boolean']>;
  days?: Maybe<Scalars['Boolean']>;
  duration?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['Boolean']>;
  startTime?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type GroupalClassFilter = {
  AND?: Maybe<Array<GroupalClassFilter>>;
  OR?: Maybe<Array<GroupalClassFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  days?: Maybe<StringPredicate>;
  deletedAt?: Maybe<IntPredicate>;
  duration?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  name?: Maybe<StringPredicate>;
  profile?: Maybe<ProfileFilter>;
  school?: Maybe<SchoolFilter>;
  startTime?: Maybe<DateTimePredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type GroupalClassGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: GroupalClassGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type GroupalClassGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  days?: Maybe<Array<GroupByField>>;
  duration?: Maybe<Array<GroupByField>>;
  id?: Maybe<Array<GroupByField>>;
  name?: Maybe<Array<GroupByField>>;
  profile?: Maybe<ProfileGroupByQuery>;
  school?: Maybe<SchoolGroupByQuery>;
  startTime?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

export type GroupalClassKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** GroupalClassListResponse output */
export type GroupalClassListResponse = {
  __typename?: 'GroupalClassListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<GroupalClass>;
};

/** GroupalClassManyResponse output */
export type GroupalClassManyResponse = {
  __typename?: 'GroupalClassManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<GroupalClass>;
};

/** No longer supported. Use `sort` instead. */
export enum GroupalClassOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DaysAsc = 'days_ASC',
  DaysDesc = 'days_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DurationAsc = 'duration_ASC',
  DurationDesc = 'duration_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  StartTimeAsc = 'startTime_ASC',
  StartTimeDesc = 'startTime_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** GroupalClass subscription payload */
export type GroupalClassPayload = {
  __typename?: 'GroupalClassPayload';
  mutation: MutationType;
  node: Maybe<GroupalClass>;
  previousValues: Maybe<GroupalClass>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** GroupalClass relation input */
export type GroupalClassProfileManyRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
};

/** GroupalClass relation input */
export type GroupalClassProfileRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
  create?: Maybe<GroupalClass_ProfileCreateInput>;
};

/** GroupalClass relation input */
export type GroupalClassProfileUpdateRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
  create?: Maybe<GroupalClass_ProfileCreateInput>;
  disconnect?: Maybe<ProfileKeyFilter>;
  reconnect?: Maybe<ProfileKeyFilter>;
  update?: Maybe<GroupalClass_ProfileUpdateInput>;
};

export type GroupalClassRelationFilter = {
  every?: Maybe<GroupalClassFilter>;
  none?: Maybe<GroupalClassFilter>;
  some?: Maybe<GroupalClassFilter>;
};

/** GroupalClass relation input */
export type GroupalClassSchoolManyRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
};

/** GroupalClass relation input */
export type GroupalClassSchoolRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<GroupalClass_SchoolCreateInput>;
};

/** GroupalClass relation input */
export type GroupalClassSchoolUpdateRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<GroupalClass_SchoolCreateInput>;
  disconnect?: Maybe<SchoolKeyFilter>;
  reconnect?: Maybe<SchoolKeyFilter>;
  update?: Maybe<GroupalClass_SchoolUpdateInput>;
};

export type GroupalClassSort = {
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  days?: Maybe<SortOrder>;
  deletedAt?: Maybe<SortOrder>;
  duration?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  profile?: Maybe<ProfileSort>;
  school?: Maybe<SchoolSort>;
  startTime?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
};

/** GroupalClass subscription filter */
export type GroupalClassSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<GroupalClassFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** GroupalClass update input */
export type GroupalClassUpdateByFilterInput = {
  days?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  duration?: Maybe<Array<Maybe<UpdateByFilterIntInput>>>;
  name?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  startTime?: Maybe<Array<Maybe<UpdateByFilterDateTimeInput>>>;
};

/** GroupalClass update input */
export type GroupalClassUpdateInput = {
  days?: Maybe<Scalars['String']>;
  duration?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  profile?: Maybe<GroupalClassProfileUpdateRelationInput>;
  school?: Maybe<GroupalClassSchoolUpdateRelationInput>;
  startTime?: Maybe<Scalars['DateTime']>;
};

export type GroupalClass_PermissionFilter = {
  AND?: Maybe<Array<GroupalClass_PermissionFilter>>;
  OR?: Maybe<Array<GroupalClass_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  days?: Maybe<StringPredicate>;
  deletedAt?: Maybe<IntPredicate>;
  duration?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  name?: Maybe<StringPredicate>;
  profile?: Maybe<Profile_PermissionFilter>;
  school?: Maybe<School_PermissionFilter>;
  startTime?: Maybe<DateTimePredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type GroupalClass_PermissionRelationFilter = {
  every?: Maybe<GroupalClass_PermissionFilter>;
  none?: Maybe<GroupalClass_PermissionFilter>;
  some?: Maybe<GroupalClass_PermissionFilter>;
};

/** Profile create input from groupalClass */
export type GroupalClass_ProfileCreateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8RelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24RelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Profile update input from groupalClass */
export type GroupalClass_ProfileUpdateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsUpdateRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinUpdateRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassUpdateRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationUpdateRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileUpdateRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoUpdateRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolUpdateRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationUpdateRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamUpdateRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileUpdateRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallUpdateRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8UpdateRelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24UpdateRelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileUpdateRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountUpdateRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkUpdateRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationUpdateRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** School create input from groupalClass */
export type GroupalClass_SchoolCreateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountRelationInput>;
  user?: Maybe<SchoolUserRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

/** School update input from groupalClass */
export type GroupalClass_SchoolUpdateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationUpdateRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolUpdateRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolUpdateRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolUpdateRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerUpdateRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoUpdateRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsUpdateRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationUpdateRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationUpdateRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationUpdateRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileUpdateRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationUpdateRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamUpdateRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountUpdateRelationInput>;
  user?: Maybe<SchoolUserUpdateRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

export type Having = {
  AND?: Maybe<Array<Having>>;
  OR?: Maybe<Array<Having>>;
  alias?: Maybe<Scalars['String']>;
  bigint?: Maybe<BigIntPredicateHaving>;
  bool?: Maybe<BoolPredicateHaving>;
  date?: Maybe<DatePredicateHaving>;
  datetime?: Maybe<DateTimePredicateHaving>;
  float?: Maybe<FloatPredicateHaving>;
  id?: Maybe<IdPredicateHaving>;
  int?: Maybe<IntPredicateHaving>;
  string?: Maybe<StringPredicateHaving>;
};

export type IdPredicate = {
  contains?: Maybe<Scalars['ID']>;
  ends_with?: Maybe<Scalars['ID']>;
  equals?: Maybe<Scalars['ID']>;
  gt?: Maybe<Scalars['ID']>;
  gte?: Maybe<Scalars['ID']>;
  in?: Maybe<Array<Scalars['ID']>>;
  is_empty?: Maybe<Scalars['Boolean']>;
  is_not_empty?: Maybe<Scalars['Boolean']>;
  lt?: Maybe<Scalars['ID']>;
  lte?: Maybe<Scalars['ID']>;
  not_contains?: Maybe<Scalars['ID']>;
  not_ends_with?: Maybe<Scalars['ID']>;
  not_equals?: Maybe<Scalars['ID']>;
  not_in?: Maybe<Array<Scalars['ID']>>;
  not_starts_with?: Maybe<Scalars['ID']>;
  starts_with?: Maybe<Scalars['ID']>;
};

export type IdPredicateHaving = {
  AND?: Maybe<Array<IdPredicateHaving>>;
  OR?: Maybe<Array<IdPredicateHaving>>;
  contains?: Maybe<Scalars['ID']>;
  ends_with?: Maybe<Scalars['ID']>;
  equals?: Maybe<Scalars['ID']>;
  gt?: Maybe<Scalars['ID']>;
  gte?: Maybe<Scalars['ID']>;
  in?: Maybe<Array<Scalars['ID']>>;
  is_empty?: Maybe<Scalars['Boolean']>;
  is_not_empty?: Maybe<Scalars['Boolean']>;
  lt?: Maybe<Scalars['ID']>;
  lte?: Maybe<Scalars['ID']>;
  not_contains?: Maybe<Scalars['ID']>;
  not_ends_with?: Maybe<Scalars['ID']>;
  not_equals?: Maybe<Scalars['ID']>;
  not_in?: Maybe<Array<Scalars['ID']>>;
  not_starts_with?: Maybe<Scalars['ID']>;
  starts_with?: Maybe<Scalars['ID']>;
};

/** LanguageCountry create input from idCountry */
export type IdCountry_LanguageCountryCreateInput = {
  idCountry?: Maybe<LanguageCountryIdCountryRelationInput>;
  idLanguage?: Maybe<LanguageCountryIdLanguageRelationInput>;
};

/** LanguageCountry update input from idCountry */
export type IdCountry_LanguageCountryUpdateInput = {
  data: LanguageCountryUpdateInput;
  filter?: Maybe<LanguageCountryKeyFilter>;
};

/** XSchoolCustomer create input from idCustomer */
export type IdCustomer_XSchoolCustomerCreateInput = {
  idCustomer?: Maybe<XSchoolCustomerIdCustomerRelationInput>;
  idSchool?: Maybe<XSchoolCustomerIdSchoolRelationInput>;
};

/** XSchoolCustomer update input from idCustomer */
export type IdCustomer_XSchoolCustomerUpdateInput = {
  data: XSchoolCustomerUpdateInput;
  filter?: Maybe<XSchoolCustomerKeyFilter>;
};

/** LanguageCountry create input from idLanguage */
export type IdLanguage_LanguageCountryCreateInput = {
  idCountry?: Maybe<LanguageCountryIdCountryRelationInput>;
  idLanguage?: Maybe<LanguageCountryIdLanguageRelationInput>;
};

/** LanguageCountry update input from idLanguage */
export type IdLanguage_LanguageCountryUpdateInput = {
  data: LanguageCountryUpdateInput;
  filter?: Maybe<LanguageCountryKeyFilter>;
};

/** Schedule create input from idMartialArt */
export type IdMartialArt_ScheduleCreateInput = {
  airtableId?: Maybe<Scalars['String']>;
  checkin?: Maybe<ScheduleCheckinRelationInput>;
  endTime?: Maybe<Scalars['String']>;
  idMartialArt?: Maybe<ScheduleIdMartialArtRelationInput>;
  idProfile?: Maybe<ScheduleIdProfileRelationInput>;
  idSchool?: Maybe<ScheduleIdSchoolRelationInput>;
  name?: Maybe<Scalars['String']>;
  room?: Maybe<Scalars['String']>;
  startTime?: Maybe<Scalars['String']>;
  weekday?: Maybe<Scalars['String']>;
};

/** Schedule update input from idMartialArt */
export type IdMartialArt_ScheduleUpdateInput = {
  data: ScheduleUpdateInput;
  filter?: Maybe<ScheduleKeyFilter>;
};

/** SchoolMartialArt create input from idMartialArt */
export type IdMartialArt_SchoolMartialArtCreateInput = {
  idMartialArt?: Maybe<SchoolMartialArtIdMartialArtRelationInput>;
  idSchool?: Maybe<SchoolMartialArtIdSchoolRelationInput>;
};

/** SchoolMartialArt update input from idMartialArt */
export type IdMartialArt_SchoolMartialArtUpdateInput = {
  data: SchoolMartialArtUpdateInput;
  filter?: Maybe<SchoolMartialArtKeyFilter>;
};

/** Profile create input from idProfile */
export type IdProfile_ProfileCreateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8RelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24RelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Profile update input from idProfile */
export type IdProfile_ProfileUpdateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsUpdateRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinUpdateRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassUpdateRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationUpdateRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileUpdateRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoUpdateRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolUpdateRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationUpdateRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamUpdateRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileUpdateRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallUpdateRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8UpdateRelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24UpdateRelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileUpdateRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountUpdateRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkUpdateRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationUpdateRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Schedule create input from idProfile */
export type IdProfile_ScheduleCreateInput = {
  airtableId?: Maybe<Scalars['String']>;
  checkin?: Maybe<ScheduleCheckinRelationInput>;
  endTime?: Maybe<Scalars['String']>;
  idMartialArt?: Maybe<ScheduleIdMartialArtRelationInput>;
  idProfile?: Maybe<ScheduleIdProfileRelationInput>;
  idSchool?: Maybe<ScheduleIdSchoolRelationInput>;
  name?: Maybe<Scalars['String']>;
  room?: Maybe<Scalars['String']>;
  startTime?: Maybe<Scalars['String']>;
  weekday?: Maybe<Scalars['String']>;
};

/** Schedule update input from idProfile */
export type IdProfile_ScheduleUpdateInput = {
  data: ScheduleUpdateInput;
  filter?: Maybe<ScheduleKeyFilter>;
};

/** SchoolProfile create input from idProfile */
export type IdProfile_SchoolProfileCreateInput = {
  idProfile?: Maybe<SchoolProfileIdProfileRelationInput>;
  idSchool?: Maybe<SchoolProfileIdSchoolRelationInput>;
  rol?: Maybe<Scalars['String']>;
};

/** SchoolProfile update input from idProfile */
export type IdProfile_SchoolProfileUpdateInput = {
  data: SchoolProfileUpdateInput;
  filter?: Maybe<SchoolProfileKeyFilter>;
};

/** TeamProfile create input from idProfile */
export type IdProfile_TeamProfileCreateInput = {
  idProfile?: Maybe<TeamProfileIdProfileRelationInput>;
  idTeam?: Maybe<TeamProfileIdTeamRelationInput>;
};

/** TeamProfile update input from idProfile */
export type IdProfile_TeamProfileUpdateInput = {
  data: TeamProfileUpdateInput;
  filter?: Maybe<TeamProfileKeyFilter>;
};

/** UserProfile create input from idProfile */
export type IdProfile_UserProfileCreateInput = {
  idProfile?: Maybe<UserProfileIdProfileRelationInput>;
  idUser?: Maybe<UserProfileIdUserRelationInput>;
};

/** UserProfile update input from idProfile */
export type IdProfile_UserProfileUpdateInput = {
  data: UserProfileUpdateInput;
  filter?: Maybe<UserProfileKeyFilter>;
};

/** Schedule create input from idSchool */
export type IdSchool_ScheduleCreateInput = {
  airtableId?: Maybe<Scalars['String']>;
  checkin?: Maybe<ScheduleCheckinRelationInput>;
  endTime?: Maybe<Scalars['String']>;
  idMartialArt?: Maybe<ScheduleIdMartialArtRelationInput>;
  idProfile?: Maybe<ScheduleIdProfileRelationInput>;
  idSchool?: Maybe<ScheduleIdSchoolRelationInput>;
  name?: Maybe<Scalars['String']>;
  room?: Maybe<Scalars['String']>;
  startTime?: Maybe<Scalars['String']>;
  weekday?: Maybe<Scalars['String']>;
};

/** Schedule update input from idSchool */
export type IdSchool_ScheduleUpdateInput = {
  data: ScheduleUpdateInput;
  filter?: Maybe<ScheduleKeyFilter>;
};

/** SchoolMartialArt create input from idSchool */
export type IdSchool_SchoolMartialArtCreateInput = {
  idMartialArt?: Maybe<SchoolMartialArtIdMartialArtRelationInput>;
  idSchool?: Maybe<SchoolMartialArtIdSchoolRelationInput>;
};

/** SchoolMartialArt update input from idSchool */
export type IdSchool_SchoolMartialArtUpdateInput = {
  data: SchoolMartialArtUpdateInput;
  filter?: Maybe<SchoolMartialArtKeyFilter>;
};

/** SchoolProfile create input from idSchool */
export type IdSchool_SchoolProfileCreateInput = {
  idProfile?: Maybe<SchoolProfileIdProfileRelationInput>;
  idSchool?: Maybe<SchoolProfileIdSchoolRelationInput>;
  rol?: Maybe<Scalars['String']>;
};

/** SchoolProfile update input from idSchool */
export type IdSchool_SchoolProfileUpdateInput = {
  data: SchoolProfileUpdateInput;
  filter?: Maybe<SchoolProfileKeyFilter>;
};

/** SchoolTeam create input from idSchool */
export type IdSchool_SchoolTeamCreateInput = {
  idSchool?: Maybe<SchoolTeamIdSchoolRelationInput>;
  idTeam?: Maybe<SchoolTeamIdTeamRelationInput>;
};

/** SchoolTeam update input from idSchool */
export type IdSchool_SchoolTeamUpdateInput = {
  data: SchoolTeamUpdateInput;
  filter?: Maybe<SchoolTeamKeyFilter>;
};

/** UserSchool create input from idSchool */
export type IdSchool_UserSchoolCreateInput = {
  idSchool?: Maybe<UserSchoolIdSchoolRelationInput>;
  idUser?: Maybe<UserSchoolIdUserRelationInput>;
};

/** UserSchool update input from idSchool */
export type IdSchool_UserSchoolUpdateInput = {
  data: UserSchoolUpdateInput;
  filter?: Maybe<UserSchoolKeyFilter>;
};

/** XSchoolCustomer create input from idSchool */
export type IdSchool_XSchoolCustomerCreateInput = {
  idCustomer?: Maybe<XSchoolCustomerIdCustomerRelationInput>;
  idSchool?: Maybe<XSchoolCustomerIdSchoolRelationInput>;
};

/** XSchoolCustomer update input from idSchool */
export type IdSchool_XSchoolCustomerUpdateInput = {
  data: XSchoolCustomerUpdateInput;
  filter?: Maybe<XSchoolCustomerKeyFilter>;
};

/** SchoolTeam create input from idTeam */
export type IdTeam_SchoolTeamCreateInput = {
  idSchool?: Maybe<SchoolTeamIdSchoolRelationInput>;
  idTeam?: Maybe<SchoolTeamIdTeamRelationInput>;
};

/** SchoolTeam update input from idTeam */
export type IdTeam_SchoolTeamUpdateInput = {
  data: SchoolTeamUpdateInput;
  filter?: Maybe<SchoolTeamKeyFilter>;
};

/** TeamProfile create input from idTeam */
export type IdTeam_TeamProfileCreateInput = {
  idProfile?: Maybe<TeamProfileIdProfileRelationInput>;
  idTeam?: Maybe<TeamProfileIdTeamRelationInput>;
};

/** TeamProfile update input from idTeam */
export type IdTeam_TeamProfileUpdateInput = {
  data: TeamProfileUpdateInput;
  filter?: Maybe<TeamProfileKeyFilter>;
};

/** Users create input from idUser */
export type IdUser_UserCreateInput = {
  avatar?: Maybe<UsersAvatarRelationInput>;
  email: Scalars['String'];
  firstName?: Maybe<Scalars['String']>;
  idUser?: Maybe<UsersIdUserRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  roles?: Maybe<UsersRolesRelationInput>;
  schools?: Maybe<UsersSchoolsRelationInput>;
  status?: Maybe<Scalars['String']>;
  timezone?: Maybe<Scalars['String']>;
};

/** UserProfile create input from idUser */
export type IdUser_UserProfileCreateInput = {
  idProfile?: Maybe<UserProfileIdProfileRelationInput>;
  idUser?: Maybe<UserProfileIdUserRelationInput>;
};

/** UserProfile update input from idUser */
export type IdUser_UserProfileUpdateInput = {
  data: UserProfileUpdateInput;
  filter?: Maybe<UserProfileKeyFilter>;
};

/** UserSchool create input from idUser */
export type IdUser_UserSchoolCreateInput = {
  idSchool?: Maybe<UserSchoolIdSchoolRelationInput>;
  idUser?: Maybe<UserSchoolIdUserRelationInput>;
};

/** UserSchool update input from idUser */
export type IdUser_UserSchoolUpdateInput = {
  data: UserSchoolUpdateInput;
  filter?: Maybe<UserSchoolKeyFilter>;
};

/** Users update input from idUser */
export type IdUser_UserUpdateInput = {
  avatar?: Maybe<UsersAvatarUpdateRelationInput>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  idUser?: Maybe<UsersIdUserUpdateRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  roles?: Maybe<UsersRolesUpdateRelationInput>;
  schools?: Maybe<UsersSchoolsUpdateRelationInput>;
  status?: Maybe<Scalars['String']>;
  timezone?: Maybe<Scalars['String']>;
};

/** ImportedTable */
export type ImportedTable = {
  __typename?: 'ImportedTable';
  id: Scalars['ID'];
  name: Scalars['String'];
};

/** Inbox Events List Filter */
export type InboxEventsListFilter = {
  isCompleted?: Maybe<IntPredicate>;
};

/** Table Create Index Input */
export type IndexCreateInput = {
  columns: Array<TableIndexColumnInput>;
  force?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  tableId: Scalars['ID'];
  type: TableIndexType;
};

/** Table Delete Index Input */
export type IndexDeleteInput = {
  id: Scalars['ID'];
};

/** Table Update Index Input */
export type IndexUpdateInput = {
  columns?: Maybe<Array<TableIndexColumnInput>>;
  force?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  type?: Maybe<TableIndexType>;
};

/** Profile create input from instructorPrivateClassesRelation */
export type InstructorPrivateClassesRelation_ProfileCreateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8RelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24RelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Profile update input from instructorPrivateClassesRelation */
export type InstructorPrivateClassesRelation_ProfileUpdateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsUpdateRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinUpdateRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassUpdateRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationUpdateRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileUpdateRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoUpdateRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolUpdateRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationUpdateRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamUpdateRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileUpdateRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallUpdateRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8UpdateRelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24UpdateRelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileUpdateRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountUpdateRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkUpdateRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationUpdateRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** PrivateClasses create input from instructor */
export type Instructor_PrivateClassCreateInput = {
  amount: Scalars['Int'];
  classPrivateClassPurchaseRelation?: Maybe<PrivateClassesClassPrivateClassPurchaseRelationRelationInput>;
  currency?: Maybe<Scalars['String']>;
  days?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  /** Duration saved in minutes */
  duration?: Maybe<Scalars['Int']>;
  endTime?: Maybe<Scalars['DateTime']>;
  instructor?: Maybe<PrivateClassesInstructorRelationInput>;
  isActive?: Maybe<Scalars['Boolean']>;
  lookupKey?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  school: PrivateClassesSchoolRelationInput;
  startTime?: Maybe<Scalars['DateTime']>;
  stripeProductId: Scalars['String'];
};

/** PrivateClasses update input from instructor */
export type Instructor_PrivateClassUpdateInput = {
  data: PrivateClassUpdateInput;
  filter?: Maybe<PrivateClassKeyFilter>;
};

export type IntPredicate = {
  equals?: Maybe<Scalars['Int']>;
  gt?: Maybe<Scalars['Int']>;
  gte?: Maybe<Scalars['Int']>;
  in?: Maybe<Array<Scalars['Int']>>;
  is_empty?: Maybe<Scalars['Boolean']>;
  is_not_empty?: Maybe<Scalars['Boolean']>;
  lt?: Maybe<Scalars['Int']>;
  lte?: Maybe<Scalars['Int']>;
  not_equals?: Maybe<Scalars['Int']>;
  not_in?: Maybe<Array<Scalars['Int']>>;
};

export type IntPredicateHaving = {
  AND?: Maybe<Array<IntPredicateHaving>>;
  OR?: Maybe<Array<IntPredicateHaving>>;
  equals?: Maybe<Scalars['Int']>;
  gt?: Maybe<Scalars['Int']>;
  gte?: Maybe<Scalars['Int']>;
  in?: Maybe<Array<Scalars['Int']>>;
  is_empty?: Maybe<Scalars['Boolean']>;
  is_not_empty?: Maybe<Scalars['Boolean']>;
  lt?: Maybe<Scalars['Int']>;
  lte?: Maybe<Scalars['Int']>;
  not_equals?: Maybe<Scalars['Int']>;
  not_in?: Maybe<Array<Scalars['Int']>>;
};

export type IntrospectionQueryResponse = {
  __typename?: 'IntrospectionQueryResponse';
  url: Scalars['String'];
};

/** Invited By Name */
export type InvitedByName = {
  __typename?: 'InvitedByName';
  email: Maybe<Scalars['String']>;
  firstName: Maybe<Scalars['String']>;
  lastName: Maybe<Scalars['String']>;
  workspaceName: Maybe<Scalars['String']>;
};

/** InvokeData */
export type InvokeData = {
  functionName: Scalars['String'];
  inputArgs?: Maybe<Scalars['String']>;
};

/** InvokeFunctionResponse */
export type InvokeFunctionResponse = {
  __typename?: 'InvokeFunctionResponse';
  responseData: Scalars['String'];
};

export type Language = {
  __typename?: 'Language';
  _description: Maybe<Scalars['String']>;
  airtableId: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  isoCode: Maybe<Scalars['String']>;
  languageCountry: Maybe<LanguageCountryListResponse>;
  name: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

export type LanguageLanguageCountryArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<LanguageCountryFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<LanguageCountryGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<LanguageCountryOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<LanguageCountrySort>>;
};

export type LanguageCountry = {
  __typename?: 'LanguageCountry';
  _description: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  idCountry: Maybe<Country>;
  idLanguage: Maybe<Language>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

/** LanguageCountry create input */
export type LanguageCountryCreateInput = {
  idCountry?: Maybe<LanguageCountryIdCountryRelationInput>;
  idLanguage?: Maybe<LanguageCountryIdLanguageRelationInput>;
};

/** LanguageCountry create many input */
export type LanguageCountryCreateManyInput = {
  idCountry?: Maybe<LanguageCountryIdCountryManyRelationInput>;
  idLanguage?: Maybe<LanguageCountryIdLanguageManyRelationInput>;
};

/** LanguageCountry delete input */
export type LanguageCountryDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** LanguageCountryFieldsPermissions create input */
export type LanguageCountryFieldsPermissions = {
  createdAt?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type LanguageCountryFilter = {
  AND?: Maybe<Array<LanguageCountryFilter>>;
  OR?: Maybe<Array<LanguageCountryFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  idCountry?: Maybe<CountryFilter>;
  idLanguage?: Maybe<LanguageFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type LanguageCountryGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: LanguageCountryGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type LanguageCountryGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  id?: Maybe<Array<GroupByField>>;
  idCountry?: Maybe<CountryGroupByQuery>;
  idLanguage?: Maybe<LanguageGroupByQuery>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

/** LanguageCountry relation input */
export type LanguageCountryIdCountryManyRelationInput = {
  connect?: Maybe<CountryKeyFilter>;
};

/** LanguageCountry relation input */
export type LanguageCountryIdCountryRelationInput = {
  connect?: Maybe<CountryKeyFilter>;
  create?: Maybe<CountryLanguage_CountryCreateInput>;
};

/** LanguageCountry relation input */
export type LanguageCountryIdCountryUpdateRelationInput = {
  connect?: Maybe<CountryKeyFilter>;
  create?: Maybe<CountryLanguage_CountryCreateInput>;
  disconnect?: Maybe<CountryKeyFilter>;
  reconnect?: Maybe<CountryKeyFilter>;
  update?: Maybe<CountryLanguage_CountryUpdateInput>;
};

/** LanguageCountry relation input */
export type LanguageCountryIdLanguageManyRelationInput = {
  connect?: Maybe<LanguageKeyFilter>;
};

/** LanguageCountry relation input */
export type LanguageCountryIdLanguageRelationInput = {
  connect?: Maybe<LanguageKeyFilter>;
  create?: Maybe<LanguageCountry_LanguageCreateInput>;
};

/** LanguageCountry relation input */
export type LanguageCountryIdLanguageUpdateRelationInput = {
  connect?: Maybe<LanguageKeyFilter>;
  create?: Maybe<LanguageCountry_LanguageCreateInput>;
  disconnect?: Maybe<LanguageKeyFilter>;
  reconnect?: Maybe<LanguageKeyFilter>;
  update?: Maybe<LanguageCountry_LanguageUpdateInput>;
};

export type LanguageCountryKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** LanguageCountryListResponse output */
export type LanguageCountryListResponse = {
  __typename?: 'LanguageCountryListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<LanguageCountry>;
};

/** LanguageCountryManyResponse output */
export type LanguageCountryManyResponse = {
  __typename?: 'LanguageCountryManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<LanguageCountry>;
};

/** No longer supported. Use `sort` instead. */
export enum LanguageCountryOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** LanguageCountry subscription payload */
export type LanguageCountryPayload = {
  __typename?: 'LanguageCountryPayload';
  mutation: MutationType;
  node: Maybe<LanguageCountry>;
  previousValues: Maybe<LanguageCountry>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type LanguageCountryRelationFilter = {
  every?: Maybe<LanguageCountryFilter>;
  none?: Maybe<LanguageCountryFilter>;
  some?: Maybe<LanguageCountryFilter>;
};

export type LanguageCountrySort = {
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  idCountry?: Maybe<CountrySort>;
  idLanguage?: Maybe<LanguageSort>;
  updatedAt?: Maybe<SortOrder>;
};

/** LanguageCountry subscription filter */
export type LanguageCountrySubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<LanguageCountryFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** LanguageCountry update input */
export type LanguageCountryUpdateInput = {
  id?: Maybe<Scalars['ID']>;
  idCountry?: Maybe<LanguageCountryIdCountryUpdateRelationInput>;
  idLanguage?: Maybe<LanguageCountryIdLanguageUpdateRelationInput>;
};

/** Languages create input from languageCountry */
export type LanguageCountry_LanguageCreateInput = {
  airtableId?: Maybe<Scalars['String']>;
  isoCode?: Maybe<Scalars['String']>;
  languageCountry?: Maybe<LanguagesLanguageCountryRelationInput>;
  name?: Maybe<Scalars['String']>;
};

/** Languages update input from languageCountry */
export type LanguageCountry_LanguageUpdateInput = {
  airtableId?: Maybe<Scalars['String']>;
  isoCode?: Maybe<Scalars['String']>;
  languageCountry?: Maybe<LanguagesLanguageCountryUpdateRelationInput>;
  name?: Maybe<Scalars['String']>;
};

export type LanguageCountry_PermissionFilter = {
  AND?: Maybe<Array<LanguageCountry_PermissionFilter>>;
  OR?: Maybe<Array<LanguageCountry_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  idCountry?: Maybe<Country_PermissionFilter>;
  idLanguage?: Maybe<Language_PermissionFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type LanguageCountry_PermissionRelationFilter = {
  every?: Maybe<LanguageCountry_PermissionFilter>;
  none?: Maybe<LanguageCountry_PermissionFilter>;
  some?: Maybe<LanguageCountry_PermissionFilter>;
};

/** Languages create input */
export type LanguageCreateInput = {
  airtableId?: Maybe<Scalars['String']>;
  isoCode?: Maybe<Scalars['String']>;
  languageCountry?: Maybe<LanguagesLanguageCountryRelationInput>;
  name?: Maybe<Scalars['String']>;
};

/** Languages create many input */
export type LanguageCreateManyInput = {
  airtableId?: Maybe<Scalars['String']>;
  isoCode?: Maybe<Scalars['String']>;
  languageCountry?: Maybe<LanguagesLanguageCountryManyRelationInput>;
  name?: Maybe<Scalars['String']>;
};

/** Languages delete input */
export type LanguageDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** LanguageFieldsPermissions create input */
export type LanguageFieldsPermissions = {
  airtableId?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['Boolean']>;
  isoCode?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type LanguageFilter = {
  AND?: Maybe<Array<LanguageFilter>>;
  OR?: Maybe<Array<LanguageFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  airtableId?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  isoCode?: Maybe<StringPredicate>;
  languageCountry?: Maybe<LanguageCountryRelationFilter>;
  name?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type LanguageGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: LanguageGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type LanguageGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  airtableId?: Maybe<Array<GroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  id?: Maybe<Array<GroupByField>>;
  isoCode?: Maybe<Array<GroupByField>>;
  languageCountry?: Maybe<LanguageCountryGroupByQuery>;
  name?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

export type LanguageKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** LanguageListResponse output */
export type LanguageListResponse = {
  __typename?: 'LanguageListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<Language>;
};

/** LanguageManyResponse output */
export type LanguageManyResponse = {
  __typename?: 'LanguageManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<Language>;
};

/** No longer supported. Use `sort` instead. */
export enum LanguageOrderBy {
  AirtableIdAsc = 'airtableId_ASC',
  AirtableIdDesc = 'airtableId_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsoCodeAsc = 'isoCode_ASC',
  IsoCodeDesc = 'isoCode_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** Languages subscription payload */
export type LanguagePayload = {
  __typename?: 'LanguagePayload';
  mutation: MutationType;
  node: Maybe<Language>;
  previousValues: Maybe<Language>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type LanguageSort = {
  airtableId?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  isoCode?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
};

/** Languages subscription filter */
export type LanguageSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<LanguageFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** Languages update input */
export type LanguageUpdateByFilterInput = {
  airtableId?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  isoCode?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  name?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** Languages update input */
export type LanguageUpdateInput = {
  airtableId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  isoCode?: Maybe<Scalars['String']>;
  languageCountry?: Maybe<LanguagesLanguageCountryUpdateRelationInput>;
  name?: Maybe<Scalars['String']>;
};

export type Language_PermissionFilter = {
  AND?: Maybe<Array<Language_PermissionFilter>>;
  OR?: Maybe<Array<Language_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  airtableId?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  isoCode?: Maybe<StringPredicate>;
  languageCountry?: Maybe<LanguageCountry_PermissionRelationFilter>;
  name?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

/** Languages relation input */
export type LanguagesLanguageCountryManyRelationInput = {
  connect?: Maybe<Array<LanguageCountryKeyFilter>>;
};

/** Languages relation input */
export type LanguagesLanguageCountryRelationInput = {
  connect?: Maybe<Array<LanguageCountryKeyFilter>>;
  create?: Maybe<Array<Maybe<IdLanguage_LanguageCountryCreateInput>>>;
};

/** Languages relation input */
export type LanguagesLanguageCountryUpdateRelationInput = {
  connect?: Maybe<Array<LanguageCountryKeyFilter>>;
  create?: Maybe<Array<Maybe<IdLanguage_LanguageCountryCreateInput>>>;
  disconnect?: Maybe<Array<LanguageCountryKeyFilter>>;
  reconnect?: Maybe<Array<LanguageCountryKeyFilter>>;
  update?: Maybe<Array<Maybe<IdLanguage_LanguageCountryUpdateInput>>>;
};

export type LocateFunctionArguments = {
  pos?: Maybe<Scalars['Int']>;
  str: Scalars['String'];
};

/** LoginResponse */
export type LoginResponse = {
  __typename?: 'LoginResponse';
  auth: Maybe<Auth>;
  success: Maybe<Scalars['Boolean']>;
  workspaces: Maybe<Array<WorkspaceInfo>>;
};

/** Brand create input from logo */
export type Logo_BrandCreateInput = {
  instagram?: Maybe<Scalars['String']>;
  logo?: Maybe<BrandLogoRelationInput>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

/** Brand update input from logo */
export type Logo_BrandUpdateInput = {
  data: BrandUpdateInput;
  filter?: Maybe<BrandKeyFilter>;
};

export type MartialArt = {
  __typename?: 'MartialArt';
  _description: Maybe<Scalars['String']>;
  achievementsMartialArt: Maybe<AchievementListResponse>;
  attachments: Maybe<File>;
  competitionId: Maybe<CompetitionListResponse>;
  countryOrigin: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  martialArtsAirtableId: Maybe<Scalars['String']>;
  martialArtsSchool: Maybe<SchoolMartialArtListResponse>;
  name: Maybe<Scalars['String']>;
  rankMartialArt: Maybe<RankListResponse>;
  scheduleMartialArt: Maybe<ScheduleListResponse>;
  schoolsAirtableId: Maybe<Scalars['String']>;
  status: Maybe<Scalars['String']>;
  type: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
  wikipedia: Maybe<Scalars['String']>;
};

export type MartialArtAchievementsMartialArtArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<AchievementFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<AchievementGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<AchievementOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<AchievementSort>>;
};

export type MartialArtCompetitionIdArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<CompetitionFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<CompetitionGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<CompetitionOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<CompetitionSort>>;
};

export type MartialArtMartialArtsSchoolArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<SchoolMartialArtFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<SchoolMartialArtGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<SchoolMartialArtOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<SchoolMartialArtSort>>;
};

export type MartialArtRankMartialArtArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<RankFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<RankGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<RankOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<RankSort>>;
};

export type MartialArtScheduleMartialArtArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ScheduleFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ScheduleGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ScheduleOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ScheduleSort>>;
};

/** MartialArt relation input */
export type MartialArtAchievementsMartialArtManyRelationInput = {
  connect?: Maybe<Array<AchievementKeyFilter>>;
};

/** MartialArt relation input */
export type MartialArtAchievementsMartialArtRelationInput = {
  connect?: Maybe<Array<AchievementKeyFilter>>;
  create?: Maybe<Array<Maybe<MartialArt_AchievementCreateInput>>>;
};

/** MartialArt relation input */
export type MartialArtAchievementsMartialArtUpdateRelationInput = {
  connect?: Maybe<Array<AchievementKeyFilter>>;
  create?: Maybe<Array<Maybe<MartialArt_AchievementCreateInput>>>;
  disconnect?: Maybe<Array<AchievementKeyFilter>>;
  reconnect?: Maybe<Array<AchievementKeyFilter>>;
  update?: Maybe<Array<Maybe<MartialArt_AchievementUpdateInput>>>;
};

/** MartialArt relation input */
export type MartialArtAttachmentsManyRelationInput = {
  connect?: Maybe<FileKeyFilter>;
};

/** MartialArt relation input */
export type MartialArtAttachmentsRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<MartialArts_Attachments_FileCreateInput>;
};

/** MartialArt relation input */
export type MartialArtAttachmentsUpdateRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<MartialArts_Attachments_FileCreateInput>;
  disconnect?: Maybe<FileKeyFilter>;
  reconnect?: Maybe<FileKeyFilter>;
  update?: Maybe<MartialArts_Attachments_FileUpdateInput>;
};

/** MartialArt relation input */
export type MartialArtCompetitionIdManyRelationInput = {
  connect?: Maybe<Array<CompetitionKeyFilter>>;
};

/** MartialArt relation input */
export type MartialArtCompetitionIdRelationInput = {
  connect?: Maybe<Array<CompetitionKeyFilter>>;
  create?: Maybe<Array<Maybe<MartialArt_CompetitionCreateInput>>>;
};

/** MartialArt relation input */
export type MartialArtCompetitionIdUpdateRelationInput = {
  connect?: Maybe<Array<CompetitionKeyFilter>>;
  create?: Maybe<Array<Maybe<MartialArt_CompetitionCreateInput>>>;
  disconnect?: Maybe<Array<CompetitionKeyFilter>>;
  reconnect?: Maybe<Array<CompetitionKeyFilter>>;
  update?: Maybe<Array<Maybe<MartialArt_CompetitionUpdateInput>>>;
};

/** MartialArt create input */
export type MartialArtCreateInput = {
  achievementsMartialArt?: Maybe<MartialArtAchievementsMartialArtRelationInput>;
  attachments?: Maybe<MartialArtAttachmentsRelationInput>;
  competitionId?: Maybe<MartialArtCompetitionIdRelationInput>;
  countryOrigin?: Maybe<Scalars['String']>;
  martialArtsAirtableId?: Maybe<Scalars['String']>;
  martialArtsSchool?: Maybe<MartialArtMartialArtsSchoolRelationInput>;
  name: Scalars['String'];
  rankMartialArt?: Maybe<MartialArtRankMartialArtRelationInput>;
  scheduleMartialArt?: Maybe<MartialArtScheduleMartialArtRelationInput>;
  schoolsAirtableId?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
};

/** MartialArt create many input */
export type MartialArtCreateManyInput = {
  achievementsMartialArt?: Maybe<MartialArtAchievementsMartialArtManyRelationInput>;
  attachments?: Maybe<MartialArtAttachmentsManyRelationInput>;
  competitionId?: Maybe<MartialArtCompetitionIdManyRelationInput>;
  countryOrigin?: Maybe<Scalars['String']>;
  martialArtsAirtableId?: Maybe<Scalars['String']>;
  martialArtsSchool?: Maybe<MartialArtMartialArtsSchoolManyRelationInput>;
  name: Scalars['String'];
  rankMartialArt?: Maybe<MartialArtRankMartialArtManyRelationInput>;
  scheduleMartialArt?: Maybe<MartialArtScheduleMartialArtManyRelationInput>;
  schoolsAirtableId?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
};

/** MartialArt delete input */
export type MartialArtDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** MartialArtFieldsPermissions create input */
export type MartialArtFieldsPermissions = {
  countryOrigin?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['Boolean']>;
  martialArtsAirtableId?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['Boolean']>;
  schoolsAirtableId?: Maybe<Scalars['Boolean']>;
  status?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
  wikipedia?: Maybe<Scalars['Boolean']>;
};

export type MartialArtFilter = {
  AND?: Maybe<Array<MartialArtFilter>>;
  OR?: Maybe<Array<MartialArtFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  achievementsMartialArt?: Maybe<AchievementRelationFilter>;
  attachments?: Maybe<FileFilter>;
  competitionId?: Maybe<CompetitionRelationFilter>;
  countryOrigin?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  martialArtsAirtableId?: Maybe<StringPredicate>;
  martialArtsSchool?: Maybe<SchoolMartialArtRelationFilter>;
  name?: Maybe<StringPredicate>;
  rankMartialArt?: Maybe<RankRelationFilter>;
  scheduleMartialArt?: Maybe<ScheduleRelationFilter>;
  schoolsAirtableId?: Maybe<StringPredicate>;
  status?: Maybe<StringPredicate>;
  type?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
  wikipedia?: Maybe<StringPredicate>;
};

export type MartialArtGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: MartialArtGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type MartialArtGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  achievementsMartialArt?: Maybe<AchievementGroupByQuery>;
  attachments?: Maybe<FileGroupByQuery>;
  competitionId?: Maybe<CompetitionGroupByQuery>;
  countryOrigin?: Maybe<Array<GroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  id?: Maybe<Array<GroupByField>>;
  martialArtsAirtableId?: Maybe<Array<GroupByField>>;
  martialArtsSchool?: Maybe<SchoolMartialArtGroupByQuery>;
  name?: Maybe<Array<GroupByField>>;
  rankMartialArt?: Maybe<RankGroupByQuery>;
  scheduleMartialArt?: Maybe<ScheduleGroupByQuery>;
  schoolsAirtableId?: Maybe<Array<GroupByField>>;
  status?: Maybe<Array<GroupByField>>;
  type?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
  wikipedia?: Maybe<Array<GroupByField>>;
};

export type MartialArtKeyFilter = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
};

/** MartialArtListResponse output */
export type MartialArtListResponse = {
  __typename?: 'MartialArtListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<MartialArt>;
};

/** MartialArtManyResponse output */
export type MartialArtManyResponse = {
  __typename?: 'MartialArtManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<MartialArt>;
};

/** MartialArt relation input */
export type MartialArtMartialArtsSchoolManyRelationInput = {
  connect?: Maybe<Array<SchoolMartialArtKeyFilter>>;
};

/** MartialArt relation input */
export type MartialArtMartialArtsSchoolRelationInput = {
  connect?: Maybe<Array<SchoolMartialArtKeyFilter>>;
  create?: Maybe<Array<Maybe<IdMartialArt_SchoolMartialArtCreateInput>>>;
};

/** MartialArt relation input */
export type MartialArtMartialArtsSchoolUpdateRelationInput = {
  connect?: Maybe<Array<SchoolMartialArtKeyFilter>>;
  create?: Maybe<Array<Maybe<IdMartialArt_SchoolMartialArtCreateInput>>>;
  disconnect?: Maybe<Array<SchoolMartialArtKeyFilter>>;
  reconnect?: Maybe<Array<SchoolMartialArtKeyFilter>>;
  update?: Maybe<Array<Maybe<IdMartialArt_SchoolMartialArtUpdateInput>>>;
};

/** No longer supported. Use `sort` instead. */
export enum MartialArtOrderBy {
  CountryOriginAsc = 'countryOrigin_ASC',
  CountryOriginDesc = 'countryOrigin_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  MartialArtsAirtableIdAsc = 'martialArtsAirtableId_ASC',
  MartialArtsAirtableIdDesc = 'martialArtsAirtableId_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  SchoolsAirtableIdAsc = 'schoolsAirtableId_ASC',
  SchoolsAirtableIdDesc = 'schoolsAirtableId_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WikipediaAsc = 'wikipedia_ASC',
  WikipediaDesc = 'wikipedia_DESC',
}

/** MartialArt subscription payload */
export type MartialArtPayload = {
  __typename?: 'MartialArtPayload';
  mutation: MutationType;
  node: Maybe<MartialArt>;
  previousValues: Maybe<MartialArt>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** MartialArt relation input */
export type MartialArtRankMartialArtManyRelationInput = {
  connect?: Maybe<Array<RankKeyFilter>>;
};

/** MartialArt relation input */
export type MartialArtRankMartialArtRelationInput = {
  connect?: Maybe<Array<RankKeyFilter>>;
  create?: Maybe<Array<Maybe<MartialArt_RankCreateInput>>>;
};

/** MartialArt relation input */
export type MartialArtRankMartialArtUpdateRelationInput = {
  connect?: Maybe<Array<RankKeyFilter>>;
  create?: Maybe<Array<Maybe<MartialArt_RankCreateInput>>>;
  disconnect?: Maybe<Array<RankKeyFilter>>;
  reconnect?: Maybe<Array<RankKeyFilter>>;
  update?: Maybe<Array<Maybe<MartialArt_RankUpdateInput>>>;
};

export type MartialArtRelationFilter = {
  every?: Maybe<MartialArtFilter>;
  none?: Maybe<MartialArtFilter>;
  some?: Maybe<MartialArtFilter>;
};

/** MartialArt relation input */
export type MartialArtScheduleMartialArtManyRelationInput = {
  connect?: Maybe<Array<ScheduleKeyFilter>>;
};

/** MartialArt relation input */
export type MartialArtScheduleMartialArtRelationInput = {
  connect?: Maybe<Array<ScheduleKeyFilter>>;
  create?: Maybe<Array<Maybe<IdMartialArt_ScheduleCreateInput>>>;
};

/** MartialArt relation input */
export type MartialArtScheduleMartialArtUpdateRelationInput = {
  connect?: Maybe<Array<ScheduleKeyFilter>>;
  create?: Maybe<Array<Maybe<IdMartialArt_ScheduleCreateInput>>>;
  disconnect?: Maybe<Array<ScheduleKeyFilter>>;
  reconnect?: Maybe<Array<ScheduleKeyFilter>>;
  update?: Maybe<Array<Maybe<IdMartialArt_ScheduleUpdateInput>>>;
};

export type MartialArtSort = {
  attachments?: Maybe<FileSort>;
  countryOrigin?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  martialArtsAirtableId?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  schoolsAirtableId?: Maybe<SortOrder>;
  status?: Maybe<SortOrder>;
  type?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  wikipedia?: Maybe<SortOrder>;
};

/** MartialArt subscription filter */
export type MartialArtSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<MartialArtFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** MartialArt update input */
export type MartialArtUpdateByFilterInput = {
  countryOrigin?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  martialArtsAirtableId?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  name?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  schoolsAirtableId?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  status?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  type?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  wikipedia?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** MartialArt update input */
export type MartialArtUpdateInput = {
  achievementsMartialArt?: Maybe<MartialArtAchievementsMartialArtUpdateRelationInput>;
  attachments?: Maybe<MartialArtAttachmentsUpdateRelationInput>;
  competitionId?: Maybe<MartialArtCompetitionIdUpdateRelationInput>;
  countryOrigin?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  martialArtsAirtableId?: Maybe<Scalars['String']>;
  martialArtsSchool?: Maybe<MartialArtMartialArtsSchoolUpdateRelationInput>;
  name?: Maybe<Scalars['String']>;
  rankMartialArt?: Maybe<MartialArtRankMartialArtUpdateRelationInput>;
  scheduleMartialArt?: Maybe<MartialArtScheduleMartialArtUpdateRelationInput>;
  schoolsAirtableId?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
};

/** Achievements create input from martialArt */
export type MartialArt_AchievementCreateInput = {
  ageDivision?: Maybe<Scalars['String']>;
  beltLevel?: Maybe<Scalars['String']>;
  championship: Scalars['String'];
  gender?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  martialArt?: Maybe<AchievementsMartialArtRelationInput>;
  month?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  profile?: Maybe<AchievementsProfileRelationInput>;
  rankResult?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  year?: Maybe<Scalars['Int']>;
};

/** Achievements update input from martialArt */
export type MartialArt_AchievementUpdateInput = {
  data: AchievementUpdateInput;
  filter?: Maybe<AchievementKeyFilter>;
};

/** Competition create input from martialArt */
export type MartialArt_CompetitionCreateInput = {
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  cover?: Maybe<CompetitionCoverRelationInput>;
  date?: Maybe<Scalars['DateTime']>;
  email?: Maybe<Scalars['String']>;
  eventWebsite?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  information?: Maybe<Scalars['String']>;
  instagram?: Maybe<Scalars['String']>;
  martialArt?: Maybe<CompetitionMartialArtRelationInput>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  registrationLink?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Competition update input from martialArt */
export type MartialArt_CompetitionUpdateInput = {
  data: CompetitionUpdateInput;
  filter?: Maybe<CompetitionKeyFilter>;
};

export type MartialArt_PermissionFilter = {
  AND?: Maybe<Array<MartialArt_PermissionFilter>>;
  OR?: Maybe<Array<MartialArt_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  achievementsMartialArt?: Maybe<Achievement_PermissionRelationFilter>;
  attachments?: Maybe<File_PermissionFilter>;
  competitionId?: Maybe<Competition_PermissionRelationFilter>;
  countryOrigin?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  martialArtsAirtableId?: Maybe<StringPredicate>;
  martialArtsSchool?: Maybe<SchoolMartialArt_PermissionRelationFilter>;
  name?: Maybe<StringPredicate>;
  rankMartialArt?: Maybe<Rank_PermissionRelationFilter>;
  scheduleMartialArt?: Maybe<Schedule_PermissionRelationFilter>;
  schoolsAirtableId?: Maybe<StringPredicate>;
  status?: Maybe<StringPredicate>;
  type?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
  wikipedia?: Maybe<StringPredicate>;
};

export type MartialArt_PermissionRelationFilter = {
  every?: Maybe<MartialArt_PermissionFilter>;
  none?: Maybe<MartialArt_PermissionFilter>;
  some?: Maybe<MartialArt_PermissionFilter>;
};

/** Rank create input from martialArt */
export type MartialArt_RankCreateInput = {
  airtableId?: Maybe<Scalars['String']>;
  degree?: Maybe<Scalars['String']>;
  level?: Maybe<Scalars['String']>;
  martialArt?: Maybe<RankMartialArtRelationInput>;
  order?: Maybe<Scalars['Int']>;
  rankImageW64H8?: Maybe<RankRankImageW64H8RelationInput>;
  rankImageW80H8?: Maybe<RankRankImageW80H8RelationInput>;
  rankImageW375H24?: Maybe<RankRankImageW375H24RelationInput>;
  rankIssued?: Maybe<RankRankIssuedRelationInput>;
};

/** Rank update input from martialArt */
export type MartialArt_RankUpdateInput = {
  data: RankUpdateInput;
  filter?: Maybe<RankKeyFilter>;
};

/** MartialArt create input from martialArtsSchool */
export type MartialArtsSchool_MartialArtCreateInput = {
  achievementsMartialArt?: Maybe<MartialArtAchievementsMartialArtRelationInput>;
  attachments?: Maybe<MartialArtAttachmentsRelationInput>;
  competitionId?: Maybe<MartialArtCompetitionIdRelationInput>;
  countryOrigin?: Maybe<Scalars['String']>;
  martialArtsAirtableId?: Maybe<Scalars['String']>;
  martialArtsSchool?: Maybe<MartialArtMartialArtsSchoolRelationInput>;
  name: Scalars['String'];
  rankMartialArt?: Maybe<MartialArtRankMartialArtRelationInput>;
  scheduleMartialArt?: Maybe<MartialArtScheduleMartialArtRelationInput>;
  schoolsAirtableId?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
};

/** MartialArt update input from martialArtsSchool */
export type MartialArtsSchool_MartialArtUpdateInput = {
  achievementsMartialArt?: Maybe<MartialArtAchievementsMartialArtUpdateRelationInput>;
  attachments?: Maybe<MartialArtAttachmentsUpdateRelationInput>;
  competitionId?: Maybe<MartialArtCompetitionIdUpdateRelationInput>;
  countryOrigin?: Maybe<Scalars['String']>;
  martialArtsAirtableId?: Maybe<Scalars['String']>;
  martialArtsSchool?: Maybe<MartialArtMartialArtsSchoolUpdateRelationInput>;
  name?: Maybe<Scalars['String']>;
  rankMartialArt?: Maybe<MartialArtRankMartialArtUpdateRelationInput>;
  scheduleMartialArt?: Maybe<MartialArtScheduleMartialArtUpdateRelationInput>;
  schoolsAirtableId?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
};

/** Files create input from martialArts_attachments */
export type MartialArts_Attachments_FileCreateInput = {
  brand_logo?: Maybe<FilesBrand_LogoRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8RelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24RelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8RelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8RelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24RelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailRelationInput>;
  video_video?: Maybe<FilesVideo_VideoRelationInput>;
};

/** Files update input from martialArts_attachments */
export type MartialArts_Attachments_FileUpdateInput = {
  brand_logo?: Maybe<FilesBrand_LogoUpdateRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverUpdateRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsUpdateRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsUpdateRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoUpdateRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallUpdateRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8UpdateRelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24UpdateRelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoUpdateRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8UpdateRelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8UpdateRelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24UpdateRelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoUpdateRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarUpdateRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoUpdateRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarUpdateRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewUpdateRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailUpdateRelationInput>;
  video_video?: Maybe<FilesVideo_VideoUpdateRelationInput>;
};

/** RankIssued create input from masterPhoto */
export type MasterPhoto_RankIssuedCreateInput = {
  displayName?: Maybe<RankIssuedDisplayNameRelationInput>;
  graduated?: Maybe<Scalars['Date']>;
  master?: Maybe<RankIssuedMasterRelationInput>;
  masterPhoto?: Maybe<RankIssuedMasterPhotoRelationInput>;
  rank?: Maybe<RankIssuedRankRelationInput>;
  school?: Maybe<RankIssuedSchoolRelationInput>;
  verified?: Maybe<Scalars['Boolean']>;
};

/** RankIssued update input from masterPhoto */
export type MasterPhoto_RankIssuedUpdateInput = {
  data: RankIssuedUpdateInput;
  filter?: Maybe<RankIssuedKeyFilter>;
};

/** Profile create input from masterProfile */
export type MasterProfile_ProfileCreateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8RelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24RelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Profile update input from masterProfile */
export type MasterProfile_ProfileUpdateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsUpdateRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinUpdateRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassUpdateRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationUpdateRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileUpdateRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoUpdateRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolUpdateRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationUpdateRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamUpdateRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileUpdateRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallUpdateRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8UpdateRelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24UpdateRelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileUpdateRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountUpdateRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkUpdateRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationUpdateRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** RankIssued create input from master */
export type Master_RankIssuedCreateInput = {
  displayName?: Maybe<RankIssuedDisplayNameRelationInput>;
  graduated?: Maybe<Scalars['Date']>;
  master?: Maybe<RankIssuedMasterRelationInput>;
  masterPhoto?: Maybe<RankIssuedMasterPhotoRelationInput>;
  rank?: Maybe<RankIssuedRankRelationInput>;
  school?: Maybe<RankIssuedSchoolRelationInput>;
  verified?: Maybe<Scalars['Boolean']>;
};

/** RankIssued update input from master */
export type Master_RankIssuedUpdateInput = {
  data: RankIssuedUpdateInput;
  filter?: Maybe<RankIssuedKeyFilter>;
};

/** MissingRelation */
export type MissingRelation = {
  __typename?: 'MissingRelation';
  table: Scalars['String'];
};

/** MissingRelation Field Attributes */
export type MissingRelationFieldTypeAttributes = {
  __typename?: 'MissingRelationFieldTypeAttributes';
  missingTable: Scalars['String'];
};

export type Mutation = {
  __typename?: 'Mutation';
  achievementCreate: Achievement;
  achievementCreateMany: AchievementManyResponse;
  achievementDelete: Maybe<SuccessResponse>;
  achievementDeleteByFilter: Maybe<SuccessResponse>;
  achievementDestroy: Maybe<SuccessResponse>;
  achievementDestroyByFilter: Maybe<SuccessResponse>;
  achievementRestore: Achievement;
  achievementUpdate: Achievement;
  achievementUpdateByFilter: AchievementManyResponse;
  apiTokenCreate: ApiTokenResponse;
  apiTokenDelete: Maybe<SuccessResponse>;
  apiTokenDeleteByFilter: Maybe<SuccessResponse>;
  apiTokenDestroy: Maybe<SuccessResponse>;
  apiTokenDestroyByFilter: Maybe<SuccessResponse>;
  apiTokenRestore: ApiToken;
  apiTokenUpdate: ApiToken;
  apiTokenUpdateByFilter: ApiTokenManyResponse;
  /** @deprecated No longer supported. Use `system.applicationDelete` instead. */
  applicationDelete: Maybe<SuccessResponse>;
  /** @deprecated No longer supported. Use `system.applicationInstall` instead. */
  applicationInstall: Maybe<Application>;
  /** @deprecated No longer supported. Use `system.applicationUpdate` instead. */
  applicationUpdate: Maybe<Application>;
  authenticationProfileCreate: AuthenticationProfile;
  authenticationProfileCreateMany: AuthenticationProfileManyResponse;
  authenticationProfileDelete: Maybe<SuccessResponse>;
  authenticationProfileDeleteByFilter: Maybe<SuccessResponse>;
  authenticationProfileDestroy: Maybe<SuccessResponse>;
  authenticationProfileDestroyByFilter: Maybe<SuccessResponse>;
  authenticationProfileRestore: AuthenticationProfile;
  authenticationProfileUpdate: AuthenticationProfile;
  authenticationProfileUpdateByFilter: AuthenticationProfileManyResponse;
  authenticationSettingsUpdate: AuthenticationSetting;
  /** @deprecated No longer supported. Use `system.memberPaymentDetailsUpdate, system.organizationPaymentDetailsUpdate or system.workspacePaymentDetailsUpdate` instead. */
  billingDetailsUpdate: Maybe<BillingDetailsResponse>;
  /** @deprecated No longer supported. Use `system.billingPlanUpdate` instead. */
  billingPlanUpdate: Maybe<BillingCurrentPlanResponse>;
  brandCreate: Brand;
  brandCreateMany: BrandManyResponse;
  brandDelete: Maybe<SuccessResponse>;
  brandDeleteByFilter: Maybe<SuccessResponse>;
  brandDestroy: Maybe<SuccessResponse>;
  brandDestroyByFilter: Maybe<SuccessResponse>;
  brandRestore: Brand;
  brandUpdate: Brand;
  brandUpdateByFilter: BrandManyResponse;
  checkinCreate: Checkin;
  checkinCreateMany: CheckinManyResponse;
  checkinDelete: Maybe<SuccessResponse>;
  checkinDeleteByFilter: Maybe<SuccessResponse>;
  checkinDestroy: Maybe<SuccessResponse>;
  checkinDestroyByFilter: Maybe<SuccessResponse>;
  checkinRestore: Checkin;
  checkinUpdate: Checkin;
  checkinUpdateByFilter: CheckinManyResponse;
  ciCdMigrationCreate: CiCdMigration;
  ciCdMigrationCreateMany: CiCdMigrationManyResponse;
  ciCdMigrationDelete: Maybe<SuccessResponse>;
  ciCdMigrationDeleteByFilter: Maybe<SuccessResponse>;
  ciCdMigrationDestroy: Maybe<SuccessResponse>;
  ciCdMigrationDestroyByFilter: Maybe<SuccessResponse>;
  ciCdMigrationRestore: CiCdMigration;
  ciCdMigrationUpdate: CiCdMigration;
  ciCdMigrationUpdateByFilter: CiCdMigrationManyResponse;
  competitionCreate: Competition;
  competitionCreateMany: CompetitionManyResponse;
  competitionDelete: Maybe<SuccessResponse>;
  competitionDeleteByFilter: Maybe<SuccessResponse>;
  competitionDestroy: Maybe<SuccessResponse>;
  competitionDestroyByFilter: Maybe<SuccessResponse>;
  competitionRestore: Competition;
  competitionUpdate: Competition;
  competitionUpdateByFilter: CompetitionManyResponse;
  countryCreate: Country;
  countryCreateMany: CountryManyResponse;
  countryDelete: Maybe<SuccessResponse>;
  countryDeleteByFilter: Maybe<SuccessResponse>;
  countryDestroy: Maybe<SuccessResponse>;
  countryDestroyByFilter: Maybe<SuccessResponse>;
  countryRestore: Country;
  countryUpdate: Country;
  countryUpdateByFilter: CountryManyResponse;
  createCheckoutSessionResolver: CreateCheckoutSessionResponse;
  createCustomerResolver: Maybe<CreateCustomerResolverResponse>;
  createPortalResolver: PortalCreateResponse;
  createPrivateClassResolver: PrivateClassResolverResponse;
  createProductResolver: CreateProductResolverResponse;
  createSchoolStripeAccountResolver: SchoolStripeAccount;
  createStripeAccountResolver: Maybe<CreateStripeAccountResponse>;
  customerCreate: Customer;
  customerCreateMany: CustomerManyResponse;
  customerDelete: Maybe<SuccessResponse>;
  customerDeleteByFilter: Maybe<SuccessResponse>;
  customerDestroy: Maybe<SuccessResponse>;
  customerDestroyByFilter: Maybe<SuccessResponse>;
  customerRestore: Customer;
  customerUpdate: Customer;
  customerUpdateByFilter: CustomerManyResponse;
  /** @deprecated No longer supported. Use `system.deploy` instead. */
  deploy: Maybe<Scalars['Boolean']>;
  discountCreate: Discount;
  discountCreateMany: DiscountManyResponse;
  discountDelete: Maybe<SuccessResponse>;
  discountDeleteByFilter: Maybe<SuccessResponse>;
  discountDestroy: Maybe<SuccessResponse>;
  discountDestroyByFilter: Maybe<SuccessResponse>;
  discountRestore: Discount;
  discountUpdate: Discount;
  discountUpdateByFilter: DiscountManyResponse;
  emailTemplateCreate: EmailTemplate;
  emailTemplateCreateMany: EmailTemplateManyResponse;
  emailTemplateDelete: Maybe<SuccessResponse>;
  emailTemplateDeleteByFilter: Maybe<SuccessResponse>;
  emailTemplateDestroy: Maybe<SuccessResponse>;
  emailTemplateDestroyByFilter: Maybe<SuccessResponse>;
  emailTemplateRestore: EmailTemplate;
  emailTemplateUpdate: EmailTemplate;
  emailTemplateUpdateByFilter: EmailTemplateManyResponse;
  environmentVariableCreate: EnvironmentVariable;
  environmentVariableCreateMany: EnvironmentVariableManyResponse;
  environmentVariableDelete: Maybe<SuccessResponse>;
  environmentVariableDeleteByFilter: Maybe<SuccessResponse>;
  environmentVariableDestroy: Maybe<SuccessResponse>;
  environmentVariableDestroyByFilter: Maybe<SuccessResponse>;
  environmentVariableRestore: EnvironmentVariable;
  environmentVariableUpdate: EnvironmentVariable;
  environmentVariableUpdateByFilter: EnvironmentVariableManyResponse;
  /** @deprecated No longer supported. Use `system.fieldCreate` instead. */
  fieldCreate: TableField;
  /** @deprecated No longer supported. Use `system.fieldDelete` instead. */
  fieldDelete: SuccessResponse;
  /** @deprecated No longer supported. Use `system.fieldUpdate` instead. */
  fieldUpdate: TableField;
  /** @deprecated No longer supported. Use `system.fieldUpdatePosition` instead. */
  fieldUpdatePosition: SuccessResponse;
  fileCreate: File;
  fileCreateMany: FileManyResponse;
  fileDelete: Maybe<SuccessResponse>;
  fileDeleteByFilter: Maybe<SuccessResponse>;
  fileDestroy: Maybe<SuccessResponse>;
  fileDestroyByFilter: Maybe<SuccessResponse>;
  fileRestore: File;
  fileUpdate: File;
  fileUpdateByFilter: FileManyResponse;
  generateAccountLinkResolver: Maybe<GenerateAccountLinkResponse>;
  groupalClassCreate: GroupalClass;
  groupalClassCreateMany: GroupalClassManyResponse;
  groupalClassDelete: Maybe<SuccessResponse>;
  groupalClassDeleteByFilter: Maybe<SuccessResponse>;
  groupalClassDestroy: Maybe<SuccessResponse>;
  groupalClassDestroyByFilter: Maybe<SuccessResponse>;
  groupalClassRestore: GroupalClass;
  groupalClassUpdate: GroupalClass;
  groupalClassUpdateByFilter: GroupalClassManyResponse;
  indexCreate: TableIndex;
  indexDelete: Maybe<SuccessResponse>;
  indexUpdate: TableIndex;
  /** @deprecated No longer supported. Use `system.invoke` instead. */
  invoke: Maybe<InvokeFunctionResponse>;
  languageCountryCreate: LanguageCountry;
  languageCountryCreateMany: LanguageCountryManyResponse;
  languageCountryDelete: Maybe<SuccessResponse>;
  languageCountryDeleteByFilter: Maybe<SuccessResponse>;
  languageCountryDestroy: Maybe<SuccessResponse>;
  languageCountryDestroyByFilter: Maybe<SuccessResponse>;
  languageCountryRestore: LanguageCountry;
  languageCountryUpdate: LanguageCountry;
  languageCreate: Language;
  languageCreateMany: LanguageManyResponse;
  languageDelete: Maybe<SuccessResponse>;
  languageDeleteByFilter: Maybe<SuccessResponse>;
  languageDestroy: Maybe<SuccessResponse>;
  languageDestroyByFilter: Maybe<SuccessResponse>;
  languageRestore: Language;
  languageUpdate: Language;
  languageUpdateByFilter: LanguageManyResponse;
  martialArtCreate: MartialArt;
  martialArtCreateMany: MartialArtManyResponse;
  martialArtDelete: Maybe<SuccessResponse>;
  martialArtDeleteByFilter: Maybe<SuccessResponse>;
  martialArtDestroy: Maybe<SuccessResponse>;
  martialArtDestroyByFilter: Maybe<SuccessResponse>;
  martialArtRestore: MartialArt;
  martialArtUpdate: MartialArt;
  martialArtUpdateByFilter: MartialArtManyResponse;
  planCategoryCreate: PlanCategory;
  planCategoryCreateMany: PlanCategoryManyResponse;
  planCategoryDelete: Maybe<SuccessResponse>;
  planCategoryDeleteByFilter: Maybe<SuccessResponse>;
  planCategoryDestroy: Maybe<SuccessResponse>;
  planCategoryDestroyByFilter: Maybe<SuccessResponse>;
  planCategoryRestore: PlanCategory;
  planCategoryUpdate: PlanCategory;
  planCategoryUpdateByFilter: PlanCategoryManyResponse;
  planCreate: Plan;
  planCreateMany: PlanManyResponse;
  planDelete: Maybe<SuccessResponse>;
  planDeleteByFilter: Maybe<SuccessResponse>;
  planDestroy: Maybe<SuccessResponse>;
  planDestroyByFilter: Maybe<SuccessResponse>;
  planRestore: Plan;
  planUpdate: Plan;
  planUpdateByFilter: PlanManyResponse;
  preSignupCreate: PreSignup;
  preSignupCreateMany: PreSignupManyResponse;
  preSignupDelete: Maybe<SuccessResponse>;
  preSignupDeleteByFilter: Maybe<SuccessResponse>;
  preSignupDestroy: Maybe<SuccessResponse>;
  preSignupDestroyByFilter: Maybe<SuccessResponse>;
  preSignupRestore: PreSignup;
  preSignupUpdate: PreSignup;
  preSignupUpdateByFilter: PreSignupManyResponse;
  /** @deprecated No longer supported. Use `system.prepareDeploy` instead. */
  prepareDeploy: DeployDataResponse;
  privateClassCheckout: PrivateClassCheckoutResponse;
  privateClassCreate: PrivateClass;
  privateClassCreateMany: PrivateClassManyResponse;
  privateClassDelete: Maybe<SuccessResponse>;
  privateClassDeleteByFilter: Maybe<SuccessResponse>;
  privateClassDestroy: Maybe<SuccessResponse>;
  privateClassDestroyByFilter: Maybe<SuccessResponse>;
  privateClassPurchaseCreate: PrivateClassPurchase;
  privateClassPurchaseCreateMany: PrivateClassPurchaseManyResponse;
  privateClassPurchaseDelete: Maybe<SuccessResponse>;
  privateClassPurchaseDeleteByFilter: Maybe<SuccessResponse>;
  privateClassPurchaseDestroy: Maybe<SuccessResponse>;
  privateClassPurchaseDestroyByFilter: Maybe<SuccessResponse>;
  privateClassPurchaseRestore: PrivateClassPurchase;
  privateClassPurchaseUpdate: PrivateClassPurchase;
  privateClassPurchaseUpdateByFilter: PrivateClassPurchaseManyResponse;
  privateClassRestore: PrivateClass;
  privateClassUpdate: PrivateClass;
  privateClassUpdateByFilter: PrivateClassManyResponse;
  productCategoryCreate: ProductCategory;
  productCategoryCreateMany: ProductCategoryManyResponse;
  productCategoryDelete: Maybe<SuccessResponse>;
  productCategoryDeleteByFilter: Maybe<SuccessResponse>;
  productCategoryDestroy: Maybe<SuccessResponse>;
  productCategoryDestroyByFilter: Maybe<SuccessResponse>;
  productCategoryRestore: ProductCategory;
  productCategoryUpdate: ProductCategory;
  productCategoryUpdateByFilter: ProductCategoryManyResponse;
  productCreate: Product;
  productCreateMany: ProductManyResponse;
  productDelete: Maybe<SuccessResponse>;
  productDeleteByFilter: Maybe<SuccessResponse>;
  productDestroy: Maybe<SuccessResponse>;
  productDestroyByFilter: Maybe<SuccessResponse>;
  productRestore: Product;
  productSubscriptionCreate: ProductSubscription;
  productSubscriptionCreateMany: ProductSubscriptionManyResponse;
  productSubscriptionDelete: Maybe<SuccessResponse>;
  productSubscriptionDeleteByFilter: Maybe<SuccessResponse>;
  productSubscriptionDestroy: Maybe<SuccessResponse>;
  productSubscriptionDestroyByFilter: Maybe<SuccessResponse>;
  productSubscriptionRestore: ProductSubscription;
  productSubscriptionUpdate: ProductSubscription;
  productSubscriptionUpdateByFilter: ProductSubscriptionManyResponse;
  productUpdate: Product;
  productUpdateByFilter: ProductManyResponse;
  profileCreate: Profile;
  profileCreateMany: ProfileManyResponse;
  profileDelete: Maybe<SuccessResponse>;
  profileDeleteByFilter: Maybe<SuccessResponse>;
  profileDestroy: Maybe<SuccessResponse>;
  profileDestroyByFilter: Maybe<SuccessResponse>;
  profileRestore: Profile;
  profileUpdate: Profile;
  profileUpdateByFilter: ProfileManyResponse;
  rankCreate: Rank;
  rankCreateMany: RankManyResponse;
  rankDelete: Maybe<SuccessResponse>;
  rankDeleteByFilter: Maybe<SuccessResponse>;
  rankDestroy: Maybe<SuccessResponse>;
  rankDestroyByFilter: Maybe<SuccessResponse>;
  rankIssuedCreate: RankIssued;
  rankIssuedCreateMany: RankIssuedManyResponse;
  rankIssuedDelete: Maybe<SuccessResponse>;
  rankIssuedDeleteByFilter: Maybe<SuccessResponse>;
  rankIssuedDestroy: Maybe<SuccessResponse>;
  rankIssuedDestroyByFilter: Maybe<SuccessResponse>;
  rankIssuedRestore: RankIssued;
  rankIssuedUpdate: RankIssued;
  rankIssuedUpdateByFilter: RankIssuedManyResponse;
  rankRestore: Rank;
  rankUpdate: Rank;
  rankUpdateByFilter: RankManyResponse;
  roleCreate: Role;
  roleCreateMany: RoleManyResponse;
  roleDelete: Maybe<SuccessResponse>;
  roleDeleteByFilter: Maybe<SuccessResponse>;
  roleDestroy: Maybe<SuccessResponse>;
  roleDestroyByFilter: Maybe<SuccessResponse>;
  roleRestore: Role;
  roleUpdate: Role;
  roleUpdateByFilter: RoleManyResponse;
  scheduleCreate: Schedule;
  scheduleCreateMany: ScheduleManyResponse;
  scheduleDelete: Maybe<SuccessResponse>;
  scheduleDeleteByFilter: Maybe<SuccessResponse>;
  scheduleDestroy: Maybe<SuccessResponse>;
  scheduleDestroyByFilter: Maybe<SuccessResponse>;
  scheduleRestore: Schedule;
  scheduleUpdate: Schedule;
  scheduleUpdateByFilter: ScheduleManyResponse;
  schoolCreate: School;
  schoolCreateMany: SchoolManyResponse;
  schoolDelete: Maybe<SuccessResponse>;
  schoolDeleteByFilter: Maybe<SuccessResponse>;
  schoolDestroy: Maybe<SuccessResponse>;
  schoolDestroyByFilter: Maybe<SuccessResponse>;
  schoolMartialArtCreate: SchoolMartialArt;
  schoolMartialArtCreateMany: SchoolMartialArtManyResponse;
  schoolMartialArtDelete: Maybe<SuccessResponse>;
  schoolMartialArtDeleteByFilter: Maybe<SuccessResponse>;
  schoolMartialArtDestroy: Maybe<SuccessResponse>;
  schoolMartialArtDestroyByFilter: Maybe<SuccessResponse>;
  schoolMartialArtRestore: SchoolMartialArt;
  schoolMartialArtUpdate: SchoolMartialArt;
  schoolProfileCreate: SchoolProfile;
  schoolProfileCreateMany: SchoolProfileManyResponse;
  schoolProfileDelete: Maybe<SuccessResponse>;
  schoolProfileDeleteByFilter: Maybe<SuccessResponse>;
  schoolProfileDestroy: Maybe<SuccessResponse>;
  schoolProfileDestroyByFilter: Maybe<SuccessResponse>;
  schoolProfileRestore: SchoolProfile;
  schoolProfileUpdate: SchoolProfile;
  schoolProfileUpdateByFilter: SchoolProfileManyResponse;
  schoolRestore: School;
  schoolStripeAccountCreate: SchoolStripeAccount;
  schoolStripeAccountCreateMany: SchoolStripeAccountManyResponse;
  schoolStripeAccountDelete: Maybe<SuccessResponse>;
  schoolStripeAccountDeleteByFilter: Maybe<SuccessResponse>;
  schoolStripeAccountDestroy: Maybe<SuccessResponse>;
  schoolStripeAccountDestroyByFilter: Maybe<SuccessResponse>;
  schoolStripeAccountRestore: SchoolStripeAccount;
  schoolStripeAccountUpdate: SchoolStripeAccount;
  schoolStripeAccountUpdateByFilter: SchoolStripeAccountManyResponse;
  schoolTeamCreate: SchoolTeam;
  schoolTeamCreateMany: SchoolTeamManyResponse;
  schoolTeamDelete: Maybe<SuccessResponse>;
  schoolTeamDeleteByFilter: Maybe<SuccessResponse>;
  schoolTeamDestroy: Maybe<SuccessResponse>;
  schoolTeamDestroyByFilter: Maybe<SuccessResponse>;
  schoolTeamRestore: SchoolTeam;
  schoolTeamUpdate: SchoolTeam;
  schoolUpdate: School;
  schoolUpdateByFilter: SchoolManyResponse;
  sendInvitationTo8base: Maybe<SuccessResponse>;
  settingsUpdate: Setting;
  shortLinkCreate: ShortLink;
  shortLinkCreateMany: ShortLinkManyResponse;
  shortLinkDelete: Maybe<SuccessResponse>;
  shortLinkDeleteByFilter: Maybe<SuccessResponse>;
  shortLinkDestroy: Maybe<SuccessResponse>;
  shortLinkDestroyByFilter: Maybe<SuccessResponse>;
  shortLinkRestore: ShortLink;
  shortLinkUpdate: ShortLink;
  shortLinkUpdateByFilter: ShortLinkManyResponse;
  shortUrlCreate: ShortUrl;
  shortUrlCreateMany: ShortUrlManyResponse;
  shortUrlDelete: Maybe<SuccessResponse>;
  shortUrlDeleteByFilter: Maybe<SuccessResponse>;
  shortUrlDestroy: Maybe<SuccessResponse>;
  shortUrlDestroyByFilter: Maybe<SuccessResponse>;
  shortUrlRestore: ShortUrl;
  shortUrlUpdate: ShortUrl;
  shortUrlUpdateByFilter: ShortUrlManyResponse;
  signUpCreate: SignUp;
  signUpCreateMany: SignUpManyResponse;
  signUpDelete: Maybe<SuccessResponse>;
  signUpDeleteByFilter: Maybe<SuccessResponse>;
  signUpDestroy: Maybe<SuccessResponse>;
  signUpDestroyByFilter: Maybe<SuccessResponse>;
  signUpRestore: SignUp;
  signUpUpdate: SignUp;
  signUpUpdateByFilter: SignUpManyResponse;
  stripeAccountCreate: StripeAccount;
  stripeAccountCreateMany: StripeAccountManyResponse;
  stripeAccountDelete: Maybe<SuccessResponse>;
  stripeAccountDeleteByFilter: Maybe<SuccessResponse>;
  stripeAccountDestroy: Maybe<SuccessResponse>;
  stripeAccountDestroyByFilter: Maybe<SuccessResponse>;
  stripeAccountRestore: StripeAccount;
  stripeAccountUpdate: StripeAccount;
  stripeAccountUpdateByFilter: StripeAccountManyResponse;
  system: Maybe<SystemMutation>;
  /** @deprecated No longer supported. Use `system.tableCreate` instead. */
  tableCreate: Table;
  /** @deprecated No longer supported. Use `system.tableDelete` instead. */
  tableDelete: SuccessResponse;
  /** @deprecated No longer supported. Use `system.tableUpdate` instead. */
  tableUpdate: Table;
  teamCreate: Team;
  teamCreateMany: TeamManyResponse;
  teamDelete: Maybe<SuccessResponse>;
  teamDeleteByFilter: Maybe<SuccessResponse>;
  teamDestroy: Maybe<SuccessResponse>;
  teamDestroyByFilter: Maybe<SuccessResponse>;
  teamMemberDelete: Maybe<SuccessResponse>;
  teamMemberDeleteByFilter: Maybe<SuccessResponse>;
  teamMemberDestroy: Maybe<SuccessResponse>;
  teamMemberDestroyByFilter: Maybe<SuccessResponse>;
  teamMemberRestore: TeamMember;
  teamMemberUpdate: TeamMember;
  teamMemberUpdateByFilter: TeamMemberManyResponse;
  teamProfileCreate: TeamProfile;
  teamProfileCreateMany: TeamProfileManyResponse;
  teamProfileDelete: Maybe<SuccessResponse>;
  teamProfileDeleteByFilter: Maybe<SuccessResponse>;
  teamProfileDestroy: Maybe<SuccessResponse>;
  teamProfileDestroyByFilter: Maybe<SuccessResponse>;
  teamProfileRestore: TeamProfile;
  teamProfileUpdate: TeamProfile;
  teamRestore: Team;
  teamUpdate: Team;
  teamUpdateByFilter: TeamManyResponse;
  textCreate: Text;
  textCreateMany: TextManyResponse;
  textDelete: Maybe<SuccessResponse>;
  textDeleteByFilter: Maybe<SuccessResponse>;
  textDestroy: Maybe<SuccessResponse>;
  textDestroyByFilter: Maybe<SuccessResponse>;
  textRestore: Text;
  textUpdate: Text;
  textUpdateByFilter: TextManyResponse;
  unknowCreate: Unknow;
  unknowCreateMany: UnknowManyResponse;
  unknowDelete: Maybe<SuccessResponse>;
  unknowDeleteByFilter: Maybe<SuccessResponse>;
  unknowDestroy: Maybe<SuccessResponse>;
  unknowDestroyByFilter: Maybe<SuccessResponse>;
  unknowRestore: Unknow;
  unknowUpdate: Unknow;
  unknowUpdateByFilter: UnknowManyResponse;
  uploadCSV: Maybe<UploadCsvResponse>;
  userChangePassword: Maybe<SuccessResponse>;
  userCreate: User;
  userCreateMany: UserManyResponse;
  userDelete: Maybe<SuccessResponse>;
  userDeleteByFilter: Maybe<SuccessResponse>;
  userDestroy: Maybe<SuccessResponse>;
  userDestroyByFilter: Maybe<SuccessResponse>;
  userLogin: Maybe<LoginResponse>;
  userPasswordForgot: Maybe<SuccessResponse>;
  userPasswordForgotConfirm: Maybe<SuccessResponse>;
  userProfileCreate: UserProfile;
  userProfileCreateMany: UserProfileManyResponse;
  userProfileDelete: Maybe<SuccessResponse>;
  userProfileDeleteByFilter: Maybe<SuccessResponse>;
  userProfileDestroy: Maybe<SuccessResponse>;
  userProfileDestroyByFilter: Maybe<SuccessResponse>;
  userProfileRestore: UserProfile;
  userProfileUpdate: UserProfile;
  userRefreshToken: Maybe<Auth>;
  userRestore: User;
  userSchoolCreate: UserSchool;
  userSchoolCreateMany: UserSchoolManyResponse;
  userSchoolDelete: Maybe<SuccessResponse>;
  userSchoolDeleteByFilter: Maybe<SuccessResponse>;
  userSchoolDestroy: Maybe<SuccessResponse>;
  userSchoolDestroyByFilter: Maybe<SuccessResponse>;
  userSchoolRestore: UserSchool;
  userSchoolUpdate: UserSchool;
  /** @deprecated No longer supported. Use `userSignUpWithToken` instead. */
  userSignUp: User;
  /** @deprecated No longer supported. Use `userVerificationEmailResend` instead. */
  userSignUpResend: Maybe<SuccessResponse>;
  userSignUpWithPassword: User;
  userSignUpWithToken: User;
  userUpdate: User;
  userUpdateByFilter: UserManyResponse;
  userVerificationEmailResend: Maybe<SuccessResponse>;
  videoCreate: Video;
  videoCreateMany: VideoManyResponse;
  videoDelete: Maybe<SuccessResponse>;
  videoDeleteByFilter: Maybe<SuccessResponse>;
  videoDestroy: Maybe<SuccessResponse>;
  videoDestroyByFilter: Maybe<SuccessResponse>;
  videoLinkCreate: VideoLink;
  videoLinkCreateMany: VideoLinkManyResponse;
  videoLinkDelete: Maybe<SuccessResponse>;
  videoLinkDeleteByFilter: Maybe<SuccessResponse>;
  videoLinkDestroy: Maybe<SuccessResponse>;
  videoLinkDestroyByFilter: Maybe<SuccessResponse>;
  videoLinkRestore: VideoLink;
  videoLinkUpdate: VideoLink;
  videoLinkUpdateByFilter: VideoLinkManyResponse;
  videoRestore: Video;
  videoUpdate: Video;
  videoUpdateByFilter: VideoManyResponse;
  /** @deprecated No longer supported. Use `system.viewCreate` instead. */
  viewCreate: Table;
  viewUpdate: Table;
  waitingListCreate: WaitingList;
  waitingListCreateMany: WaitingListManyResponse;
  waitingListDelete: Maybe<SuccessResponse>;
  waitingListDeleteByFilter: Maybe<SuccessResponse>;
  waitingListDestroy: Maybe<SuccessResponse>;
  waitingListDestroyByFilter: Maybe<SuccessResponse>;
  waitingListRestore: WaitingList;
  waitingListUpdate: WaitingList;
  waitingListUpdateByFilter: WaitingListManyResponse;
  /** @deprecated No longer supported. Use `system.workspaceCreate` instead. */
  workspaceCreate: Maybe<WorkspaceCreateResponse>;
  /** @deprecated No longer supported. Use `system.workspaceCreateAsync` instead. */
  workspaceCreateAsync: Maybe<WorkspaceCreateResponse>;
  /** @deprecated No longer supported. Use `system.workspaceDelete` instead. */
  workspaceDelete: Maybe<SuccessResponse>;
  /** @deprecated No longer supported. Use `system.workspaceLeave` instead. */
  workspaceLeave: Maybe<SuccessResponse>;
  /** @deprecated No longer supported. Use `system.workspaceUpdate` instead. */
  workspaceUpdate: Maybe<WorkspaceUpdateResponse>;
  xCustomerCreate: XCustomer;
  xCustomerCreateMany: XCustomerManyResponse;
  xCustomerDelete: Maybe<SuccessResponse>;
  xCustomerDeleteByFilter: Maybe<SuccessResponse>;
  xCustomerDestroy: Maybe<SuccessResponse>;
  xCustomerDestroyByFilter: Maybe<SuccessResponse>;
  xCustomerRestore: XCustomer;
  xCustomerUpdate: XCustomer;
  xCustomerUpdateByFilter: XCustomerManyResponse;
  xSchoolCustomerCreate: XSchoolCustomer;
  xSchoolCustomerCreateMany: XSchoolCustomerManyResponse;
  xSchoolCustomerDelete: Maybe<SuccessResponse>;
  xSchoolCustomerDeleteByFilter: Maybe<SuccessResponse>;
  xSchoolCustomerDestroy: Maybe<SuccessResponse>;
  xSchoolCustomerDestroyByFilter: Maybe<SuccessResponse>;
  xSchoolCustomerRestore: XSchoolCustomer;
  xSchoolCustomerUpdate: XSchoolCustomer;
};

export type MutationAchievementCreateArgs = {
  data: AchievementCreateInput;
};

export type MutationAchievementCreateManyArgs = {
  data: Array<Maybe<AchievementCreateManyInput>>;
};

export type MutationAchievementDeleteArgs = {
  data?: Maybe<AchievementDeleteInput>;
  filter?: Maybe<AchievementKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationAchievementDeleteByFilterArgs = {
  filter: AchievementFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationAchievementDestroyArgs = {
  filter?: Maybe<AchievementKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationAchievementDestroyByFilterArgs = {
  filter: AchievementFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationAchievementRestoreArgs = {
  id: Scalars['String'];
};

export type MutationAchievementUpdateArgs = {
  data: AchievementUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<AchievementKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationAchievementUpdateByFilterArgs = {
  data: AchievementUpdateByFilterInput;
  filter?: Maybe<AchievementFilter>;
};

export type MutationApiTokenCreateArgs = {
  data: ApiTokenCreateInput;
};

export type MutationApiTokenDeleteArgs = {
  data?: Maybe<ApiTokenDeleteInput>;
  filter?: Maybe<ApiTokenKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationApiTokenDeleteByFilterArgs = {
  filter: ApiTokenFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationApiTokenDestroyArgs = {
  filter?: Maybe<ApiTokenKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationApiTokenDestroyByFilterArgs = {
  filter: ApiTokenFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationApiTokenRestoreArgs = {
  id: Scalars['String'];
};

export type MutationApiTokenUpdateArgs = {
  data: ApiTokenUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<ApiTokenKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationApiTokenUpdateByFilterArgs = {
  data: ApiTokenUpdateByFilterInput;
  filter?: Maybe<ApiTokenFilter>;
};

export type MutationApplicationDeleteArgs = {
  data: ApplicationDeleteMutationInput;
};

export type MutationApplicationInstallArgs = {
  data: ApplicationInstallInput;
};

export type MutationApplicationUpdateArgs = {
  data: ApplicationUpdateInput;
};

export type MutationAuthenticationProfileCreateArgs = {
  data: AuthenticationProfileCreateInput;
};

export type MutationAuthenticationProfileCreateManyArgs = {
  data: Array<Maybe<AuthenticationProfileCreateManyInput>>;
};

export type MutationAuthenticationProfileDeleteArgs = {
  data?: Maybe<AuthenticationProfileDeleteInput>;
  filter?: Maybe<AuthenticationProfileKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationAuthenticationProfileDeleteByFilterArgs = {
  filter: AuthenticationProfileFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationAuthenticationProfileDestroyArgs = {
  filter?: Maybe<AuthenticationProfileKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationAuthenticationProfileDestroyByFilterArgs = {
  filter: AuthenticationProfileFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationAuthenticationProfileRestoreArgs = {
  id: Scalars['String'];
};

export type MutationAuthenticationProfileUpdateArgs = {
  data: AuthenticationProfileUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<AuthenticationProfileKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationAuthenticationProfileUpdateByFilterArgs = {
  data: AuthenticationProfileUpdateByFilterInput;
  filter?: Maybe<AuthenticationProfileFilter>;
};

export type MutationAuthenticationSettingsUpdateArgs = {
  data: AuthenticationSettingUpdateInput;
};

export type MutationBillingDetailsUpdateArgs = {
  data: BillingDetailsUpdateMutationInput;
};

export type MutationBillingPlanUpdateArgs = {
  data: BillingPlanUpdateMutationInput;
};

export type MutationBrandCreateArgs = {
  data: BrandCreateInput;
};

export type MutationBrandCreateManyArgs = {
  data: Array<Maybe<BrandCreateManyInput>>;
};

export type MutationBrandDeleteArgs = {
  data?: Maybe<BrandDeleteInput>;
  filter?: Maybe<BrandKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationBrandDeleteByFilterArgs = {
  filter: BrandFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationBrandDestroyArgs = {
  filter?: Maybe<BrandKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationBrandDestroyByFilterArgs = {
  filter: BrandFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationBrandRestoreArgs = {
  id: Scalars['String'];
};

export type MutationBrandUpdateArgs = {
  data: BrandUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<BrandKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationBrandUpdateByFilterArgs = {
  data: BrandUpdateByFilterInput;
  filter?: Maybe<BrandFilter>;
};

export type MutationCheckinCreateArgs = {
  data: CheckinCreateInput;
};

export type MutationCheckinCreateManyArgs = {
  data: Array<Maybe<CheckinCreateManyInput>>;
};

export type MutationCheckinDeleteArgs = {
  data?: Maybe<CheckinDeleteInput>;
  filter?: Maybe<CheckinKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationCheckinDeleteByFilterArgs = {
  filter: CheckinFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationCheckinDestroyArgs = {
  filter?: Maybe<CheckinKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationCheckinDestroyByFilterArgs = {
  filter: CheckinFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationCheckinRestoreArgs = {
  id: Scalars['String'];
};

export type MutationCheckinUpdateArgs = {
  data: CheckinUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<CheckinKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationCheckinUpdateByFilterArgs = {
  data: CheckinUpdateByFilterInput;
  filter?: Maybe<CheckinFilter>;
};

export type MutationCiCdMigrationCreateArgs = {
  data: CiCdMigrationCreateInput;
};

export type MutationCiCdMigrationCreateManyArgs = {
  data: Array<Maybe<CiCdMigrationCreateManyInput>>;
};

export type MutationCiCdMigrationDeleteArgs = {
  data?: Maybe<CiCdMigrationDeleteInput>;
  filter?: Maybe<CiCdMigrationKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationCiCdMigrationDeleteByFilterArgs = {
  filter: CiCdMigrationFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationCiCdMigrationDestroyArgs = {
  filter?: Maybe<CiCdMigrationKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationCiCdMigrationDestroyByFilterArgs = {
  filter: CiCdMigrationFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationCiCdMigrationRestoreArgs = {
  id: Scalars['String'];
};

export type MutationCiCdMigrationUpdateArgs = {
  data: CiCdMigrationUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<CiCdMigrationKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationCiCdMigrationUpdateByFilterArgs = {
  data: CiCdMigrationUpdateByFilterInput;
  filter?: Maybe<CiCdMigrationFilter>;
};

export type MutationCompetitionCreateArgs = {
  data: CompetitionCreateInput;
};

export type MutationCompetitionCreateManyArgs = {
  data: Array<Maybe<CompetitionCreateManyInput>>;
};

export type MutationCompetitionDeleteArgs = {
  data?: Maybe<CompetitionDeleteInput>;
  filter?: Maybe<CompetitionKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationCompetitionDeleteByFilterArgs = {
  filter: CompetitionFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationCompetitionDestroyArgs = {
  filter?: Maybe<CompetitionKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationCompetitionDestroyByFilterArgs = {
  filter: CompetitionFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationCompetitionRestoreArgs = {
  id: Scalars['String'];
};

export type MutationCompetitionUpdateArgs = {
  data: CompetitionUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<CompetitionKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationCompetitionUpdateByFilterArgs = {
  data: CompetitionUpdateByFilterInput;
  filter?: Maybe<CompetitionFilter>;
};

export type MutationCountryCreateArgs = {
  data: CountryCreateInput;
};

export type MutationCountryCreateManyArgs = {
  data: Array<Maybe<CountryCreateManyInput>>;
};

export type MutationCountryDeleteArgs = {
  data?: Maybe<CountryDeleteInput>;
  filter?: Maybe<CountryKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationCountryDeleteByFilterArgs = {
  filter: CountryFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationCountryDestroyArgs = {
  filter?: Maybe<CountryKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationCountryDestroyByFilterArgs = {
  filter: CountryFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationCountryRestoreArgs = {
  id: Scalars['String'];
};

export type MutationCountryUpdateArgs = {
  data: CountryUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<CountryKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationCountryUpdateByFilterArgs = {
  data: CountryUpdateByFilterInput;
  filter?: Maybe<CountryFilter>;
};

export type MutationCreateCheckoutSessionResolverArgs = {
  data: CreateCheckoutSessionInput;
};

export type MutationCreateCustomerResolverArgs = {
  data: CreateCustomerResolverInput;
};

export type MutationCreatePortalResolverArgs = {
  id: Scalars['ID'];
};

export type MutationCreatePrivateClassResolverArgs = {
  data: CreatePrivateClassResolverInput;
};

export type MutationCreateProductResolverArgs = {
  data: CreateProductResolverInput;
};

export type MutationCreateSchoolStripeAccountResolverArgs = {
  schoolId?: Maybe<Scalars['ID']>;
};

export type MutationCreateStripeAccountResolverArgs = {
  profileId?: Maybe<Scalars['String']>;
};

export type MutationCustomerCreateArgs = {
  data: CustomerCreateInput;
};

export type MutationCustomerCreateManyArgs = {
  data: Array<Maybe<CustomerCreateManyInput>>;
};

export type MutationCustomerDeleteArgs = {
  data?: Maybe<CustomerDeleteInput>;
  filter?: Maybe<CustomerKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationCustomerDeleteByFilterArgs = {
  filter: CustomerFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationCustomerDestroyArgs = {
  filter?: Maybe<CustomerKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationCustomerDestroyByFilterArgs = {
  filter: CustomerFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationCustomerRestoreArgs = {
  id: Scalars['String'];
};

export type MutationCustomerUpdateArgs = {
  data: CustomerUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<CustomerKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationCustomerUpdateByFilterArgs = {
  data: CustomerUpdateByFilterInput;
  filter?: Maybe<CustomerFilter>;
};

export type MutationDeployArgs = {
  data?: Maybe<DeployingBuildInput>;
};

export type MutationDiscountCreateArgs = {
  data: DiscountCreateInput;
};

export type MutationDiscountCreateManyArgs = {
  data: Array<Maybe<DiscountCreateManyInput>>;
};

export type MutationDiscountDeleteArgs = {
  data?: Maybe<DiscountDeleteInput>;
  filter?: Maybe<DiscountKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationDiscountDeleteByFilterArgs = {
  filter: DiscountFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationDiscountDestroyArgs = {
  filter?: Maybe<DiscountKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationDiscountDestroyByFilterArgs = {
  filter: DiscountFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationDiscountRestoreArgs = {
  id: Scalars['String'];
};

export type MutationDiscountUpdateArgs = {
  data: DiscountUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<DiscountKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationDiscountUpdateByFilterArgs = {
  data: DiscountUpdateByFilterInput;
  filter?: Maybe<DiscountFilter>;
};

export type MutationEmailTemplateCreateArgs = {
  data: EmailTemplateCreateInput;
};

export type MutationEmailTemplateCreateManyArgs = {
  data: Array<Maybe<EmailTemplateCreateManyInput>>;
};

export type MutationEmailTemplateDeleteArgs = {
  data?: Maybe<EmailTemplateDeleteInput>;
  filter?: Maybe<EmailTemplateKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationEmailTemplateDeleteByFilterArgs = {
  filter: EmailTemplateFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationEmailTemplateDestroyArgs = {
  filter?: Maybe<EmailTemplateKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationEmailTemplateDestroyByFilterArgs = {
  filter: EmailTemplateFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationEmailTemplateRestoreArgs = {
  id: Scalars['String'];
};

export type MutationEmailTemplateUpdateArgs = {
  data: EmailTemplateUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<EmailTemplateKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationEmailTemplateUpdateByFilterArgs = {
  data: EmailTemplateUpdateByFilterInput;
  filter?: Maybe<EmailTemplateFilter>;
};

export type MutationEnvironmentVariableCreateArgs = {
  data: EnvironmentVariableCreateInput;
};

export type MutationEnvironmentVariableCreateManyArgs = {
  data: Array<Maybe<EnvironmentVariableCreateManyInput>>;
};

export type MutationEnvironmentVariableDeleteArgs = {
  data?: Maybe<EnvironmentVariableDeleteInput>;
  filter?: Maybe<EnvironmentVariableKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationEnvironmentVariableDeleteByFilterArgs = {
  filter: EnvironmentVariableFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationEnvironmentVariableDestroyArgs = {
  filter?: Maybe<EnvironmentVariableKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationEnvironmentVariableDestroyByFilterArgs = {
  filter: EnvironmentVariableFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationEnvironmentVariableRestoreArgs = {
  id: Scalars['String'];
};

export type MutationEnvironmentVariableUpdateArgs = {
  data: EnvironmentVariableUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<EnvironmentVariableKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationEnvironmentVariableUpdateByFilterArgs = {
  data: EnvironmentVariableUpdateByFilterInput;
  filter?: Maybe<EnvironmentVariableFilter>;
};

export type MutationFieldCreateArgs = {
  data: TableFieldCreateInput;
};

export type MutationFieldDeleteArgs = {
  data: TableFieldDeleteInput;
};

export type MutationFieldUpdateArgs = {
  data: TableFieldUpdateInput;
};

export type MutationFieldUpdatePositionArgs = {
  data: TableFieldPositionUpdateInput;
};

export type MutationFileCreateArgs = {
  data: FileCreateInput;
};

export type MutationFileCreateManyArgs = {
  data: Array<Maybe<FileCreateManyInput>>;
};

export type MutationFileDeleteArgs = {
  data?: Maybe<FileDeleteInput>;
  filter?: Maybe<FileKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationFileDeleteByFilterArgs = {
  filter: FileFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationFileDestroyArgs = {
  filter?: Maybe<FileKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationFileDestroyByFilterArgs = {
  filter: FileFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationFileRestoreArgs = {
  id: Scalars['String'];
};

export type MutationFileUpdateArgs = {
  data: FileUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<FileKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationFileUpdateByFilterArgs = {
  data: FileUpdateByFilterInput;
  filter?: Maybe<FileFilter>;
};

export type MutationGenerateAccountLinkResolverArgs = {
  data?: Maybe<GenerateAccountLinkInput>;
};

export type MutationGroupalClassCreateArgs = {
  data: GroupalClassCreateInput;
};

export type MutationGroupalClassCreateManyArgs = {
  data: Array<Maybe<GroupalClassCreateManyInput>>;
};

export type MutationGroupalClassDeleteArgs = {
  data?: Maybe<GroupalClassDeleteInput>;
  filter?: Maybe<GroupalClassKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationGroupalClassDeleteByFilterArgs = {
  filter: GroupalClassFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationGroupalClassDestroyArgs = {
  filter?: Maybe<GroupalClassKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationGroupalClassDestroyByFilterArgs = {
  filter: GroupalClassFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationGroupalClassRestoreArgs = {
  id: Scalars['String'];
};

export type MutationGroupalClassUpdateArgs = {
  data: GroupalClassUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<GroupalClassKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationGroupalClassUpdateByFilterArgs = {
  data: GroupalClassUpdateByFilterInput;
  filter?: Maybe<GroupalClassFilter>;
};

export type MutationIndexCreateArgs = {
  data: IndexCreateInput;
};

export type MutationIndexDeleteArgs = {
  data: IndexDeleteInput;
};

export type MutationIndexUpdateArgs = {
  data: IndexUpdateInput;
};

export type MutationInvokeArgs = {
  data?: Maybe<InvokeData>;
};

export type MutationLanguageCountryCreateArgs = {
  data: LanguageCountryCreateInput;
};

export type MutationLanguageCountryCreateManyArgs = {
  data: Array<Maybe<LanguageCountryCreateManyInput>>;
};

export type MutationLanguageCountryDeleteArgs = {
  data?: Maybe<LanguageCountryDeleteInput>;
  filter?: Maybe<LanguageCountryKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationLanguageCountryDeleteByFilterArgs = {
  filter: LanguageCountryFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationLanguageCountryDestroyArgs = {
  filter?: Maybe<LanguageCountryKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationLanguageCountryDestroyByFilterArgs = {
  filter: LanguageCountryFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationLanguageCountryRestoreArgs = {
  id: Scalars['String'];
};

export type MutationLanguageCountryUpdateArgs = {
  data: LanguageCountryUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<LanguageCountryKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationLanguageCreateArgs = {
  data: LanguageCreateInput;
};

export type MutationLanguageCreateManyArgs = {
  data: Array<Maybe<LanguageCreateManyInput>>;
};

export type MutationLanguageDeleteArgs = {
  data?: Maybe<LanguageDeleteInput>;
  filter?: Maybe<LanguageKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationLanguageDeleteByFilterArgs = {
  filter: LanguageFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationLanguageDestroyArgs = {
  filter?: Maybe<LanguageKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationLanguageDestroyByFilterArgs = {
  filter: LanguageFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationLanguageRestoreArgs = {
  id: Scalars['String'];
};

export type MutationLanguageUpdateArgs = {
  data: LanguageUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<LanguageKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationLanguageUpdateByFilterArgs = {
  data: LanguageUpdateByFilterInput;
  filter?: Maybe<LanguageFilter>;
};

export type MutationMartialArtCreateArgs = {
  data: MartialArtCreateInput;
};

export type MutationMartialArtCreateManyArgs = {
  data: Array<Maybe<MartialArtCreateManyInput>>;
};

export type MutationMartialArtDeleteArgs = {
  data?: Maybe<MartialArtDeleteInput>;
  filter?: Maybe<MartialArtKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationMartialArtDeleteByFilterArgs = {
  filter: MartialArtFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationMartialArtDestroyArgs = {
  filter?: Maybe<MartialArtKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationMartialArtDestroyByFilterArgs = {
  filter: MartialArtFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationMartialArtRestoreArgs = {
  id: Scalars['String'];
};

export type MutationMartialArtUpdateArgs = {
  data: MartialArtUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<MartialArtKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationMartialArtUpdateByFilterArgs = {
  data: MartialArtUpdateByFilterInput;
  filter?: Maybe<MartialArtFilter>;
};

export type MutationPlanCategoryCreateArgs = {
  data: PlanCategoryCreateInput;
};

export type MutationPlanCategoryCreateManyArgs = {
  data: Array<Maybe<PlanCategoryCreateManyInput>>;
};

export type MutationPlanCategoryDeleteArgs = {
  data?: Maybe<PlanCategoryDeleteInput>;
  filter?: Maybe<PlanCategoryKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationPlanCategoryDeleteByFilterArgs = {
  filter: PlanCategoryFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationPlanCategoryDestroyArgs = {
  filter?: Maybe<PlanCategoryKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationPlanCategoryDestroyByFilterArgs = {
  filter: PlanCategoryFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationPlanCategoryRestoreArgs = {
  id: Scalars['String'];
};

export type MutationPlanCategoryUpdateArgs = {
  data: PlanCategoryUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<PlanCategoryKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationPlanCategoryUpdateByFilterArgs = {
  data: PlanCategoryUpdateByFilterInput;
  filter?: Maybe<PlanCategoryFilter>;
};

export type MutationPlanCreateArgs = {
  data: PlanCreateInput;
};

export type MutationPlanCreateManyArgs = {
  data: Array<Maybe<PlanCreateManyInput>>;
};

export type MutationPlanDeleteArgs = {
  data?: Maybe<PlanDeleteInput>;
  filter?: Maybe<PlanKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationPlanDeleteByFilterArgs = {
  filter: PlanFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationPlanDestroyArgs = {
  filter?: Maybe<PlanKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationPlanDestroyByFilterArgs = {
  filter: PlanFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationPlanRestoreArgs = {
  id: Scalars['String'];
};

export type MutationPlanUpdateArgs = {
  data: PlanUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<PlanKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationPlanUpdateByFilterArgs = {
  data: PlanUpdateByFilterInput;
  filter?: Maybe<PlanFilter>;
};

export type MutationPreSignupCreateArgs = {
  data: PreSignupCreateInput;
};

export type MutationPreSignupCreateManyArgs = {
  data: Array<Maybe<PreSignupCreateManyInput>>;
};

export type MutationPreSignupDeleteArgs = {
  data?: Maybe<PreSignupDeleteInput>;
  filter?: Maybe<PreSignupKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationPreSignupDeleteByFilterArgs = {
  filter: PreSignupFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationPreSignupDestroyArgs = {
  filter?: Maybe<PreSignupKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationPreSignupDestroyByFilterArgs = {
  filter: PreSignupFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationPreSignupRestoreArgs = {
  id: Scalars['String'];
};

export type MutationPreSignupUpdateArgs = {
  data: PreSignupUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<PreSignupKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationPreSignupUpdateByFilterArgs = {
  data: PreSignupUpdateByFilterInput;
  filter?: Maybe<PreSignupFilter>;
};

export type MutationPrivateClassCheckoutArgs = {
  data: CreatePrivateClassCheckoutInput;
};

export type MutationPrivateClassCreateArgs = {
  data: PrivateClassCreateInput;
};

export type MutationPrivateClassCreateManyArgs = {
  data: Array<Maybe<PrivateClassCreateManyInput>>;
};

export type MutationPrivateClassDeleteArgs = {
  data?: Maybe<PrivateClassDeleteInput>;
  filter?: Maybe<PrivateClassKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationPrivateClassDeleteByFilterArgs = {
  filter: PrivateClassFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationPrivateClassDestroyArgs = {
  filter?: Maybe<PrivateClassKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationPrivateClassDestroyByFilterArgs = {
  filter: PrivateClassFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationPrivateClassPurchaseCreateArgs = {
  data: PrivateClassPurchaseCreateInput;
};

export type MutationPrivateClassPurchaseCreateManyArgs = {
  data: Array<Maybe<PrivateClassPurchaseCreateManyInput>>;
};

export type MutationPrivateClassPurchaseDeleteArgs = {
  data?: Maybe<PrivateClassPurchaseDeleteInput>;
  filter?: Maybe<PrivateClassPurchaseKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationPrivateClassPurchaseDeleteByFilterArgs = {
  filter: PrivateClassPurchaseFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationPrivateClassPurchaseDestroyArgs = {
  filter?: Maybe<PrivateClassPurchaseKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationPrivateClassPurchaseDestroyByFilterArgs = {
  filter: PrivateClassPurchaseFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationPrivateClassPurchaseRestoreArgs = {
  id: Scalars['String'];
};

export type MutationPrivateClassPurchaseUpdateArgs = {
  data: PrivateClassPurchaseUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<PrivateClassPurchaseKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationPrivateClassPurchaseUpdateByFilterArgs = {
  data: PrivateClassPurchaseUpdateByFilterInput;
  filter?: Maybe<PrivateClassPurchaseFilter>;
};

export type MutationPrivateClassRestoreArgs = {
  id: Scalars['String'];
};

export type MutationPrivateClassUpdateArgs = {
  data: PrivateClassUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<PrivateClassKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationPrivateClassUpdateByFilterArgs = {
  data: PrivateClassUpdateByFilterInput;
  filter?: Maybe<PrivateClassFilter>;
};

export type MutationProductCategoryCreateArgs = {
  data: ProductCategoryCreateInput;
};

export type MutationProductCategoryCreateManyArgs = {
  data: Array<Maybe<ProductCategoryCreateManyInput>>;
};

export type MutationProductCategoryDeleteArgs = {
  data?: Maybe<ProductCategoryDeleteInput>;
  filter?: Maybe<ProductCategoryKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationProductCategoryDeleteByFilterArgs = {
  filter: ProductCategoryFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationProductCategoryDestroyArgs = {
  filter?: Maybe<ProductCategoryKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationProductCategoryDestroyByFilterArgs = {
  filter: ProductCategoryFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationProductCategoryRestoreArgs = {
  id: Scalars['String'];
};

export type MutationProductCategoryUpdateArgs = {
  data: ProductCategoryUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<ProductCategoryKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationProductCategoryUpdateByFilterArgs = {
  data: ProductCategoryUpdateByFilterInput;
  filter?: Maybe<ProductCategoryFilter>;
};

export type MutationProductCreateArgs = {
  data: ProductCreateInput;
};

export type MutationProductCreateManyArgs = {
  data: Array<Maybe<ProductCreateManyInput>>;
};

export type MutationProductDeleteArgs = {
  data?: Maybe<ProductDeleteInput>;
  filter?: Maybe<ProductKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationProductDeleteByFilterArgs = {
  filter: ProductFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationProductDestroyArgs = {
  filter?: Maybe<ProductKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationProductDestroyByFilterArgs = {
  filter: ProductFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationProductRestoreArgs = {
  id: Scalars['String'];
};

export type MutationProductSubscriptionCreateArgs = {
  data: ProductSubscriptionCreateInput;
};

export type MutationProductSubscriptionCreateManyArgs = {
  data: Array<Maybe<ProductSubscriptionCreateManyInput>>;
};

export type MutationProductSubscriptionDeleteArgs = {
  data?: Maybe<ProductSubscriptionDeleteInput>;
  filter?: Maybe<ProductSubscriptionKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationProductSubscriptionDeleteByFilterArgs = {
  filter: ProductSubscriptionFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationProductSubscriptionDestroyArgs = {
  filter?: Maybe<ProductSubscriptionKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationProductSubscriptionDestroyByFilterArgs = {
  filter: ProductSubscriptionFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationProductSubscriptionRestoreArgs = {
  id: Scalars['String'];
};

export type MutationProductSubscriptionUpdateArgs = {
  data: ProductSubscriptionUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<ProductSubscriptionKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationProductSubscriptionUpdateByFilterArgs = {
  data: ProductSubscriptionUpdateByFilterInput;
  filter?: Maybe<ProductSubscriptionFilter>;
};

export type MutationProductUpdateArgs = {
  data: ProductUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<ProductKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationProductUpdateByFilterArgs = {
  data: ProductUpdateByFilterInput;
  filter?: Maybe<ProductFilter>;
};

export type MutationProfileCreateArgs = {
  data: ProfileCreateInput;
};

export type MutationProfileCreateManyArgs = {
  data: Array<Maybe<ProfileCreateManyInput>>;
};

export type MutationProfileDeleteArgs = {
  data?: Maybe<ProfileDeleteInput>;
  filter?: Maybe<ProfileKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationProfileDeleteByFilterArgs = {
  filter: ProfileFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationProfileDestroyArgs = {
  filter?: Maybe<ProfileKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationProfileDestroyByFilterArgs = {
  filter: ProfileFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationProfileRestoreArgs = {
  id: Scalars['String'];
};

export type MutationProfileUpdateArgs = {
  data: ProfileUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<ProfileKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationProfileUpdateByFilterArgs = {
  data: ProfileUpdateByFilterInput;
  filter?: Maybe<ProfileFilter>;
};

export type MutationRankCreateArgs = {
  data: RankCreateInput;
};

export type MutationRankCreateManyArgs = {
  data: Array<Maybe<RankCreateManyInput>>;
};

export type MutationRankDeleteArgs = {
  data?: Maybe<RankDeleteInput>;
  filter?: Maybe<RankKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationRankDeleteByFilterArgs = {
  filter: RankFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationRankDestroyArgs = {
  filter?: Maybe<RankKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationRankDestroyByFilterArgs = {
  filter: RankFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationRankIssuedCreateArgs = {
  data: RankIssuedCreateInput;
};

export type MutationRankIssuedCreateManyArgs = {
  data: Array<Maybe<RankIssuedCreateManyInput>>;
};

export type MutationRankIssuedDeleteArgs = {
  data?: Maybe<RankIssuedDeleteInput>;
  filter?: Maybe<RankIssuedKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationRankIssuedDeleteByFilterArgs = {
  filter: RankIssuedFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationRankIssuedDestroyArgs = {
  filter?: Maybe<RankIssuedKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationRankIssuedDestroyByFilterArgs = {
  filter: RankIssuedFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationRankIssuedRestoreArgs = {
  id: Scalars['String'];
};

export type MutationRankIssuedUpdateArgs = {
  data: RankIssuedUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<RankIssuedKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationRankIssuedUpdateByFilterArgs = {
  data: RankIssuedUpdateByFilterInput;
  filter?: Maybe<RankIssuedFilter>;
};

export type MutationRankRestoreArgs = {
  id: Scalars['String'];
};

export type MutationRankUpdateArgs = {
  data: RankUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<RankKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationRankUpdateByFilterArgs = {
  data: RankUpdateByFilterInput;
  filter?: Maybe<RankFilter>;
};

export type MutationRoleCreateArgs = {
  data: RoleCreateInput;
};

export type MutationRoleCreateManyArgs = {
  data: Array<Maybe<RoleCreateManyInput>>;
};

export type MutationRoleDeleteArgs = {
  data?: Maybe<RoleDeleteInput>;
  filter?: Maybe<RoleKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationRoleDeleteByFilterArgs = {
  filter: RoleFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationRoleDestroyArgs = {
  filter?: Maybe<RoleKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationRoleDestroyByFilterArgs = {
  filter: RoleFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationRoleRestoreArgs = {
  id: Scalars['String'];
};

export type MutationRoleUpdateArgs = {
  data: RoleUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<RoleKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationRoleUpdateByFilterArgs = {
  data: RoleUpdateByFilterInput;
  filter?: Maybe<RoleFilter>;
};

export type MutationScheduleCreateArgs = {
  data: ScheduleCreateInput;
};

export type MutationScheduleCreateManyArgs = {
  data: Array<Maybe<ScheduleCreateManyInput>>;
};

export type MutationScheduleDeleteArgs = {
  data?: Maybe<ScheduleDeleteInput>;
  filter?: Maybe<ScheduleKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationScheduleDeleteByFilterArgs = {
  filter: ScheduleFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationScheduleDestroyArgs = {
  filter?: Maybe<ScheduleKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationScheduleDestroyByFilterArgs = {
  filter: ScheduleFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationScheduleRestoreArgs = {
  id: Scalars['String'];
};

export type MutationScheduleUpdateArgs = {
  data: ScheduleUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<ScheduleKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationScheduleUpdateByFilterArgs = {
  data: ScheduleUpdateByFilterInput;
  filter?: Maybe<ScheduleFilter>;
};

export type MutationSchoolCreateArgs = {
  data: SchoolCreateInput;
};

export type MutationSchoolCreateManyArgs = {
  data: Array<Maybe<SchoolCreateManyInput>>;
};

export type MutationSchoolDeleteArgs = {
  data?: Maybe<SchoolDeleteInput>;
  filter?: Maybe<SchoolKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSchoolDeleteByFilterArgs = {
  filter: SchoolFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSchoolDestroyArgs = {
  filter?: Maybe<SchoolKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSchoolDestroyByFilterArgs = {
  filter: SchoolFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSchoolMartialArtCreateArgs = {
  data: SchoolMartialArtCreateInput;
};

export type MutationSchoolMartialArtCreateManyArgs = {
  data: Array<Maybe<SchoolMartialArtCreateManyInput>>;
};

export type MutationSchoolMartialArtDeleteArgs = {
  data?: Maybe<SchoolMartialArtDeleteInput>;
  filter?: Maybe<SchoolMartialArtKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSchoolMartialArtDeleteByFilterArgs = {
  filter: SchoolMartialArtFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSchoolMartialArtDestroyArgs = {
  filter?: Maybe<SchoolMartialArtKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSchoolMartialArtDestroyByFilterArgs = {
  filter: SchoolMartialArtFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSchoolMartialArtRestoreArgs = {
  id: Scalars['String'];
};

export type MutationSchoolMartialArtUpdateArgs = {
  data: SchoolMartialArtUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<SchoolMartialArtKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSchoolProfileCreateArgs = {
  data: SchoolProfileCreateInput;
};

export type MutationSchoolProfileCreateManyArgs = {
  data: Array<Maybe<SchoolProfileCreateManyInput>>;
};

export type MutationSchoolProfileDeleteArgs = {
  data?: Maybe<SchoolProfileDeleteInput>;
  filter?: Maybe<SchoolProfileKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSchoolProfileDeleteByFilterArgs = {
  filter: SchoolProfileFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSchoolProfileDestroyArgs = {
  filter?: Maybe<SchoolProfileKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSchoolProfileDestroyByFilterArgs = {
  filter: SchoolProfileFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSchoolProfileRestoreArgs = {
  id: Scalars['String'];
};

export type MutationSchoolProfileUpdateArgs = {
  data: SchoolProfileUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<SchoolProfileKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSchoolProfileUpdateByFilterArgs = {
  data: SchoolProfileUpdateByFilterInput;
  filter?: Maybe<SchoolProfileFilter>;
};

export type MutationSchoolRestoreArgs = {
  id: Scalars['String'];
};

export type MutationSchoolStripeAccountCreateArgs = {
  data: SchoolStripeAccountCreateInput;
};

export type MutationSchoolStripeAccountCreateManyArgs = {
  data: Array<Maybe<SchoolStripeAccountCreateManyInput>>;
};

export type MutationSchoolStripeAccountDeleteArgs = {
  data?: Maybe<SchoolStripeAccountDeleteInput>;
  filter?: Maybe<SchoolStripeAccountKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSchoolStripeAccountDeleteByFilterArgs = {
  filter: SchoolStripeAccountFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSchoolStripeAccountDestroyArgs = {
  filter?: Maybe<SchoolStripeAccountKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSchoolStripeAccountDestroyByFilterArgs = {
  filter: SchoolStripeAccountFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSchoolStripeAccountRestoreArgs = {
  id: Scalars['String'];
};

export type MutationSchoolStripeAccountUpdateArgs = {
  data: SchoolStripeAccountUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<SchoolStripeAccountKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSchoolStripeAccountUpdateByFilterArgs = {
  data: SchoolStripeAccountUpdateByFilterInput;
  filter?: Maybe<SchoolStripeAccountFilter>;
};

export type MutationSchoolTeamCreateArgs = {
  data: SchoolTeamCreateInput;
};

export type MutationSchoolTeamCreateManyArgs = {
  data: Array<Maybe<SchoolTeamCreateManyInput>>;
};

export type MutationSchoolTeamDeleteArgs = {
  data?: Maybe<SchoolTeamDeleteInput>;
  filter?: Maybe<SchoolTeamKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSchoolTeamDeleteByFilterArgs = {
  filter: SchoolTeamFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSchoolTeamDestroyArgs = {
  filter?: Maybe<SchoolTeamKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSchoolTeamDestroyByFilterArgs = {
  filter: SchoolTeamFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSchoolTeamRestoreArgs = {
  id: Scalars['String'];
};

export type MutationSchoolTeamUpdateArgs = {
  data: SchoolTeamUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<SchoolTeamKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSchoolUpdateArgs = {
  data: SchoolUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<SchoolKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSchoolUpdateByFilterArgs = {
  data: SchoolUpdateByFilterInput;
  filter?: Maybe<SchoolFilter>;
};

export type MutationSendInvitationTo8baseArgs = {
  inviteEmail: Scalars['String'];
};

export type MutationSettingsUpdateArgs = {
  data: SettingUpdateInput;
};

export type MutationShortLinkCreateArgs = {
  data: ShortLinkCreateInput;
};

export type MutationShortLinkCreateManyArgs = {
  data: Array<Maybe<ShortLinkCreateManyInput>>;
};

export type MutationShortLinkDeleteArgs = {
  data?: Maybe<ShortLinkDeleteInput>;
  filter?: Maybe<ShortLinkKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationShortLinkDeleteByFilterArgs = {
  filter: ShortLinkFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationShortLinkDestroyArgs = {
  filter?: Maybe<ShortLinkKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationShortLinkDestroyByFilterArgs = {
  filter: ShortLinkFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationShortLinkRestoreArgs = {
  id: Scalars['String'];
};

export type MutationShortLinkUpdateArgs = {
  data: ShortLinkUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<ShortLinkKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationShortLinkUpdateByFilterArgs = {
  data: ShortLinkUpdateByFilterInput;
  filter?: Maybe<ShortLinkFilter>;
};

export type MutationShortUrlCreateArgs = {
  data: ShortUrlCreateInput;
};

export type MutationShortUrlCreateManyArgs = {
  data: Array<Maybe<ShortUrlCreateManyInput>>;
};

export type MutationShortUrlDeleteArgs = {
  data?: Maybe<ShortUrlDeleteInput>;
  filter?: Maybe<ShortUrlKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationShortUrlDeleteByFilterArgs = {
  filter: ShortUrlFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationShortUrlDestroyArgs = {
  filter?: Maybe<ShortUrlKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationShortUrlDestroyByFilterArgs = {
  filter: ShortUrlFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationShortUrlRestoreArgs = {
  id: Scalars['String'];
};

export type MutationShortUrlUpdateArgs = {
  data: ShortUrlUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<ShortUrlKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationShortUrlUpdateByFilterArgs = {
  data: ShortUrlUpdateByFilterInput;
  filter?: Maybe<ShortUrlFilter>;
};

export type MutationSignUpCreateArgs = {
  data: SignUpCreateInput;
};

export type MutationSignUpCreateManyArgs = {
  data: Array<Maybe<SignUpCreateManyInput>>;
};

export type MutationSignUpDeleteArgs = {
  data?: Maybe<SignUpDeleteInput>;
  filter?: Maybe<SignUpKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSignUpDeleteByFilterArgs = {
  filter: SignUpFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSignUpDestroyArgs = {
  filter?: Maybe<SignUpKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSignUpDestroyByFilterArgs = {
  filter: SignUpFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSignUpRestoreArgs = {
  id: Scalars['String'];
};

export type MutationSignUpUpdateArgs = {
  data: SignUpUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<SignUpKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationSignUpUpdateByFilterArgs = {
  data: SignUpUpdateByFilterInput;
  filter?: Maybe<SignUpFilter>;
};

export type MutationStripeAccountCreateArgs = {
  data: StripeAccountCreateInput;
};

export type MutationStripeAccountCreateManyArgs = {
  data: Array<Maybe<StripeAccountCreateManyInput>>;
};

export type MutationStripeAccountDeleteArgs = {
  data?: Maybe<StripeAccountDeleteInput>;
  filter?: Maybe<StripeAccountKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationStripeAccountDeleteByFilterArgs = {
  filter: StripeAccountFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationStripeAccountDestroyArgs = {
  filter?: Maybe<StripeAccountKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationStripeAccountDestroyByFilterArgs = {
  filter: StripeAccountFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationStripeAccountRestoreArgs = {
  id: Scalars['String'];
};

export type MutationStripeAccountUpdateArgs = {
  data: StripeAccountUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<StripeAccountKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationStripeAccountUpdateByFilterArgs = {
  data: StripeAccountUpdateByFilterInput;
  filter?: Maybe<StripeAccountFilter>;
};

export type MutationTableCreateArgs = {
  data: TableCreateInput;
};

export type MutationTableDeleteArgs = {
  data: TableDeleteInput;
};

export type MutationTableUpdateArgs = {
  data: TableUpdateInput;
};

export type MutationTeamCreateArgs = {
  data: TeamCreateInput;
};

export type MutationTeamCreateManyArgs = {
  data: Array<Maybe<TeamCreateManyInput>>;
};

export type MutationTeamDeleteArgs = {
  data?: Maybe<TeamDeleteInput>;
  filter?: Maybe<TeamKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationTeamDeleteByFilterArgs = {
  filter: TeamFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationTeamDestroyArgs = {
  filter?: Maybe<TeamKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationTeamDestroyByFilterArgs = {
  filter: TeamFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationTeamMemberDeleteArgs = {
  data?: Maybe<TeamMemberDeleteInput>;
  filter?: Maybe<TeamMemberKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationTeamMemberDeleteByFilterArgs = {
  filter: TeamMemberFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationTeamMemberDestroyArgs = {
  filter?: Maybe<TeamMemberKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationTeamMemberDestroyByFilterArgs = {
  filter: TeamMemberFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationTeamMemberRestoreArgs = {
  id: Scalars['String'];
};

export type MutationTeamMemberUpdateArgs = {
  data: TeamMemberUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<TeamMemberKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationTeamMemberUpdateByFilterArgs = {
  data: TeamMemberUpdateByFilterInput;
  filter?: Maybe<TeamMemberFilter>;
};

export type MutationTeamProfileCreateArgs = {
  data: TeamProfileCreateInput;
};

export type MutationTeamProfileCreateManyArgs = {
  data: Array<Maybe<TeamProfileCreateManyInput>>;
};

export type MutationTeamProfileDeleteArgs = {
  data?: Maybe<TeamProfileDeleteInput>;
  filter?: Maybe<TeamProfileKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationTeamProfileDeleteByFilterArgs = {
  filter: TeamProfileFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationTeamProfileDestroyArgs = {
  filter?: Maybe<TeamProfileKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationTeamProfileDestroyByFilterArgs = {
  filter: TeamProfileFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationTeamProfileRestoreArgs = {
  id: Scalars['String'];
};

export type MutationTeamProfileUpdateArgs = {
  data: TeamProfileUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<TeamProfileKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationTeamRestoreArgs = {
  id: Scalars['String'];
};

export type MutationTeamUpdateArgs = {
  data: TeamUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<TeamKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationTeamUpdateByFilterArgs = {
  data: TeamUpdateByFilterInput;
  filter?: Maybe<TeamFilter>;
};

export type MutationTextCreateArgs = {
  data: TextCreateInput;
};

export type MutationTextCreateManyArgs = {
  data: Array<Maybe<TextCreateManyInput>>;
};

export type MutationTextDeleteArgs = {
  data?: Maybe<TextDeleteInput>;
  filter?: Maybe<TextKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationTextDeleteByFilterArgs = {
  filter: TextFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationTextDestroyArgs = {
  filter?: Maybe<TextKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationTextDestroyByFilterArgs = {
  filter: TextFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationTextRestoreArgs = {
  id: Scalars['String'];
};

export type MutationTextUpdateArgs = {
  data: TextUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<TextKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationTextUpdateByFilterArgs = {
  data: TextUpdateByFilterInput;
  filter?: Maybe<TextFilter>;
};

export type MutationUnknowCreateArgs = {
  data: UnknowCreateInput;
};

export type MutationUnknowCreateManyArgs = {
  data: Array<Maybe<UnknowCreateManyInput>>;
};

export type MutationUnknowDeleteArgs = {
  data?: Maybe<UnknowDeleteInput>;
  filter?: Maybe<UnknowKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationUnknowDeleteByFilterArgs = {
  filter: UnknowFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationUnknowDestroyArgs = {
  filter?: Maybe<UnknowKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationUnknowDestroyByFilterArgs = {
  filter: UnknowFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationUnknowRestoreArgs = {
  id: Scalars['String'];
};

export type MutationUnknowUpdateArgs = {
  data: UnknowUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<UnknowKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationUnknowUpdateByFilterArgs = {
  data: UnknowUpdateByFilterInput;
  filter?: Maybe<UnknowFilter>;
};

export type MutationUploadCsvArgs = {
  entity: Scalars['String'];
  source: Scalars['JSON'];
};

export type MutationUserChangePasswordArgs = {
  data: ChangePasswordInput;
};

export type MutationUserCreateArgs = {
  data: UserCreateInput;
};

export type MutationUserCreateManyArgs = {
  data: Array<Maybe<UserCreateManyInput>>;
};

export type MutationUserDeleteArgs = {
  data?: Maybe<UserDeleteInput>;
  filter?: Maybe<UserKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationUserDeleteByFilterArgs = {
  filter: UserFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationUserDestroyArgs = {
  filter?: Maybe<UserKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationUserDestroyByFilterArgs = {
  filter: UserFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationUserLoginArgs = {
  data: UserLoginInput;
};

export type MutationUserPasswordForgotArgs = {
  data: PasswordForgotInput;
};

export type MutationUserPasswordForgotConfirmArgs = {
  data: PasswordForgotConfirmInput;
};

export type MutationUserProfileCreateArgs = {
  data: UserProfileCreateInput;
};

export type MutationUserProfileCreateManyArgs = {
  data: Array<Maybe<UserProfileCreateManyInput>>;
};

export type MutationUserProfileDeleteArgs = {
  data?: Maybe<UserProfileDeleteInput>;
  filter?: Maybe<UserProfileKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationUserProfileDeleteByFilterArgs = {
  filter: UserProfileFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationUserProfileDestroyArgs = {
  filter?: Maybe<UserProfileKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationUserProfileDestroyByFilterArgs = {
  filter: UserProfileFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationUserProfileRestoreArgs = {
  id: Scalars['String'];
};

export type MutationUserProfileUpdateArgs = {
  data: UserProfileUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<UserProfileKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationUserRefreshTokenArgs = {
  data: RefreshTokenInput;
};

export type MutationUserRestoreArgs = {
  id: Scalars['String'];
};

export type MutationUserSchoolCreateArgs = {
  data: UserSchoolCreateInput;
};

export type MutationUserSchoolCreateManyArgs = {
  data: Array<Maybe<UserSchoolCreateManyInput>>;
};

export type MutationUserSchoolDeleteArgs = {
  data?: Maybe<UserSchoolDeleteInput>;
  filter?: Maybe<UserSchoolKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationUserSchoolDeleteByFilterArgs = {
  filter: UserSchoolFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationUserSchoolDestroyArgs = {
  filter?: Maybe<UserSchoolKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationUserSchoolDestroyByFilterArgs = {
  filter: UserSchoolFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationUserSchoolRestoreArgs = {
  id: Scalars['String'];
};

export type MutationUserSchoolUpdateArgs = {
  data: UserSchoolUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<UserSchoolKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationUserSignUpArgs = {
  authProfileId?: Maybe<Scalars['ID']>;
  user: UserCreateInput;
};

export type MutationUserSignUpResendArgs = {
  data: SignUpResendInput;
};

export type MutationUserSignUpWithPasswordArgs = {
  authProfileId?: Maybe<Scalars['ID']>;
  password: Scalars['String'];
  user: UserCreateInput;
};

export type MutationUserSignUpWithTokenArgs = {
  authProfileId?: Maybe<Scalars['ID']>;
  user: UserCreateInput;
};

export type MutationUserUpdateArgs = {
  data: UserUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<UserKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationUserUpdateByFilterArgs = {
  data: UserUpdateByFilterInput;
  filter?: Maybe<UserFilter>;
};

export type MutationUserVerificationEmailResendArgs = {
  authProfileId?: Maybe<Scalars['ID']>;
  data: VerificationEmailResendInput;
};

export type MutationVideoCreateArgs = {
  data: VideoCreateInput;
};

export type MutationVideoCreateManyArgs = {
  data: Array<Maybe<VideoCreateManyInput>>;
};

export type MutationVideoDeleteArgs = {
  data?: Maybe<VideoDeleteInput>;
  filter?: Maybe<VideoKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationVideoDeleteByFilterArgs = {
  filter: VideoFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationVideoDestroyArgs = {
  filter?: Maybe<VideoKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationVideoDestroyByFilterArgs = {
  filter: VideoFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationVideoLinkCreateArgs = {
  data: VideoLinkCreateInput;
};

export type MutationVideoLinkCreateManyArgs = {
  data: Array<Maybe<VideoLinkCreateManyInput>>;
};

export type MutationVideoLinkDeleteArgs = {
  data?: Maybe<VideoLinkDeleteInput>;
  filter?: Maybe<VideoLinkKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationVideoLinkDeleteByFilterArgs = {
  filter: VideoLinkFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationVideoLinkDestroyArgs = {
  filter?: Maybe<VideoLinkKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationVideoLinkDestroyByFilterArgs = {
  filter: VideoLinkFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationVideoLinkRestoreArgs = {
  id: Scalars['String'];
};

export type MutationVideoLinkUpdateArgs = {
  data: VideoLinkUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<VideoLinkKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationVideoLinkUpdateByFilterArgs = {
  data: VideoLinkUpdateByFilterInput;
  filter?: Maybe<VideoLinkFilter>;
};

export type MutationVideoRestoreArgs = {
  id: Scalars['String'];
};

export type MutationVideoUpdateArgs = {
  data: VideoUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<VideoKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationVideoUpdateByFilterArgs = {
  data: VideoUpdateByFilterInput;
  filter?: Maybe<VideoFilter>;
};

export type MutationViewCreateArgs = {
  data: ViewCreateInput;
};

export type MutationViewUpdateArgs = {
  data: ViewUpdateInput;
};

export type MutationWaitingListCreateArgs = {
  data: WaitingListCreateInput;
};

export type MutationWaitingListCreateManyArgs = {
  data: Array<Maybe<WaitingListCreateManyInput>>;
};

export type MutationWaitingListDeleteArgs = {
  data?: Maybe<WaitingListDeleteInput>;
  filter?: Maybe<WaitingListKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationWaitingListDeleteByFilterArgs = {
  filter: WaitingListFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationWaitingListDestroyArgs = {
  filter?: Maybe<WaitingListKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationWaitingListDestroyByFilterArgs = {
  filter: WaitingListFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationWaitingListRestoreArgs = {
  id: Scalars['String'];
};

export type MutationWaitingListUpdateArgs = {
  data: WaitingListUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<WaitingListKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationWaitingListUpdateByFilterArgs = {
  data: WaitingListUpdateByFilterInput;
  filter?: Maybe<WaitingListFilter>;
};

export type MutationWorkspaceCreateArgs = {
  data: WorkspaceCreateMutationInput;
};

export type MutationWorkspaceCreateAsyncArgs = {
  data: WorkspaceCreateMutationInput;
};

export type MutationWorkspaceDeleteArgs = {
  data: WorkspaceDeleteMutationInput;
};

export type MutationWorkspaceLeaveArgs = {
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationWorkspaceUpdateArgs = {
  data: WorkspaceUpdateMutationInput;
};

export type MutationXCustomerCreateArgs = {
  data: XCustomerCreateInput;
};

export type MutationXCustomerCreateManyArgs = {
  data: Array<Maybe<XCustomerCreateManyInput>>;
};

export type MutationXCustomerDeleteArgs = {
  data?: Maybe<XCustomerDeleteInput>;
  filter?: Maybe<XCustomerKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationXCustomerDeleteByFilterArgs = {
  filter: XCustomerFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationXCustomerDestroyArgs = {
  filter?: Maybe<XCustomerKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationXCustomerDestroyByFilterArgs = {
  filter: XCustomerFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationXCustomerRestoreArgs = {
  id: Scalars['String'];
};

export type MutationXCustomerUpdateArgs = {
  data: XCustomerUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<XCustomerKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationXCustomerUpdateByFilterArgs = {
  data: XCustomerUpdateByFilterInput;
  filter?: Maybe<XCustomerFilter>;
};

export type MutationXSchoolCustomerCreateArgs = {
  data: XSchoolCustomerCreateInput;
};

export type MutationXSchoolCustomerCreateManyArgs = {
  data: Array<Maybe<XSchoolCustomerCreateManyInput>>;
};

export type MutationXSchoolCustomerDeleteArgs = {
  data?: Maybe<XSchoolCustomerDeleteInput>;
  filter?: Maybe<XSchoolCustomerKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationXSchoolCustomerDeleteByFilterArgs = {
  filter: XSchoolCustomerFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationXSchoolCustomerDestroyArgs = {
  filter?: Maybe<XSchoolCustomerKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationXSchoolCustomerDestroyByFilterArgs = {
  filter: XSchoolCustomerFilter;
  force?: Maybe<Scalars['Boolean']>;
};

export type MutationXSchoolCustomerRestoreArgs = {
  id: Scalars['String'];
};

export type MutationXSchoolCustomerUpdateArgs = {
  data: XSchoolCustomerUpdateInput;
  destroyDetached?: Maybe<Scalars['Boolean']>;
  filter?: Maybe<XSchoolCustomerKeyFilter>;
  force?: Maybe<Scalars['Boolean']>;
};

export enum MutationType {
  Create = 'create',
  Delete = 'delete',
  Destroy = 'destroy',
  Update = 'update',
}

export enum NotificationStatusType {
  Done = 'done',
}

/** Number Field Attributes */
export type NumberFieldTypeAttributes = {
  __typename?: 'NumberFieldTypeAttributes';
  autoIncrement: Maybe<Scalars['Boolean']>;
  currency: Maybe<Scalars['String']>;
  format: Scalars['String'];
  isBigInt: Maybe<Scalars['Boolean']>;
  maxValue: Maybe<Scalars['Float']>;
  minValue: Maybe<Scalars['Float']>;
  precision: Maybe<Scalars['Int']>;
};

/** Number Type Format Enum */
export enum NumberTypeFormatEnum {
  Currency = 'CURRENCY',
  Fraction = 'FRACTION',
  Number = 'NUMBER',
  Percentage = 'PERCENTAGE',
  Scientific = 'SCIENTIFIC',
}

export type OrganizationUserInvitationResponse = {
  __typename?: 'OrganizationUserInvitationResponse';
  invitationId: Scalars['String'];
};

/** PasswordForgotConfirmInput */
export type PasswordForgotConfirmInput = {
  authProfileId: Scalars['ID'];
  code: Scalars['String'];
  email: Scalars['String'];
  newPassword: Scalars['String'];
};

/** PasswordForgotInput */
export type PasswordForgotInput = {
  authProfileId: Scalars['ID'];
  email: Scalars['String'];
};

export type PatternFunctionArguments = {
  escape?: Maybe<Scalars['String']>;
  pattern: Scalars['String'];
};

export type Permission = {
  __typename?: 'Permission';
  _description: Maybe<Scalars['String']>;
  appId: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  permission: Maybe<Scalars['JSON']>;
  resource: Maybe<Scalars['String']>;
  resourceType: Maybe<Scalars['String']>;
  role: Maybe<Role>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

export type PermissionFilter = {
  AND?: Maybe<Array<PermissionFilter>>;
  OR?: Maybe<Array<PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  appId?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  resource?: Maybe<StringPredicate>;
  resourceType?: Maybe<StringPredicate>;
  role?: Maybe<RoleFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type PermissionGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  appId?: Maybe<Array<GroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  permission?: Maybe<Array<GroupByField>>;
  resource?: Maybe<Array<GroupByField>>;
  resourceType?: Maybe<Array<GroupByField>>;
  role?: Maybe<RoleGroupByQuery>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

/** Permission Filter */
export type PermissionInputFilter = {
  action?: Maybe<Scalars['String']>;
  applicationName?: Maybe<Scalars['String']>;
  resource?: Maybe<Scalars['String']>;
  resourceType?: Maybe<PermissionResourceTypeEnum>;
};

/** PermissionListResponse output */
export type PermissionListResponse = {
  __typename?: 'PermissionListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<Permission>;
};

/** Permissions subscription payload */
export type PermissionPayload = {
  __typename?: 'PermissionPayload';
  mutation: MutationType;
  node: Maybe<Permission>;
  previousValues: Maybe<Permission>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type PermissionRelationFilter = {
  every?: Maybe<PermissionFilter>;
  none?: Maybe<PermissionFilter>;
  some?: Maybe<PermissionFilter>;
};

export enum PermissionResourceTypeEnum {
  Custom = 'custom',
  Data = 'data',
}

/** Permissions subscription filter */
export type PermissionSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<PermissionFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

export type Permission_PermissionFilter = {
  AND?: Maybe<Array<Permission_PermissionFilter>>;
  OR?: Maybe<Array<Permission_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  appId?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  resource?: Maybe<StringPredicate>;
  resourceType?: Maybe<StringPredicate>;
  role?: Maybe<Role_PermissionFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type Permission_PermissionRelationFilter = {
  every?: Maybe<Permission_PermissionFilter>;
  none?: Maybe<Permission_PermissionFilter>;
  some?: Maybe<Permission_PermissionFilter>;
};

/** custom permissions input */
export type PermissionsCustom = {
  api?: Maybe<PermissionsCustomApi>;
  data?: Maybe<PermissionsCustomData>;
  logic?: Maybe<PermissionsCustomLogic>;
  settings?: Maybe<PermissionsCustomSettings>;
  users?: Maybe<PermissionsCustomUsers>;
};

export type PermissionsCustomApi = {
  createCheckoutSessionResolver?: Maybe<PermissionsCustomApiResolver>;
  createCustomerResolver?: Maybe<PermissionsCustomApiResolver>;
  createPortalResolver?: Maybe<PermissionsCustomApiResolver>;
  createPrivateClassResolver?: Maybe<PermissionsCustomApiResolver>;
  createProductResolver?: Maybe<PermissionsCustomApiResolver>;
  createSchoolStripeAccountResolver?: Maybe<PermissionsCustomApiResolver>;
  createStripeAccountResolver?: Maybe<PermissionsCustomApiResolver>;
  generateAccountLinkResolver?: Maybe<PermissionsCustomApiResolver>;
  privateClassCheckout?: Maybe<PermissionsCustomApiResolver>;
  uploadCSV?: Maybe<PermissionsCustomApiResolver>;
};

export type PermissionsCustomApiResolver = {
  allow: Scalars['Boolean'];
};

export type PermissionsCustomData = {
  schemaManagement?: Maybe<PermissionsCustomDataSchemaManagement>;
  viewerAccess?: Maybe<PermissionsCustomDataViewerAccess>;
};

export type PermissionsCustomDataSchemaManagement = {
  allow: Scalars['Boolean'];
};

export type PermissionsCustomDataViewerAccess = {
  allow: Scalars['Boolean'];
};

export type PermissionsCustomLogic = {
  deploy?: Maybe<PermissionsCustomLogicDeploy>;
  invoke?: Maybe<PermissionsCustomLogicInvoke>;
  logs?: Maybe<PermissionsCustomLogicLogs>;
  view?: Maybe<PermissionsCustomLogicView>;
};

export type PermissionsCustomLogicDeploy = {
  allow: Scalars['Boolean'];
};

export type PermissionsCustomLogicInvoke = {
  allow: Scalars['Boolean'];
};

export type PermissionsCustomLogicLogs = {
  allow: Scalars['Boolean'];
};

export type PermissionsCustomLogicView = {
  allow: Scalars['Boolean'];
};

export type PermissionsCustomSettings = {
  workspaceAdministration?: Maybe<PermissionsCustomSettingsWorkspaceAdministration>;
};

export type PermissionsCustomSettingsWorkspaceAdministration = {
  allow: Scalars['Boolean'];
};

export type PermissionsCustomUsers = {
  teamAdministration?: Maybe<PermissionsCustomUsersTeamAdministration>;
};

export type PermissionsCustomUsersTeamAdministration = {
  allow: Scalars['Boolean'];
};

/** Schema tables permissions input */
export type PermissionsData = {
  Achievements?: Maybe<PermissionsDataAchievements>;
  Brand?: Maybe<PermissionsDataBrand>;
  Checkin?: Maybe<PermissionsDataCheckin>;
  CiCdMigrations?: Maybe<PermissionsDataCiCdMigrations>;
  Competition?: Maybe<PermissionsDataCompetition>;
  Countries?: Maybe<PermissionsDataCountries>;
  Customer?: Maybe<PermissionsDataCustomer>;
  Discount?: Maybe<PermissionsDataDiscount>;
  EmailTemplate?: Maybe<PermissionsDataEmailTemplate>;
  Files?: Maybe<PermissionsDataFiles>;
  GroupalClass?: Maybe<PermissionsDataGroupalClass>;
  LanguageCountry?: Maybe<PermissionsDataLanguageCountry>;
  Languages?: Maybe<PermissionsDataLanguages>;
  MartialArt?: Maybe<PermissionsDataMartialArt>;
  Plan?: Maybe<PermissionsDataPlan>;
  PlanCategory?: Maybe<PermissionsDataPlanCategory>;
  PreSignup?: Maybe<PermissionsDataPreSignup>;
  PrivateClassPurchase?: Maybe<PermissionsDataPrivateClassPurchase>;
  PrivateClasses?: Maybe<PermissionsDataPrivateClasses>;
  Product?: Maybe<PermissionsDataProduct>;
  ProductCategory?: Maybe<PermissionsDataProductCategory>;
  ProductSubscription?: Maybe<PermissionsDataProductSubscription>;
  Profile?: Maybe<PermissionsDataProfile>;
  Rank?: Maybe<PermissionsDataRank>;
  RankIssued?: Maybe<PermissionsDataRankIssued>;
  Roles?: Maybe<PermissionsDataRoles>;
  Schedule?: Maybe<PermissionsDataSchedule>;
  School?: Maybe<PermissionsDataSchool>;
  SchoolMartialArt?: Maybe<PermissionsDataSchoolMartialArt>;
  SchoolProfile?: Maybe<PermissionsDataSchoolProfile>;
  SchoolStripeAccount?: Maybe<PermissionsDataSchoolStripeAccount>;
  SchoolTeam?: Maybe<PermissionsDataSchoolTeam>;
  ShortLink?: Maybe<PermissionsDataShortLink>;
  ShortUrl?: Maybe<PermissionsDataShortUrl>;
  SignUp?: Maybe<PermissionsDataSignUp>;
  StripeAccount?: Maybe<PermissionsDataStripeAccount>;
  Team?: Maybe<PermissionsDataTeam>;
  TeamMembers?: Maybe<PermissionsDataTeamMembers>;
  TeamProfile?: Maybe<PermissionsDataTeamProfile>;
  Text?: Maybe<PermissionsDataText>;
  Unknow?: Maybe<PermissionsDataUnknow>;
  UserProfile?: Maybe<PermissionsDataUserProfile>;
  UserSchool?: Maybe<PermissionsDataUserSchool>;
  Users?: Maybe<PermissionsDataUsers>;
  Video?: Maybe<PermissionsDataVideo>;
  VideoLink?: Maybe<PermissionsDataVideoLink>;
  WaitingList?: Maybe<PermissionsDataWaitingList>;
  XCustomer?: Maybe<PermissionsDataXCustomer>;
  XSchoolCustomer?: Maybe<PermissionsDataXSchoolCustomer>;
};

export type PermissionsDataAchievements = {
  create?: Maybe<PermissionsDataAchievementsCreate>;
  delete?: Maybe<PermissionsDataAchievementsDelete>;
  destroy?: Maybe<PermissionsDataAchievementsDestroy>;
  read?: Maybe<PermissionsDataAchievementsRead>;
  update?: Maybe<PermissionsDataAchievementsUpdate>;
};

export type PermissionsDataAchievementsCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataAchievementsDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataAchievementsDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataAchievementsRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<AchievementFieldsPermissions>;
  filter?: Maybe<Achievement_PermissionFilter>;
};

export type PermissionsDataAchievementsUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<AchievementFieldsPermissions>;
  filter?: Maybe<Achievement_PermissionFilter>;
};

export type PermissionsDataBrand = {
  create?: Maybe<PermissionsDataBrandCreate>;
  delete?: Maybe<PermissionsDataBrandDelete>;
  destroy?: Maybe<PermissionsDataBrandDestroy>;
  read?: Maybe<PermissionsDataBrandRead>;
  update?: Maybe<PermissionsDataBrandUpdate>;
};

export type PermissionsDataBrandCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataBrandDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataBrandDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataBrandRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<BrandFieldsPermissions>;
  filter?: Maybe<Brand_PermissionFilter>;
};

export type PermissionsDataBrandUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<BrandFieldsPermissions>;
  filter?: Maybe<Brand_PermissionFilter>;
};

export type PermissionsDataCheckin = {
  create?: Maybe<PermissionsDataCheckinCreate>;
  delete?: Maybe<PermissionsDataCheckinDelete>;
  destroy?: Maybe<PermissionsDataCheckinDestroy>;
  read?: Maybe<PermissionsDataCheckinRead>;
  update?: Maybe<PermissionsDataCheckinUpdate>;
};

export type PermissionsDataCheckinCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataCheckinDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataCheckinDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataCheckinRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<CheckinFieldsPermissions>;
  filter?: Maybe<Checkin_PermissionFilter>;
};

export type PermissionsDataCheckinUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<CheckinFieldsPermissions>;
  filter?: Maybe<Checkin_PermissionFilter>;
};

export type PermissionsDataCiCdMigrations = {
  create?: Maybe<PermissionsDataCiCdMigrationsCreate>;
  delete?: Maybe<PermissionsDataCiCdMigrationsDelete>;
  destroy?: Maybe<PermissionsDataCiCdMigrationsDestroy>;
  read?: Maybe<PermissionsDataCiCdMigrationsRead>;
  update?: Maybe<PermissionsDataCiCdMigrationsUpdate>;
};

export type PermissionsDataCiCdMigrationsCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataCiCdMigrationsDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataCiCdMigrationsDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataCiCdMigrationsRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<CiCdMigrationFieldsPermissions>;
  filter?: Maybe<CiCdMigration_PermissionFilter>;
};

export type PermissionsDataCiCdMigrationsUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<CiCdMigrationFieldsPermissions>;
  filter?: Maybe<CiCdMigration_PermissionFilter>;
};

export type PermissionsDataCompetition = {
  create?: Maybe<PermissionsDataCompetitionCreate>;
  delete?: Maybe<PermissionsDataCompetitionDelete>;
  destroy?: Maybe<PermissionsDataCompetitionDestroy>;
  read?: Maybe<PermissionsDataCompetitionRead>;
  update?: Maybe<PermissionsDataCompetitionUpdate>;
};

export type PermissionsDataCompetitionCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataCompetitionDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataCompetitionDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataCompetitionRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<CompetitionFieldsPermissions>;
  filter?: Maybe<Competition_PermissionFilter>;
};

export type PermissionsDataCompetitionUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<CompetitionFieldsPermissions>;
  filter?: Maybe<Competition_PermissionFilter>;
};

export type PermissionsDataCountries = {
  create?: Maybe<PermissionsDataCountriesCreate>;
  delete?: Maybe<PermissionsDataCountriesDelete>;
  destroy?: Maybe<PermissionsDataCountriesDestroy>;
  read?: Maybe<PermissionsDataCountriesRead>;
  update?: Maybe<PermissionsDataCountriesUpdate>;
};

export type PermissionsDataCountriesCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataCountriesDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataCountriesDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataCountriesRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<CountryFieldsPermissions>;
  filter?: Maybe<Country_PermissionFilter>;
};

export type PermissionsDataCountriesUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<CountryFieldsPermissions>;
  filter?: Maybe<Country_PermissionFilter>;
};

export type PermissionsDataCustomer = {
  create?: Maybe<PermissionsDataCustomerCreate>;
  delete?: Maybe<PermissionsDataCustomerDelete>;
  destroy?: Maybe<PermissionsDataCustomerDestroy>;
  read?: Maybe<PermissionsDataCustomerRead>;
  update?: Maybe<PermissionsDataCustomerUpdate>;
};

export type PermissionsDataCustomerCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataCustomerDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataCustomerDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataCustomerRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<CustomerFieldsPermissions>;
  filter?: Maybe<Customer_PermissionFilter>;
};

export type PermissionsDataCustomerUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<CustomerFieldsPermissions>;
  filter?: Maybe<Customer_PermissionFilter>;
};

export type PermissionsDataDiscount = {
  create?: Maybe<PermissionsDataDiscountCreate>;
  delete?: Maybe<PermissionsDataDiscountDelete>;
  destroy?: Maybe<PermissionsDataDiscountDestroy>;
  read?: Maybe<PermissionsDataDiscountRead>;
  update?: Maybe<PermissionsDataDiscountUpdate>;
};

export type PermissionsDataDiscountCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataDiscountDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataDiscountDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataDiscountRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<DiscountFieldsPermissions>;
  filter?: Maybe<Discount_PermissionFilter>;
};

export type PermissionsDataDiscountUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<DiscountFieldsPermissions>;
  filter?: Maybe<Discount_PermissionFilter>;
};

export type PermissionsDataEmailTemplate = {
  create?: Maybe<PermissionsDataEmailTemplateCreate>;
  delete?: Maybe<PermissionsDataEmailTemplateDelete>;
  destroy?: Maybe<PermissionsDataEmailTemplateDestroy>;
  read?: Maybe<PermissionsDataEmailTemplateRead>;
  update?: Maybe<PermissionsDataEmailTemplateUpdate>;
};

export type PermissionsDataEmailTemplateCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataEmailTemplateDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataEmailTemplateDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataEmailTemplateRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<EmailTemplateFieldsPermissions>;
  filter?: Maybe<EmailTemplate_PermissionFilter>;
};

export type PermissionsDataEmailTemplateUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<EmailTemplateFieldsPermissions>;
  filter?: Maybe<EmailTemplate_PermissionFilter>;
};

export type PermissionsDataFiles = {
  create?: Maybe<PermissionsDataFilesCreate>;
  delete?: Maybe<PermissionsDataFilesDelete>;
  destroy?: Maybe<PermissionsDataFilesDestroy>;
  read?: Maybe<PermissionsDataFilesRead>;
  update?: Maybe<PermissionsDataFilesUpdate>;
};

export type PermissionsDataFilesCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataFilesDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataFilesDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataFilesRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<FileFieldsPermissions>;
  filter?: Maybe<File_PermissionFilter>;
};

export type PermissionsDataFilesUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<FileFieldsPermissions>;
  filter?: Maybe<File_PermissionFilter>;
};

export type PermissionsDataGroupalClass = {
  create?: Maybe<PermissionsDataGroupalClassCreate>;
  delete?: Maybe<PermissionsDataGroupalClassDelete>;
  destroy?: Maybe<PermissionsDataGroupalClassDestroy>;
  read?: Maybe<PermissionsDataGroupalClassRead>;
  update?: Maybe<PermissionsDataGroupalClassUpdate>;
};

export type PermissionsDataGroupalClassCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataGroupalClassDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataGroupalClassDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataGroupalClassRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<GroupalClassFieldsPermissions>;
  filter?: Maybe<GroupalClass_PermissionFilter>;
};

export type PermissionsDataGroupalClassUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<GroupalClassFieldsPermissions>;
  filter?: Maybe<GroupalClass_PermissionFilter>;
};

export type PermissionsDataLanguageCountry = {
  create?: Maybe<PermissionsDataLanguageCountryCreate>;
  delete?: Maybe<PermissionsDataLanguageCountryDelete>;
  destroy?: Maybe<PermissionsDataLanguageCountryDestroy>;
  read?: Maybe<PermissionsDataLanguageCountryRead>;
  update?: Maybe<PermissionsDataLanguageCountryUpdate>;
};

export type PermissionsDataLanguageCountryCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataLanguageCountryDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataLanguageCountryDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataLanguageCountryRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<LanguageCountryFieldsPermissions>;
  filter?: Maybe<LanguageCountry_PermissionFilter>;
};

export type PermissionsDataLanguageCountryUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<LanguageCountryFieldsPermissions>;
  filter?: Maybe<LanguageCountry_PermissionFilter>;
};

export type PermissionsDataLanguages = {
  create?: Maybe<PermissionsDataLanguagesCreate>;
  delete?: Maybe<PermissionsDataLanguagesDelete>;
  destroy?: Maybe<PermissionsDataLanguagesDestroy>;
  read?: Maybe<PermissionsDataLanguagesRead>;
  update?: Maybe<PermissionsDataLanguagesUpdate>;
};

export type PermissionsDataLanguagesCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataLanguagesDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataLanguagesDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataLanguagesRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<LanguageFieldsPermissions>;
  filter?: Maybe<Language_PermissionFilter>;
};

export type PermissionsDataLanguagesUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<LanguageFieldsPermissions>;
  filter?: Maybe<Language_PermissionFilter>;
};

export type PermissionsDataMartialArt = {
  create?: Maybe<PermissionsDataMartialArtCreate>;
  delete?: Maybe<PermissionsDataMartialArtDelete>;
  destroy?: Maybe<PermissionsDataMartialArtDestroy>;
  read?: Maybe<PermissionsDataMartialArtRead>;
  update?: Maybe<PermissionsDataMartialArtUpdate>;
};

export type PermissionsDataMartialArtCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataMartialArtDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataMartialArtDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataMartialArtRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<MartialArtFieldsPermissions>;
  filter?: Maybe<MartialArt_PermissionFilter>;
};

export type PermissionsDataMartialArtUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<MartialArtFieldsPermissions>;
  filter?: Maybe<MartialArt_PermissionFilter>;
};

export type PermissionsDataPlan = {
  create?: Maybe<PermissionsDataPlanCreate>;
  delete?: Maybe<PermissionsDataPlanDelete>;
  destroy?: Maybe<PermissionsDataPlanDestroy>;
  read?: Maybe<PermissionsDataPlanRead>;
  update?: Maybe<PermissionsDataPlanUpdate>;
};

export type PermissionsDataPlanCategory = {
  create?: Maybe<PermissionsDataPlanCategoryCreate>;
  delete?: Maybe<PermissionsDataPlanCategoryDelete>;
  destroy?: Maybe<PermissionsDataPlanCategoryDestroy>;
  read?: Maybe<PermissionsDataPlanCategoryRead>;
  update?: Maybe<PermissionsDataPlanCategoryUpdate>;
};

export type PermissionsDataPlanCategoryCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataPlanCategoryDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataPlanCategoryDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataPlanCategoryRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<PlanCategoryFieldsPermissions>;
  filter?: Maybe<PlanCategory_PermissionFilter>;
};

export type PermissionsDataPlanCategoryUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<PlanCategoryFieldsPermissions>;
  filter?: Maybe<PlanCategory_PermissionFilter>;
};

export type PermissionsDataPlanCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataPlanDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataPlanDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataPlanRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<PlanFieldsPermissions>;
  filter?: Maybe<Plan_PermissionFilter>;
};

export type PermissionsDataPlanUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<PlanFieldsPermissions>;
  filter?: Maybe<Plan_PermissionFilter>;
};

export type PermissionsDataPreSignup = {
  create?: Maybe<PermissionsDataPreSignupCreate>;
  delete?: Maybe<PermissionsDataPreSignupDelete>;
  destroy?: Maybe<PermissionsDataPreSignupDestroy>;
  read?: Maybe<PermissionsDataPreSignupRead>;
  update?: Maybe<PermissionsDataPreSignupUpdate>;
};

export type PermissionsDataPreSignupCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataPreSignupDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataPreSignupDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataPreSignupRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<PreSignupFieldsPermissions>;
  filter?: Maybe<PreSignup_PermissionFilter>;
};

export type PermissionsDataPreSignupUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<PreSignupFieldsPermissions>;
  filter?: Maybe<PreSignup_PermissionFilter>;
};

export type PermissionsDataPrivateClassPurchase = {
  create?: Maybe<PermissionsDataPrivateClassPurchaseCreate>;
  delete?: Maybe<PermissionsDataPrivateClassPurchaseDelete>;
  destroy?: Maybe<PermissionsDataPrivateClassPurchaseDestroy>;
  read?: Maybe<PermissionsDataPrivateClassPurchaseRead>;
  update?: Maybe<PermissionsDataPrivateClassPurchaseUpdate>;
};

export type PermissionsDataPrivateClassPurchaseCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataPrivateClassPurchaseDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataPrivateClassPurchaseDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataPrivateClassPurchaseRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<PrivateClassPurchaseFieldsPermissions>;
  filter?: Maybe<PrivateClassPurchase_PermissionFilter>;
};

export type PermissionsDataPrivateClassPurchaseUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<PrivateClassPurchaseFieldsPermissions>;
  filter?: Maybe<PrivateClassPurchase_PermissionFilter>;
};

export type PermissionsDataPrivateClasses = {
  create?: Maybe<PermissionsDataPrivateClassesCreate>;
  delete?: Maybe<PermissionsDataPrivateClassesDelete>;
  destroy?: Maybe<PermissionsDataPrivateClassesDestroy>;
  read?: Maybe<PermissionsDataPrivateClassesRead>;
  update?: Maybe<PermissionsDataPrivateClassesUpdate>;
};

export type PermissionsDataPrivateClassesCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataPrivateClassesDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataPrivateClassesDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataPrivateClassesRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<PrivateClassFieldsPermissions>;
  filter?: Maybe<PrivateClass_PermissionFilter>;
};

export type PermissionsDataPrivateClassesUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<PrivateClassFieldsPermissions>;
  filter?: Maybe<PrivateClass_PermissionFilter>;
};

export type PermissionsDataProduct = {
  create?: Maybe<PermissionsDataProductCreate>;
  delete?: Maybe<PermissionsDataProductDelete>;
  destroy?: Maybe<PermissionsDataProductDestroy>;
  read?: Maybe<PermissionsDataProductRead>;
  update?: Maybe<PermissionsDataProductUpdate>;
};

export type PermissionsDataProductCategory = {
  create?: Maybe<PermissionsDataProductCategoryCreate>;
  delete?: Maybe<PermissionsDataProductCategoryDelete>;
  destroy?: Maybe<PermissionsDataProductCategoryDestroy>;
  read?: Maybe<PermissionsDataProductCategoryRead>;
  update?: Maybe<PermissionsDataProductCategoryUpdate>;
};

export type PermissionsDataProductCategoryCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataProductCategoryDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataProductCategoryDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataProductCategoryRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<ProductCategoryFieldsPermissions>;
  filter?: Maybe<ProductCategory_PermissionFilter>;
};

export type PermissionsDataProductCategoryUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<ProductCategoryFieldsPermissions>;
  filter?: Maybe<ProductCategory_PermissionFilter>;
};

export type PermissionsDataProductCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataProductDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataProductDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataProductRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<ProductFieldsPermissions>;
  filter?: Maybe<Product_PermissionFilter>;
};

export type PermissionsDataProductSubscription = {
  create?: Maybe<PermissionsDataProductSubscriptionCreate>;
  delete?: Maybe<PermissionsDataProductSubscriptionDelete>;
  destroy?: Maybe<PermissionsDataProductSubscriptionDestroy>;
  read?: Maybe<PermissionsDataProductSubscriptionRead>;
  update?: Maybe<PermissionsDataProductSubscriptionUpdate>;
};

export type PermissionsDataProductSubscriptionCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataProductSubscriptionDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataProductSubscriptionDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataProductSubscriptionRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<ProductSubscriptionFieldsPermissions>;
  filter?: Maybe<ProductSubscription_PermissionFilter>;
};

export type PermissionsDataProductSubscriptionUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<ProductSubscriptionFieldsPermissions>;
  filter?: Maybe<ProductSubscription_PermissionFilter>;
};

export type PermissionsDataProductUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<ProductFieldsPermissions>;
  filter?: Maybe<Product_PermissionFilter>;
};

export type PermissionsDataProfile = {
  create?: Maybe<PermissionsDataProfileCreate>;
  delete?: Maybe<PermissionsDataProfileDelete>;
  destroy?: Maybe<PermissionsDataProfileDestroy>;
  read?: Maybe<PermissionsDataProfileRead>;
  update?: Maybe<PermissionsDataProfileUpdate>;
};

export type PermissionsDataProfileCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataProfileDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataProfileDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataProfileRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<ProfileFieldsPermissions>;
  filter?: Maybe<Profile_PermissionFilter>;
};

export type PermissionsDataProfileUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<ProfileFieldsPermissions>;
  filter?: Maybe<Profile_PermissionFilter>;
};

export type PermissionsDataRank = {
  create?: Maybe<PermissionsDataRankCreate>;
  delete?: Maybe<PermissionsDataRankDelete>;
  destroy?: Maybe<PermissionsDataRankDestroy>;
  read?: Maybe<PermissionsDataRankRead>;
  update?: Maybe<PermissionsDataRankUpdate>;
};

export type PermissionsDataRankCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataRankDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataRankDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataRankIssued = {
  create?: Maybe<PermissionsDataRankIssuedCreate>;
  delete?: Maybe<PermissionsDataRankIssuedDelete>;
  destroy?: Maybe<PermissionsDataRankIssuedDestroy>;
  read?: Maybe<PermissionsDataRankIssuedRead>;
  update?: Maybe<PermissionsDataRankIssuedUpdate>;
};

export type PermissionsDataRankIssuedCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataRankIssuedDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataRankIssuedDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataRankIssuedRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<RankIssuedFieldsPermissions>;
  filter?: Maybe<RankIssued_PermissionFilter>;
};

export type PermissionsDataRankIssuedUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<RankIssuedFieldsPermissions>;
  filter?: Maybe<RankIssued_PermissionFilter>;
};

export type PermissionsDataRankRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<RankFieldsPermissions>;
  filter?: Maybe<Rank_PermissionFilter>;
};

export type PermissionsDataRankUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<RankFieldsPermissions>;
  filter?: Maybe<Rank_PermissionFilter>;
};

export type PermissionsDataRoles = {
  create?: Maybe<PermissionsDataRolesCreate>;
  delete?: Maybe<PermissionsDataRolesDelete>;
  destroy?: Maybe<PermissionsDataRolesDestroy>;
  read?: Maybe<PermissionsDataRolesRead>;
  update?: Maybe<PermissionsDataRolesUpdate>;
};

export type PermissionsDataRolesCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataRolesDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataRolesDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataRolesRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<RoleFieldsPermissions>;
  filter?: Maybe<Role_PermissionFilter>;
};

export type PermissionsDataRolesUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<RoleFieldsPermissions>;
  filter?: Maybe<Role_PermissionFilter>;
};

export type PermissionsDataSchedule = {
  create?: Maybe<PermissionsDataScheduleCreate>;
  delete?: Maybe<PermissionsDataScheduleDelete>;
  destroy?: Maybe<PermissionsDataScheduleDestroy>;
  read?: Maybe<PermissionsDataScheduleRead>;
  update?: Maybe<PermissionsDataScheduleUpdate>;
};

export type PermissionsDataScheduleCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataScheduleDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataScheduleDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataScheduleRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<ScheduleFieldsPermissions>;
  filter?: Maybe<Schedule_PermissionFilter>;
};

export type PermissionsDataScheduleUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<ScheduleFieldsPermissions>;
  filter?: Maybe<Schedule_PermissionFilter>;
};

export type PermissionsDataSchool = {
  create?: Maybe<PermissionsDataSchoolCreate>;
  delete?: Maybe<PermissionsDataSchoolDelete>;
  destroy?: Maybe<PermissionsDataSchoolDestroy>;
  read?: Maybe<PermissionsDataSchoolRead>;
  update?: Maybe<PermissionsDataSchoolUpdate>;
};

export type PermissionsDataSchoolCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataSchoolDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataSchoolDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataSchoolMartialArt = {
  create?: Maybe<PermissionsDataSchoolMartialArtCreate>;
  delete?: Maybe<PermissionsDataSchoolMartialArtDelete>;
  destroy?: Maybe<PermissionsDataSchoolMartialArtDestroy>;
  read?: Maybe<PermissionsDataSchoolMartialArtRead>;
  update?: Maybe<PermissionsDataSchoolMartialArtUpdate>;
};

export type PermissionsDataSchoolMartialArtCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataSchoolMartialArtDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataSchoolMartialArtDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataSchoolMartialArtRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<SchoolMartialArtFieldsPermissions>;
  filter?: Maybe<SchoolMartialArt_PermissionFilter>;
};

export type PermissionsDataSchoolMartialArtUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<SchoolMartialArtFieldsPermissions>;
  filter?: Maybe<SchoolMartialArt_PermissionFilter>;
};

export type PermissionsDataSchoolProfile = {
  create?: Maybe<PermissionsDataSchoolProfileCreate>;
  delete?: Maybe<PermissionsDataSchoolProfileDelete>;
  destroy?: Maybe<PermissionsDataSchoolProfileDestroy>;
  read?: Maybe<PermissionsDataSchoolProfileRead>;
  update?: Maybe<PermissionsDataSchoolProfileUpdate>;
};

export type PermissionsDataSchoolProfileCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataSchoolProfileDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataSchoolProfileDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataSchoolProfileRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<SchoolProfileFieldsPermissions>;
  filter?: Maybe<SchoolProfile_PermissionFilter>;
};

export type PermissionsDataSchoolProfileUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<SchoolProfileFieldsPermissions>;
  filter?: Maybe<SchoolProfile_PermissionFilter>;
};

export type PermissionsDataSchoolRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<SchoolFieldsPermissions>;
  filter?: Maybe<School_PermissionFilter>;
};

export type PermissionsDataSchoolStripeAccount = {
  create?: Maybe<PermissionsDataSchoolStripeAccountCreate>;
  delete?: Maybe<PermissionsDataSchoolStripeAccountDelete>;
  destroy?: Maybe<PermissionsDataSchoolStripeAccountDestroy>;
  read?: Maybe<PermissionsDataSchoolStripeAccountRead>;
  update?: Maybe<PermissionsDataSchoolStripeAccountUpdate>;
};

export type PermissionsDataSchoolStripeAccountCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataSchoolStripeAccountDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataSchoolStripeAccountDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataSchoolStripeAccountRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<SchoolStripeAccountFieldsPermissions>;
  filter?: Maybe<SchoolStripeAccount_PermissionFilter>;
};

export type PermissionsDataSchoolStripeAccountUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<SchoolStripeAccountFieldsPermissions>;
  filter?: Maybe<SchoolStripeAccount_PermissionFilter>;
};

export type PermissionsDataSchoolTeam = {
  create?: Maybe<PermissionsDataSchoolTeamCreate>;
  delete?: Maybe<PermissionsDataSchoolTeamDelete>;
  destroy?: Maybe<PermissionsDataSchoolTeamDestroy>;
  read?: Maybe<PermissionsDataSchoolTeamRead>;
  update?: Maybe<PermissionsDataSchoolTeamUpdate>;
};

export type PermissionsDataSchoolTeamCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataSchoolTeamDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataSchoolTeamDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataSchoolTeamRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<SchoolTeamFieldsPermissions>;
  filter?: Maybe<SchoolTeam_PermissionFilter>;
};

export type PermissionsDataSchoolTeamUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<SchoolTeamFieldsPermissions>;
  filter?: Maybe<SchoolTeam_PermissionFilter>;
};

export type PermissionsDataSchoolUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<SchoolFieldsPermissions>;
  filter?: Maybe<School_PermissionFilter>;
};

export type PermissionsDataShortLink = {
  create?: Maybe<PermissionsDataShortLinkCreate>;
  delete?: Maybe<PermissionsDataShortLinkDelete>;
  destroy?: Maybe<PermissionsDataShortLinkDestroy>;
  read?: Maybe<PermissionsDataShortLinkRead>;
  update?: Maybe<PermissionsDataShortLinkUpdate>;
};

export type PermissionsDataShortLinkCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataShortLinkDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataShortLinkDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataShortLinkRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<ShortLinkFieldsPermissions>;
  filter?: Maybe<ShortLink_PermissionFilter>;
};

export type PermissionsDataShortLinkUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<ShortLinkFieldsPermissions>;
  filter?: Maybe<ShortLink_PermissionFilter>;
};

export type PermissionsDataShortUrl = {
  create?: Maybe<PermissionsDataShortUrlCreate>;
  delete?: Maybe<PermissionsDataShortUrlDelete>;
  destroy?: Maybe<PermissionsDataShortUrlDestroy>;
  read?: Maybe<PermissionsDataShortUrlRead>;
  update?: Maybe<PermissionsDataShortUrlUpdate>;
};

export type PermissionsDataShortUrlCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataShortUrlDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataShortUrlDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataShortUrlRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<ShortUrlFieldsPermissions>;
  filter?: Maybe<ShortUrl_PermissionFilter>;
};

export type PermissionsDataShortUrlUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<ShortUrlFieldsPermissions>;
  filter?: Maybe<ShortUrl_PermissionFilter>;
};

export type PermissionsDataSignUp = {
  create?: Maybe<PermissionsDataSignUpCreate>;
  delete?: Maybe<PermissionsDataSignUpDelete>;
  destroy?: Maybe<PermissionsDataSignUpDestroy>;
  read?: Maybe<PermissionsDataSignUpRead>;
  update?: Maybe<PermissionsDataSignUpUpdate>;
};

export type PermissionsDataSignUpCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataSignUpDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataSignUpDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataSignUpRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<SignUpFieldsPermissions>;
  filter?: Maybe<SignUp_PermissionFilter>;
};

export type PermissionsDataSignUpUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<SignUpFieldsPermissions>;
  filter?: Maybe<SignUp_PermissionFilter>;
};

export type PermissionsDataStripeAccount = {
  create?: Maybe<PermissionsDataStripeAccountCreate>;
  delete?: Maybe<PermissionsDataStripeAccountDelete>;
  destroy?: Maybe<PermissionsDataStripeAccountDestroy>;
  read?: Maybe<PermissionsDataStripeAccountRead>;
  update?: Maybe<PermissionsDataStripeAccountUpdate>;
};

export type PermissionsDataStripeAccountCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataStripeAccountDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataStripeAccountDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataStripeAccountRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<StripeAccountFieldsPermissions>;
  filter?: Maybe<StripeAccount_PermissionFilter>;
};

export type PermissionsDataStripeAccountUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<StripeAccountFieldsPermissions>;
  filter?: Maybe<StripeAccount_PermissionFilter>;
};

export type PermissionsDataTeam = {
  create?: Maybe<PermissionsDataTeamCreate>;
  delete?: Maybe<PermissionsDataTeamDelete>;
  destroy?: Maybe<PermissionsDataTeamDestroy>;
  read?: Maybe<PermissionsDataTeamRead>;
  update?: Maybe<PermissionsDataTeamUpdate>;
};

export type PermissionsDataTeamCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataTeamDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataTeamDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataTeamMembers = {
  create?: Maybe<PermissionsDataTeamMembersCreate>;
  delete?: Maybe<PermissionsDataTeamMembersDelete>;
  destroy?: Maybe<PermissionsDataTeamMembersDestroy>;
  read?: Maybe<PermissionsDataTeamMembersRead>;
  update?: Maybe<PermissionsDataTeamMembersUpdate>;
};

export type PermissionsDataTeamMembersCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataTeamMembersDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataTeamMembersDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataTeamMembersRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<TeamMemberFieldsPermissions>;
  filter?: Maybe<TeamMember_PermissionFilter>;
};

export type PermissionsDataTeamMembersUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<TeamMemberFieldsPermissions>;
  filter?: Maybe<TeamMember_PermissionFilter>;
};

export type PermissionsDataTeamProfile = {
  create?: Maybe<PermissionsDataTeamProfileCreate>;
  delete?: Maybe<PermissionsDataTeamProfileDelete>;
  destroy?: Maybe<PermissionsDataTeamProfileDestroy>;
  read?: Maybe<PermissionsDataTeamProfileRead>;
  update?: Maybe<PermissionsDataTeamProfileUpdate>;
};

export type PermissionsDataTeamProfileCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataTeamProfileDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataTeamProfileDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataTeamProfileRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<TeamProfileFieldsPermissions>;
  filter?: Maybe<TeamProfile_PermissionFilter>;
};

export type PermissionsDataTeamProfileUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<TeamProfileFieldsPermissions>;
  filter?: Maybe<TeamProfile_PermissionFilter>;
};

export type PermissionsDataTeamRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<TeamFieldsPermissions>;
  filter?: Maybe<Team_PermissionFilter>;
};

export type PermissionsDataTeamUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<TeamFieldsPermissions>;
  filter?: Maybe<Team_PermissionFilter>;
};

export type PermissionsDataText = {
  create?: Maybe<PermissionsDataTextCreate>;
  delete?: Maybe<PermissionsDataTextDelete>;
  destroy?: Maybe<PermissionsDataTextDestroy>;
  read?: Maybe<PermissionsDataTextRead>;
  update?: Maybe<PermissionsDataTextUpdate>;
};

export type PermissionsDataTextCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataTextDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataTextDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataTextRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<TextFieldsPermissions>;
  filter?: Maybe<Text_PermissionFilter>;
};

export type PermissionsDataTextUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<TextFieldsPermissions>;
  filter?: Maybe<Text_PermissionFilter>;
};

export type PermissionsDataUnknow = {
  create?: Maybe<PermissionsDataUnknowCreate>;
  delete?: Maybe<PermissionsDataUnknowDelete>;
  destroy?: Maybe<PermissionsDataUnknowDestroy>;
  read?: Maybe<PermissionsDataUnknowRead>;
  update?: Maybe<PermissionsDataUnknowUpdate>;
};

export type PermissionsDataUnknowCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataUnknowDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataUnknowDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataUnknowRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<UnknowFieldsPermissions>;
  filter?: Maybe<Unknow_PermissionFilter>;
};

export type PermissionsDataUnknowUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<UnknowFieldsPermissions>;
  filter?: Maybe<Unknow_PermissionFilter>;
};

export type PermissionsDataUserProfile = {
  create?: Maybe<PermissionsDataUserProfileCreate>;
  delete?: Maybe<PermissionsDataUserProfileDelete>;
  destroy?: Maybe<PermissionsDataUserProfileDestroy>;
  read?: Maybe<PermissionsDataUserProfileRead>;
  update?: Maybe<PermissionsDataUserProfileUpdate>;
};

export type PermissionsDataUserProfileCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataUserProfileDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataUserProfileDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataUserProfileRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<UserProfileFieldsPermissions>;
  filter?: Maybe<UserProfile_PermissionFilter>;
};

export type PermissionsDataUserProfileUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<UserProfileFieldsPermissions>;
  filter?: Maybe<UserProfile_PermissionFilter>;
};

export type PermissionsDataUserSchool = {
  create?: Maybe<PermissionsDataUserSchoolCreate>;
  delete?: Maybe<PermissionsDataUserSchoolDelete>;
  destroy?: Maybe<PermissionsDataUserSchoolDestroy>;
  read?: Maybe<PermissionsDataUserSchoolRead>;
  update?: Maybe<PermissionsDataUserSchoolUpdate>;
};

export type PermissionsDataUserSchoolCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataUserSchoolDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataUserSchoolDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataUserSchoolRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<UserSchoolFieldsPermissions>;
  filter?: Maybe<UserSchool_PermissionFilter>;
};

export type PermissionsDataUserSchoolUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<UserSchoolFieldsPermissions>;
  filter?: Maybe<UserSchool_PermissionFilter>;
};

export type PermissionsDataUsers = {
  create?: Maybe<PermissionsDataUsersCreate>;
  delete?: Maybe<PermissionsDataUsersDelete>;
  destroy?: Maybe<PermissionsDataUsersDestroy>;
  read?: Maybe<PermissionsDataUsersRead>;
  update?: Maybe<PermissionsDataUsersUpdate>;
};

export type PermissionsDataUsersCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataUsersDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataUsersDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataUsersRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<UserFieldsPermissions>;
  filter?: Maybe<User_PermissionFilter>;
};

export type PermissionsDataUsersUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<UserFieldsPermissions>;
  filter?: Maybe<User_PermissionFilter>;
};

export type PermissionsDataVideo = {
  create?: Maybe<PermissionsDataVideoCreate>;
  delete?: Maybe<PermissionsDataVideoDelete>;
  destroy?: Maybe<PermissionsDataVideoDestroy>;
  read?: Maybe<PermissionsDataVideoRead>;
  update?: Maybe<PermissionsDataVideoUpdate>;
};

export type PermissionsDataVideoCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataVideoDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataVideoDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataVideoLink = {
  create?: Maybe<PermissionsDataVideoLinkCreate>;
  delete?: Maybe<PermissionsDataVideoLinkDelete>;
  destroy?: Maybe<PermissionsDataVideoLinkDestroy>;
  read?: Maybe<PermissionsDataVideoLinkRead>;
  update?: Maybe<PermissionsDataVideoLinkUpdate>;
};

export type PermissionsDataVideoLinkCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataVideoLinkDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataVideoLinkDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataVideoLinkRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<VideoLinkFieldsPermissions>;
  filter?: Maybe<VideoLink_PermissionFilter>;
};

export type PermissionsDataVideoLinkUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<VideoLinkFieldsPermissions>;
  filter?: Maybe<VideoLink_PermissionFilter>;
};

export type PermissionsDataVideoRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<VideoFieldsPermissions>;
  filter?: Maybe<Video_PermissionFilter>;
};

export type PermissionsDataVideoUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<VideoFieldsPermissions>;
  filter?: Maybe<Video_PermissionFilter>;
};

export type PermissionsDataWaitingList = {
  create?: Maybe<PermissionsDataWaitingListCreate>;
  delete?: Maybe<PermissionsDataWaitingListDelete>;
  destroy?: Maybe<PermissionsDataWaitingListDestroy>;
  read?: Maybe<PermissionsDataWaitingListRead>;
  update?: Maybe<PermissionsDataWaitingListUpdate>;
};

export type PermissionsDataWaitingListCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataWaitingListDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataWaitingListDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataWaitingListRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<WaitingListFieldsPermissions>;
  filter?: Maybe<WaitingList_PermissionFilter>;
};

export type PermissionsDataWaitingListUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<WaitingListFieldsPermissions>;
  filter?: Maybe<WaitingList_PermissionFilter>;
};

export type PermissionsDataXCustomer = {
  create?: Maybe<PermissionsDataXCustomerCreate>;
  delete?: Maybe<PermissionsDataXCustomerDelete>;
  destroy?: Maybe<PermissionsDataXCustomerDestroy>;
  read?: Maybe<PermissionsDataXCustomerRead>;
  update?: Maybe<PermissionsDataXCustomerUpdate>;
};

export type PermissionsDataXCustomerCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataXCustomerDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataXCustomerDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataXCustomerRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<XCustomerFieldsPermissions>;
  filter?: Maybe<XCustomer_PermissionFilter>;
};

export type PermissionsDataXCustomerUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<XCustomerFieldsPermissions>;
  filter?: Maybe<XCustomer_PermissionFilter>;
};

export type PermissionsDataXSchoolCustomer = {
  create?: Maybe<PermissionsDataXSchoolCustomerCreate>;
  delete?: Maybe<PermissionsDataXSchoolCustomerDelete>;
  destroy?: Maybe<PermissionsDataXSchoolCustomerDestroy>;
  read?: Maybe<PermissionsDataXSchoolCustomerRead>;
  update?: Maybe<PermissionsDataXSchoolCustomerUpdate>;
};

export type PermissionsDataXSchoolCustomerCreate = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataXSchoolCustomerDelete = {
  allow: Scalars['Boolean'];
  restore?: Maybe<Scalars['Boolean']>;
  review?: Maybe<Scalars['Boolean']>;
};

export type PermissionsDataXSchoolCustomerDestroy = {
  allow: Scalars['Boolean'];
};

export type PermissionsDataXSchoolCustomerRead = {
  allow: Scalars['Boolean'];
  fields?: Maybe<XSchoolCustomerFieldsPermissions>;
  filter?: Maybe<XSchoolCustomer_PermissionFilter>;
};

export type PermissionsDataXSchoolCustomerUpdate = {
  allow: Scalars['Boolean'];
  fields?: Maybe<XSchoolCustomerFieldsPermissions>;
  filter?: Maybe<XSchoolCustomer_PermissionFilter>;
};

/** PermissionsInput create input */
export type PermissionsInput = {
  custom?: Maybe<PermissionsCustom>;
  data?: Maybe<PermissionsData>;
};

/** Profile create input from photo */
export type Photo_ProfileCreateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8RelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24RelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Profile update input from photo */
export type Photo_ProfileUpdateInput = {
  data: ProfileUpdateInput;
  filter?: Maybe<ProfileKeyFilter>;
};

export type Plan = {
  __typename?: 'Plan';
  _description: Maybe<Scalars['String']>;
  categoryPlan: Maybe<PlanCategoryListResponse>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  description: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
  notes: Maybe<Scalars['String']>;
  school: Maybe<School>;
  type: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

export type PlanCategoryPlanArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<PlanCategoryFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<PlanCategoryGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<PlanCategoryOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<PlanCategorySort>>;
};

export type PlanCategory = {
  __typename?: 'PlanCategory';
  _description: Maybe<Scalars['String']>;
  attachments: Maybe<File>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
  notes: Maybe<Scalars['String']>;
  plan: Maybe<Plan>;
  status: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

/** PlanCategory relation input */
export type PlanCategoryAttachmentsManyRelationInput = {
  connect?: Maybe<FileKeyFilter>;
};

/** PlanCategory relation input */
export type PlanCategoryAttachmentsRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<PlanCategory_Attachments_FileCreateInput>;
};

/** PlanCategory relation input */
export type PlanCategoryAttachmentsUpdateRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<PlanCategory_Attachments_FileCreateInput>;
  disconnect?: Maybe<FileKeyFilter>;
  reconnect?: Maybe<FileKeyFilter>;
  update?: Maybe<PlanCategory_Attachments_FileUpdateInput>;
};

/** PlanCategory create input */
export type PlanCategoryCreateInput = {
  attachments?: Maybe<PlanCategoryAttachmentsRelationInput>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  plan?: Maybe<PlanCategoryPlanRelationInput>;
  status?: Maybe<Scalars['String']>;
};

/** PlanCategory create many input */
export type PlanCategoryCreateManyInput = {
  attachments?: Maybe<PlanCategoryAttachmentsManyRelationInput>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  plan?: Maybe<PlanCategoryPlanManyRelationInput>;
  status?: Maybe<Scalars['String']>;
};

/** PlanCategory delete input */
export type PlanCategoryDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** PlanCategoryFieldsPermissions create input */
export type PlanCategoryFieldsPermissions = {
  createdAt?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['Boolean']>;
  notes?: Maybe<Scalars['Boolean']>;
  status?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type PlanCategoryFilter = {
  AND?: Maybe<Array<PlanCategoryFilter>>;
  OR?: Maybe<Array<PlanCategoryFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  attachments?: Maybe<FileFilter>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  name?: Maybe<StringPredicate>;
  notes?: Maybe<StringPredicate>;
  plan?: Maybe<PlanFilter>;
  status?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type PlanCategoryGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: PlanCategoryGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type PlanCategoryGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  attachments?: Maybe<FileGroupByQuery>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  id?: Maybe<Array<GroupByField>>;
  name?: Maybe<Array<GroupByField>>;
  notes?: Maybe<Array<GroupByField>>;
  plan?: Maybe<PlanGroupByQuery>;
  status?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

export type PlanCategoryKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** PlanCategoryListResponse output */
export type PlanCategoryListResponse = {
  __typename?: 'PlanCategoryListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<PlanCategory>;
};

/** PlanCategoryManyResponse output */
export type PlanCategoryManyResponse = {
  __typename?: 'PlanCategoryManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<PlanCategory>;
};

/** No longer supported. Use `sort` instead. */
export enum PlanCategoryOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  NotesAsc = 'notes_ASC',
  NotesDesc = 'notes_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** PlanCategory subscription payload */
export type PlanCategoryPayload = {
  __typename?: 'PlanCategoryPayload';
  mutation: MutationType;
  node: Maybe<PlanCategory>;
  previousValues: Maybe<PlanCategory>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** Plan relation input */
export type PlanCategoryPlanManyRelationInput = {
  connect?: Maybe<Array<PlanCategoryKeyFilter>>;
};

/** Plan relation input */
export type PlanCategoryPlanRelationInput = {
  connect?: Maybe<Array<PlanCategoryKeyFilter>>;
  create?: Maybe<Array<Maybe<Plan_PlanCategoryCreateInput>>>;
};

/** PlanCategory relation input */
export type PlanCategoryPlanUpdateRelationInput = {
  connect?: Maybe<PlanKeyFilter>;
  create?: Maybe<CategoryPlan_PlanCreateInput>;
  disconnect?: Maybe<PlanKeyFilter>;
  reconnect?: Maybe<PlanKeyFilter>;
  update?: Maybe<CategoryPlan_PlanUpdateInput>;
};

export type PlanCategoryRelationFilter = {
  every?: Maybe<PlanCategoryFilter>;
  none?: Maybe<PlanCategoryFilter>;
  some?: Maybe<PlanCategoryFilter>;
};

export type PlanCategorySort = {
  attachments?: Maybe<FileSort>;
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  notes?: Maybe<SortOrder>;
  plan?: Maybe<PlanSort>;
  status?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
};

/** PlanCategory subscription filter */
export type PlanCategorySubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<PlanCategoryFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** PlanCategory update input */
export type PlanCategoryUpdateByFilterInput = {
  name?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  notes?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  status?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** PlanCategory update input */
export type PlanCategoryUpdateInput = {
  attachments?: Maybe<PlanCategoryAttachmentsUpdateRelationInput>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  plan?: Maybe<PlanCategoryPlanUpdateRelationInput>;
  status?: Maybe<Scalars['String']>;
};

export type PlanCategory_PermissionFilter = {
  AND?: Maybe<Array<PlanCategory_PermissionFilter>>;
  OR?: Maybe<Array<PlanCategory_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  attachments?: Maybe<File_PermissionFilter>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  name?: Maybe<StringPredicate>;
  notes?: Maybe<StringPredicate>;
  plan?: Maybe<Plan_PermissionFilter>;
  status?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type PlanCategory_PermissionRelationFilter = {
  every?: Maybe<PlanCategory_PermissionFilter>;
  none?: Maybe<PlanCategory_PermissionFilter>;
  some?: Maybe<PlanCategory_PermissionFilter>;
};

/** Files create input from planCategory_attachments */
export type PlanCategory_Attachments_FileCreateInput = {
  brand_logo?: Maybe<FilesBrand_LogoRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8RelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24RelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8RelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8RelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24RelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailRelationInput>;
  video_video?: Maybe<FilesVideo_VideoRelationInput>;
};

/** Files update input from planCategory_attachments */
export type PlanCategory_Attachments_FileUpdateInput = {
  brand_logo?: Maybe<FilesBrand_LogoUpdateRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverUpdateRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsUpdateRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsUpdateRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoUpdateRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallUpdateRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8UpdateRelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24UpdateRelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoUpdateRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8UpdateRelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8UpdateRelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24UpdateRelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoUpdateRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarUpdateRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoUpdateRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarUpdateRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewUpdateRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailUpdateRelationInput>;
  video_video?: Maybe<FilesVideo_VideoUpdateRelationInput>;
};

/** Plan create input */
export type PlanCreateInput = {
  categoryPlan?: Maybe<PlanCategoryPlanRelationInput>;
  description?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  school?: Maybe<PlanSchoolRelationInput>;
  type?: Maybe<Scalars['String']>;
};

/** Plan create many input */
export type PlanCreateManyInput = {
  categoryPlan?: Maybe<PlanCategoryPlanManyRelationInput>;
  description?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  school?: Maybe<PlanSchoolManyRelationInput>;
  type?: Maybe<Scalars['String']>;
};

/** Plan delete input */
export type PlanDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** PlanFieldsPermissions create input */
export type PlanFieldsPermissions = {
  createdAt?: Maybe<Scalars['Boolean']>;
  description?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['Boolean']>;
  notes?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type PlanFilter = {
  AND?: Maybe<Array<PlanFilter>>;
  OR?: Maybe<Array<PlanFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  categoryPlan?: Maybe<PlanCategoryRelationFilter>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  description?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  name?: Maybe<StringPredicate>;
  notes?: Maybe<StringPredicate>;
  school?: Maybe<SchoolFilter>;
  type?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type PlanGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: PlanGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type PlanGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  categoryPlan?: Maybe<PlanCategoryGroupByQuery>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  description?: Maybe<Array<GroupByField>>;
  id?: Maybe<Array<GroupByField>>;
  name?: Maybe<Array<GroupByField>>;
  notes?: Maybe<Array<GroupByField>>;
  school?: Maybe<SchoolGroupByQuery>;
  type?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

export type PlanKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** PlanListResponse output */
export type PlanListResponse = {
  __typename?: 'PlanListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<Plan>;
};

/** PlanManyResponse output */
export type PlanManyResponse = {
  __typename?: 'PlanManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<Plan>;
};

/** No longer supported. Use `sort` instead. */
export enum PlanOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  NotesAsc = 'notes_ASC',
  NotesDesc = 'notes_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** Plan subscription payload */
export type PlanPayload = {
  __typename?: 'PlanPayload';
  mutation: MutationType;
  node: Maybe<Plan>;
  previousValues: Maybe<Plan>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type PlanRelationFilter = {
  every?: Maybe<PlanFilter>;
  none?: Maybe<PlanFilter>;
  some?: Maybe<PlanFilter>;
};

/** Plan relation input */
export type PlanSchoolManyRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
};

/** Plan relation input */
export type PlanSchoolRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<PlanSchool_SchoolCreateInput>;
};

/** Plan relation input */
export type PlanSchoolUpdateRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<PlanSchool_SchoolCreateInput>;
  disconnect?: Maybe<SchoolKeyFilter>;
  reconnect?: Maybe<SchoolKeyFilter>;
  update?: Maybe<PlanSchool_SchoolUpdateInput>;
};

/** School create input from planSchool */
export type PlanSchool_SchoolCreateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountRelationInput>;
  user?: Maybe<SchoolUserRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

/** School update input from planSchool */
export type PlanSchool_SchoolUpdateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationUpdateRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolUpdateRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolUpdateRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolUpdateRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerUpdateRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoUpdateRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsUpdateRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationUpdateRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationUpdateRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationUpdateRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileUpdateRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationUpdateRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamUpdateRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountUpdateRelationInput>;
  user?: Maybe<SchoolUserUpdateRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

export type PlanSort = {
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  description?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  notes?: Maybe<SortOrder>;
  school?: Maybe<SchoolSort>;
  type?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
};

/** Plan subscription filter */
export type PlanSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<PlanFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** Plan update input */
export type PlanUpdateByFilterInput = {
  description?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  name?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  notes?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  type?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** Plan update input */
export type PlanUpdateInput = {
  categoryPlan?: Maybe<PlanCategoryPlanUpdateRelationInput>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  school?: Maybe<PlanSchoolUpdateRelationInput>;
  type?: Maybe<Scalars['String']>;
};

export type Plan_PermissionFilter = {
  AND?: Maybe<Array<Plan_PermissionFilter>>;
  OR?: Maybe<Array<Plan_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  categoryPlan?: Maybe<PlanCategory_PermissionRelationFilter>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  description?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  name?: Maybe<StringPredicate>;
  notes?: Maybe<StringPredicate>;
  school?: Maybe<School_PermissionFilter>;
  type?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type Plan_PermissionRelationFilter = {
  every?: Maybe<Plan_PermissionFilter>;
  none?: Maybe<Plan_PermissionFilter>;
  some?: Maybe<Plan_PermissionFilter>;
};

/** PlanCategory create input from plan */
export type Plan_PlanCategoryCreateInput = {
  attachments?: Maybe<PlanCategoryAttachmentsRelationInput>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  plan?: Maybe<PlanCategoryPlanRelationInput>;
  status?: Maybe<Scalars['String']>;
};

export type PortalCreateInput = {
  id?: Maybe<Scalars['ID']>;
};

export type PortalCreateResponse = {
  __typename?: 'PortalCreateResponse';
  redirectUrl: Maybe<Scalars['String']>;
};

export type PreSignup = {
  __typename?: 'PreSignup';
  _description: Maybe<Scalars['String']>;
  additionalInformation: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  email: Maybe<Scalars['String']>;
  fullname: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  phone: Maybe<Scalars['String']>;
  school: Maybe<School>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

/** PreSignup create input */
export type PreSignupCreateInput = {
  additionalInformation?: Maybe<Scalars['String']>;
  email: Scalars['String'];
  fullname: Scalars['String'];
  phone: Scalars['String'];
  school?: Maybe<PreSignupSchoolRelationInput>;
};

/** PreSignup create many input */
export type PreSignupCreateManyInput = {
  additionalInformation?: Maybe<Scalars['String']>;
  email: Scalars['String'];
  fullname: Scalars['String'];
  phone: Scalars['String'];
  school: PreSignupSchoolManyRelationInput;
};

/** PreSignup delete input */
export type PreSignupDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** PreSignupFieldsPermissions create input */
export type PreSignupFieldsPermissions = {
  additionalInformation?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['Boolean']>;
  email?: Maybe<Scalars['Boolean']>;
  fullname?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type PreSignupFilter = {
  AND?: Maybe<Array<PreSignupFilter>>;
  OR?: Maybe<Array<PreSignupFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  additionalInformation?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  email?: Maybe<StringPredicate>;
  fullname?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  phone?: Maybe<StringPredicate>;
  school?: Maybe<SchoolFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type PreSignupGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: PreSignupGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type PreSignupGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  additionalInformation?: Maybe<Array<GroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  email?: Maybe<Array<GroupByField>>;
  fullname?: Maybe<Array<GroupByField>>;
  id?: Maybe<Array<GroupByField>>;
  phone?: Maybe<Array<GroupByField>>;
  school?: Maybe<SchoolGroupByQuery>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

export type PreSignupKeyFilter = {
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
};

/** PreSignupListResponse output */
export type PreSignupListResponse = {
  __typename?: 'PreSignupListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<PreSignup>;
};

/** PreSignupManyResponse output */
export type PreSignupManyResponse = {
  __typename?: 'PreSignupManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<PreSignup>;
};

/** No longer supported. Use `sort` instead. */
export enum PreSignupOrderBy {
  AdditionalInformationAsc = 'additionalInformation_ASC',
  AdditionalInformationDesc = 'additionalInformation_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  EmailAsc = 'email_ASC',
  EmailDesc = 'email_DESC',
  FullnameAsc = 'fullname_ASC',
  FullnameDesc = 'fullname_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PhoneAsc = 'phone_ASC',
  PhoneDesc = 'phone_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** PreSignup subscription payload */
export type PreSignupPayload = {
  __typename?: 'PreSignupPayload';
  mutation: MutationType;
  node: Maybe<PreSignup>;
  previousValues: Maybe<PreSignup>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type PreSignupRelationFilter = {
  every?: Maybe<PreSignupFilter>;
  none?: Maybe<PreSignupFilter>;
  some?: Maybe<PreSignupFilter>;
};

/** PreSignup relation input */
export type PreSignupSchoolManyRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
};

/** PreSignup relation input */
export type PreSignupSchoolRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<SchoolPreSignupRelation_SchoolCreateInput>;
};

/** PreSignup relation input */
export type PreSignupSchoolUpdateRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<SchoolPreSignupRelation_SchoolCreateInput>;
  disconnect?: Maybe<SchoolKeyFilter>;
  reconnect?: Maybe<SchoolKeyFilter>;
  update?: Maybe<SchoolPreSignupRelation_SchoolUpdateInput>;
};

export type PreSignupSort = {
  additionalInformation?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  email?: Maybe<SortOrder>;
  fullname?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  phone?: Maybe<SortOrder>;
  school?: Maybe<SchoolSort>;
  updatedAt?: Maybe<SortOrder>;
};

/** PreSignup subscription filter */
export type PreSignupSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<PreSignupFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** PreSignup update input */
export type PreSignupUpdateByFilterInput = {
  additionalInformation?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  email?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  fullname?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  phone?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** PreSignup update input */
export type PreSignupUpdateInput = {
  additionalInformation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  phone?: Maybe<Scalars['String']>;
  school?: Maybe<PreSignupSchoolUpdateRelationInput>;
};

export type PreSignup_PermissionFilter = {
  AND?: Maybe<Array<PreSignup_PermissionFilter>>;
  OR?: Maybe<Array<PreSignup_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  additionalInformation?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  email?: Maybe<StringPredicate>;
  fullname?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  phone?: Maybe<StringPredicate>;
  school?: Maybe<School_PermissionFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type PreSignup_PermissionRelationFilter = {
  every?: Maybe<PreSignup_PermissionFilter>;
  none?: Maybe<PreSignup_PermissionFilter>;
  some?: Maybe<PreSignup_PermissionFilter>;
};

/** Video create input from preview */
export type Preview_VideoCreateInput = {
  category?: Maybe<Scalars['String']>;
  dutarion?: Maybe<Scalars['Int']>;
  preview?: Maybe<VideoPreviewRelationInput>;
  profile?: Maybe<VideoProfileRelationInput>;
  thumbnail?: Maybe<VideoThumbnailRelationInput>;
  title?: Maybe<Scalars['String']>;
  video?: Maybe<VideoVideoRelationInput>;
  youtubeID?: Maybe<Scalars['String']>;
};

/** Video update input from preview */
export type Preview_VideoUpdateInput = {
  data: VideoUpdateInput;
  filter?: Maybe<VideoKeyFilter>;
};

export type PrivateClass = {
  __typename?: 'PrivateClass';
  _description: Maybe<Scalars['String']>;
  amount: Maybe<Scalars['Int']>;
  classPrivateClassPurchaseRelation: Maybe<PrivateClassPurchaseListResponse>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  currency: Maybe<Scalars['String']>;
  days: Maybe<Scalars['String']>;
  deletedAt: Maybe<Scalars['Int']>;
  description: Maybe<Scalars['String']>;
  /** Duration saved in minutes */
  duration: Maybe<Scalars['Int']>;
  endTime: Maybe<Scalars['DateTime']>;
  id: Maybe<Scalars['ID']>;
  instructor: Maybe<Profile>;
  isActive: Maybe<Scalars['Boolean']>;
  lookupKey: Maybe<Scalars['String']>;
  name: Maybe<Scalars['String']>;
  school: Maybe<School>;
  startTime: Maybe<Scalars['DateTime']>;
  stripeProductId: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

export type PrivateClassClassPrivateClassPurchaseRelationArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<PrivateClassPurchaseFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<PrivateClassPurchaseGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<PrivateClassPurchaseOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<PrivateClassPurchaseSort>>;
};

export type PrivateClassCheckoutResponse = {
  __typename?: 'PrivateClassCheckoutResponse';
  redirectUrl: Maybe<Scalars['String']>;
};

/** PrivateClasses create input */
export type PrivateClassCreateInput = {
  amount: Scalars['Int'];
  classPrivateClassPurchaseRelation?: Maybe<PrivateClassesClassPrivateClassPurchaseRelationRelationInput>;
  currency?: Maybe<Scalars['String']>;
  days?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  /** Duration saved in minutes */
  duration?: Maybe<Scalars['Int']>;
  endTime?: Maybe<Scalars['DateTime']>;
  instructor?: Maybe<PrivateClassesInstructorRelationInput>;
  isActive?: Maybe<Scalars['Boolean']>;
  lookupKey?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  school?: Maybe<PrivateClassesSchoolRelationInput>;
  startTime?: Maybe<Scalars['DateTime']>;
  stripeProductId: Scalars['String'];
};

/** PrivateClasses create many input */
export type PrivateClassCreateManyInput = {
  amount: Scalars['Int'];
  classPrivateClassPurchaseRelation?: Maybe<PrivateClassesClassPrivateClassPurchaseRelationManyRelationInput>;
  currency?: Maybe<Scalars['String']>;
  days?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  /** Duration saved in minutes */
  duration?: Maybe<Scalars['Int']>;
  endTime?: Maybe<Scalars['DateTime']>;
  instructor?: Maybe<PrivateClassesInstructorManyRelationInput>;
  isActive?: Maybe<Scalars['Boolean']>;
  lookupKey?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  school: PrivateClassesSchoolManyRelationInput;
  startTime?: Maybe<Scalars['DateTime']>;
  stripeProductId: Scalars['String'];
};

/** PrivateClasses delete input */
export type PrivateClassDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** PrivateClassFieldsPermissions create input */
export type PrivateClassFieldsPermissions = {
  amount?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['Boolean']>;
  currency?: Maybe<Scalars['Boolean']>;
  days?: Maybe<Scalars['Boolean']>;
  description?: Maybe<Scalars['Boolean']>;
  duration?: Maybe<Scalars['Boolean']>;
  endTime?: Maybe<Scalars['Boolean']>;
  isActive?: Maybe<Scalars['Boolean']>;
  lookupKey?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['Boolean']>;
  startTime?: Maybe<Scalars['Boolean']>;
  stripeProductId?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type PrivateClassFilter = {
  AND?: Maybe<Array<PrivateClassFilter>>;
  OR?: Maybe<Array<PrivateClassFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  amount?: Maybe<IntPredicate>;
  classPrivateClassPurchaseRelation?: Maybe<PrivateClassPurchaseRelationFilter>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  currency?: Maybe<StringPredicate>;
  days?: Maybe<StringPredicate>;
  deletedAt?: Maybe<IntPredicate>;
  description?: Maybe<StringPredicate>;
  duration?: Maybe<IntPredicate>;
  endTime?: Maybe<DateTimePredicate>;
  id?: Maybe<IdPredicate>;
  instructor?: Maybe<ProfileFilter>;
  isActive?: Maybe<BoolPredicate>;
  lookupKey?: Maybe<StringPredicate>;
  name?: Maybe<StringPredicate>;
  school?: Maybe<SchoolFilter>;
  startTime?: Maybe<DateTimePredicate>;
  stripeProductId?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type PrivateClassGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: PrivateClassGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type PrivateClassGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  amount?: Maybe<Array<GroupByField>>;
  classPrivateClassPurchaseRelation?: Maybe<PrivateClassPurchaseGroupByQuery>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  currency?: Maybe<Array<GroupByField>>;
  days?: Maybe<Array<GroupByField>>;
  description?: Maybe<Array<GroupByField>>;
  duration?: Maybe<Array<GroupByField>>;
  endTime?: Maybe<Array<GroupByField>>;
  id?: Maybe<Array<GroupByField>>;
  instructor?: Maybe<ProfileGroupByQuery>;
  isActive?: Maybe<Array<GroupByField>>;
  lookupKey?: Maybe<Array<GroupByField>>;
  name?: Maybe<Array<GroupByField>>;
  school?: Maybe<SchoolGroupByQuery>;
  startTime?: Maybe<Array<GroupByField>>;
  stripeProductId?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

export type PrivateClassKeyFilter = {
  id?: Maybe<Scalars['ID']>;
  lookupKey?: Maybe<Scalars['String']>;
  stripeProductId?: Maybe<Scalars['String']>;
};

/** PrivateClassListResponse output */
export type PrivateClassListResponse = {
  __typename?: 'PrivateClassListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<PrivateClass>;
};

/** PrivateClassManyResponse output */
export type PrivateClassManyResponse = {
  __typename?: 'PrivateClassManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<PrivateClass>;
};

/** No longer supported. Use `sort` instead. */
export enum PrivateClassOrderBy {
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CurrencyAsc = 'currency_ASC',
  CurrencyDesc = 'currency_DESC',
  DaysAsc = 'days_ASC',
  DaysDesc = 'days_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  DurationAsc = 'duration_ASC',
  DurationDesc = 'duration_DESC',
  EndTimeAsc = 'endTime_ASC',
  EndTimeDesc = 'endTime_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsActiveAsc = 'isActive_ASC',
  IsActiveDesc = 'isActive_DESC',
  LookupKeyAsc = 'lookupKey_ASC',
  LookupKeyDesc = 'lookupKey_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  StartTimeAsc = 'startTime_ASC',
  StartTimeDesc = 'startTime_DESC',
  StripeProductIdAsc = 'stripeProductId_ASC',
  StripeProductIdDesc = 'stripeProductId_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** PrivateClasses subscription payload */
export type PrivateClassPayload = {
  __typename?: 'PrivateClassPayload';
  mutation: MutationType;
  node: Maybe<PrivateClass>;
  previousValues: Maybe<PrivateClass>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type PrivateClassPurchase = {
  __typename?: 'PrivateClassPurchase';
  _description: Maybe<Scalars['String']>;
  class: Maybe<PrivateClass>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  customer: Maybe<Customer>;
  deletedAt: Maybe<Scalars['Int']>;
  /** Duration saved in minutes */
  duration: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  paymentIntent: Maybe<Scalars['String']>;
  startTime: Maybe<Scalars['DateTime']>;
  status: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

/** PrivateClassPurchase relation input */
export type PrivateClassPurchaseClassManyRelationInput = {
  connect?: Maybe<PrivateClassKeyFilter>;
};

/** PrivateClassPurchase relation input */
export type PrivateClassPurchaseClassRelationInput = {
  connect?: Maybe<PrivateClassKeyFilter>;
  create?: Maybe<ClassPrivateClassPurchaseRelation_PrivateClassCreateInput>;
};

/** PrivateClassPurchase relation input */
export type PrivateClassPurchaseClassUpdateRelationInput = {
  connect?: Maybe<PrivateClassKeyFilter>;
  create?: Maybe<ClassPrivateClassPurchaseRelation_PrivateClassCreateInput>;
  disconnect?: Maybe<PrivateClassKeyFilter>;
  reconnect?: Maybe<PrivateClassKeyFilter>;
  update?: Maybe<ClassPrivateClassPurchaseRelation_PrivateClassUpdateInput>;
};

/** PrivateClassPurchase create input */
export type PrivateClassPurchaseCreateInput = {
  class?: Maybe<PrivateClassPurchaseClassRelationInput>;
  customer?: Maybe<PrivateClassPurchaseCustomerRelationInput>;
  /** Duration saved in minutes */
  duration?: Maybe<Scalars['Int']>;
  paymentIntent?: Maybe<Scalars['String']>;
  startTime?: Maybe<Scalars['DateTime']>;
  status?: Maybe<Scalars['String']>;
};

/** PrivateClassPurchase create many input */
export type PrivateClassPurchaseCreateManyInput = {
  class?: Maybe<PrivateClassPurchaseClassManyRelationInput>;
  customer?: Maybe<PrivateClassPurchaseCustomerManyRelationInput>;
  /** Duration saved in minutes */
  duration?: Maybe<Scalars['Int']>;
  paymentIntent?: Maybe<Scalars['String']>;
  startTime?: Maybe<Scalars['DateTime']>;
  status?: Maybe<Scalars['String']>;
};

/** PrivateClassPurchase relation input */
export type PrivateClassPurchaseCustomerManyRelationInput = {
  connect?: Maybe<CustomerKeyFilter>;
};

/** PrivateClassPurchase relation input */
export type PrivateClassPurchaseCustomerRelationInput = {
  connect?: Maybe<CustomerKeyFilter>;
  create?: Maybe<CustomerPrivateClassPurchaseRelation_CustomerCreateInput>;
};

/** PrivateClassPurchase relation input */
export type PrivateClassPurchaseCustomerUpdateRelationInput = {
  connect?: Maybe<CustomerKeyFilter>;
  create?: Maybe<CustomerPrivateClassPurchaseRelation_CustomerCreateInput>;
  disconnect?: Maybe<CustomerKeyFilter>;
  reconnect?: Maybe<CustomerKeyFilter>;
  update?: Maybe<CustomerPrivateClassPurchaseRelation_CustomerUpdateInput>;
};

/** PrivateClassPurchase delete input */
export type PrivateClassPurchaseDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** PrivateClassPurchaseFieldsPermissions create input */
export type PrivateClassPurchaseFieldsPermissions = {
  createdAt?: Maybe<Scalars['Boolean']>;
  duration?: Maybe<Scalars['Boolean']>;
  paymentIntent?: Maybe<Scalars['Boolean']>;
  startTime?: Maybe<Scalars['Boolean']>;
  status?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type PrivateClassPurchaseFilter = {
  AND?: Maybe<Array<PrivateClassPurchaseFilter>>;
  OR?: Maybe<Array<PrivateClassPurchaseFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  class?: Maybe<PrivateClassFilter>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  customer?: Maybe<CustomerFilter>;
  deletedAt?: Maybe<IntPredicate>;
  duration?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  paymentIntent?: Maybe<StringPredicate>;
  startTime?: Maybe<DateTimePredicate>;
  status?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type PrivateClassPurchaseGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: PrivateClassPurchaseGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type PrivateClassPurchaseGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  class?: Maybe<PrivateClassGroupByQuery>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  customer?: Maybe<CustomerGroupByQuery>;
  duration?: Maybe<Array<GroupByField>>;
  id?: Maybe<Array<GroupByField>>;
  paymentIntent?: Maybe<Array<GroupByField>>;
  startTime?: Maybe<Array<GroupByField>>;
  status?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

export type PrivateClassPurchaseKeyFilter = {
  id?: Maybe<Scalars['ID']>;
  paymentIntent?: Maybe<Scalars['String']>;
};

/** PrivateClassPurchaseListResponse output */
export type PrivateClassPurchaseListResponse = {
  __typename?: 'PrivateClassPurchaseListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<PrivateClassPurchase>;
};

/** PrivateClassPurchaseManyResponse output */
export type PrivateClassPurchaseManyResponse = {
  __typename?: 'PrivateClassPurchaseManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<PrivateClassPurchase>;
};

/** No longer supported. Use `sort` instead. */
export enum PrivateClassPurchaseOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DurationAsc = 'duration_ASC',
  DurationDesc = 'duration_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PaymentIntentAsc = 'paymentIntent_ASC',
  PaymentIntentDesc = 'paymentIntent_DESC',
  StartTimeAsc = 'startTime_ASC',
  StartTimeDesc = 'startTime_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** PrivateClassPurchase subscription payload */
export type PrivateClassPurchasePayload = {
  __typename?: 'PrivateClassPurchasePayload';
  mutation: MutationType;
  node: Maybe<PrivateClassPurchase>;
  previousValues: Maybe<PrivateClassPurchase>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type PrivateClassPurchaseRelationFilter = {
  every?: Maybe<PrivateClassPurchaseFilter>;
  none?: Maybe<PrivateClassPurchaseFilter>;
  some?: Maybe<PrivateClassPurchaseFilter>;
};

export type PrivateClassPurchaseSort = {
  class?: Maybe<PrivateClassSort>;
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  customer?: Maybe<CustomerSort>;
  deletedAt?: Maybe<SortOrder>;
  duration?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  paymentIntent?: Maybe<SortOrder>;
  startTime?: Maybe<SortOrder>;
  status?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
};

/** PrivateClassPurchase subscription filter */
export type PrivateClassPurchaseSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<PrivateClassPurchaseFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** PrivateClassPurchase update input */
export type PrivateClassPurchaseUpdateByFilterInput = {
  duration?: Maybe<Array<Maybe<UpdateByFilterIntInput>>>;
  paymentIntent?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  startTime?: Maybe<Array<Maybe<UpdateByFilterDateTimeInput>>>;
  status?: Maybe<Array<Maybe<UpdateByFilterStringSwitchInput>>>;
};

/** PrivateClassPurchase update input */
export type PrivateClassPurchaseUpdateInput = {
  class?: Maybe<PrivateClassPurchaseClassUpdateRelationInput>;
  customer?: Maybe<PrivateClassPurchaseCustomerUpdateRelationInput>;
  /** Duration saved in minutes */
  duration?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  paymentIntent?: Maybe<Scalars['String']>;
  startTime?: Maybe<Scalars['DateTime']>;
  status?: Maybe<Scalars['String']>;
};

export type PrivateClassPurchase_PermissionFilter = {
  AND?: Maybe<Array<PrivateClassPurchase_PermissionFilter>>;
  OR?: Maybe<Array<PrivateClassPurchase_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  class?: Maybe<PrivateClass_PermissionFilter>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  customer?: Maybe<Customer_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  duration?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  paymentIntent?: Maybe<StringPredicate>;
  startTime?: Maybe<DateTimePredicate>;
  status?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type PrivateClassPurchase_PermissionRelationFilter = {
  every?: Maybe<PrivateClassPurchase_PermissionFilter>;
  none?: Maybe<PrivateClassPurchase_PermissionFilter>;
  some?: Maybe<PrivateClassPurchase_PermissionFilter>;
};

export type PrivateClassRelationFilter = {
  every?: Maybe<PrivateClassFilter>;
  none?: Maybe<PrivateClassFilter>;
  some?: Maybe<PrivateClassFilter>;
};

export type PrivateClassResolverResponse = {
  __typename?: 'PrivateClassResolverResponse';
  id: Maybe<Scalars['ID']>;
};

export type PrivateClassSort = {
  amount?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  currency?: Maybe<SortOrder>;
  days?: Maybe<SortOrder>;
  deletedAt?: Maybe<SortOrder>;
  description?: Maybe<SortOrder>;
  duration?: Maybe<SortOrder>;
  endTime?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  instructor?: Maybe<ProfileSort>;
  isActive?: Maybe<SortOrder>;
  lookupKey?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  school?: Maybe<SchoolSort>;
  startTime?: Maybe<SortOrder>;
  stripeProductId?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
};

/** PrivateClasses subscription filter */
export type PrivateClassSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<PrivateClassFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** PrivateClasses update input */
export type PrivateClassUpdateByFilterInput = {
  amount?: Maybe<Array<Maybe<UpdateByFilterIntInput>>>;
  currency?: Maybe<Array<Maybe<UpdateByFilterStringSwitchInput>>>;
  days?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  description?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  duration?: Maybe<Array<Maybe<UpdateByFilterIntInput>>>;
  endTime?: Maybe<Array<Maybe<UpdateByFilterDateTimeInput>>>;
  isActive?: Maybe<Array<Maybe<UpdateByFilterBooleanSwitchInput>>>;
  lookupKey?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  name?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  startTime?: Maybe<Array<Maybe<UpdateByFilterDateTimeInput>>>;
  stripeProductId?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** PrivateClasses update input */
export type PrivateClassUpdateInput = {
  amount?: Maybe<Scalars['Int']>;
  classPrivateClassPurchaseRelation?: Maybe<PrivateClassesClassPrivateClassPurchaseRelationUpdateRelationInput>;
  currency?: Maybe<Scalars['String']>;
  days?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  /** Duration saved in minutes */
  duration?: Maybe<Scalars['Int']>;
  endTime?: Maybe<Scalars['DateTime']>;
  id?: Maybe<Scalars['ID']>;
  instructor?: Maybe<PrivateClassesInstructorUpdateRelationInput>;
  isActive?: Maybe<Scalars['Boolean']>;
  lookupKey?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  school?: Maybe<PrivateClassesSchoolUpdateRelationInput>;
  startTime?: Maybe<Scalars['DateTime']>;
  stripeProductId?: Maybe<Scalars['String']>;
};

export type PrivateClass_PermissionFilter = {
  AND?: Maybe<Array<PrivateClass_PermissionFilter>>;
  OR?: Maybe<Array<PrivateClass_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  amount?: Maybe<IntPredicate>;
  classPrivateClassPurchaseRelation?: Maybe<PrivateClassPurchase_PermissionRelationFilter>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  currency?: Maybe<StringPredicate>;
  days?: Maybe<StringPredicate>;
  deletedAt?: Maybe<IntPredicate>;
  description?: Maybe<StringPredicate>;
  duration?: Maybe<IntPredicate>;
  endTime?: Maybe<DateTimePredicate>;
  id?: Maybe<IdPredicate>;
  instructor?: Maybe<Profile_PermissionFilter>;
  isActive?: Maybe<BoolPredicate>;
  lookupKey?: Maybe<StringPredicate>;
  name?: Maybe<StringPredicate>;
  school?: Maybe<School_PermissionFilter>;
  startTime?: Maybe<DateTimePredicate>;
  stripeProductId?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type PrivateClass_PermissionRelationFilter = {
  every?: Maybe<PrivateClass_PermissionFilter>;
  none?: Maybe<PrivateClass_PermissionFilter>;
  some?: Maybe<PrivateClass_PermissionFilter>;
};

/** PrivateClasses relation input */
export type PrivateClassesClassPrivateClassPurchaseRelationManyRelationInput = {
  connect?: Maybe<Array<PrivateClassPurchaseKeyFilter>>;
};

/** PrivateClasses relation input */
export type PrivateClassesClassPrivateClassPurchaseRelationRelationInput = {
  connect?: Maybe<Array<PrivateClassPurchaseKeyFilter>>;
  create?: Maybe<Array<Maybe<Class_PrivateClassPurchaseCreateInput>>>;
};

/** PrivateClasses relation input */
export type PrivateClassesClassPrivateClassPurchaseRelationUpdateRelationInput =
  {
    connect?: Maybe<Array<PrivateClassPurchaseKeyFilter>>;
    create?: Maybe<Array<Maybe<Class_PrivateClassPurchaseCreateInput>>>;
    disconnect?: Maybe<Array<PrivateClassPurchaseKeyFilter>>;
    reconnect?: Maybe<Array<PrivateClassPurchaseKeyFilter>>;
    update?: Maybe<Array<Maybe<Class_PrivateClassPurchaseUpdateInput>>>;
  };

/** PrivateClasses relation input */
export type PrivateClassesInstructorManyRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
};

/** PrivateClasses relation input */
export type PrivateClassesInstructorRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
  create?: Maybe<InstructorPrivateClassesRelation_ProfileCreateInput>;
};

/** PrivateClasses relation input */
export type PrivateClassesInstructorUpdateRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
  create?: Maybe<InstructorPrivateClassesRelation_ProfileCreateInput>;
  disconnect?: Maybe<ProfileKeyFilter>;
  reconnect?: Maybe<ProfileKeyFilter>;
  update?: Maybe<InstructorPrivateClassesRelation_ProfileUpdateInput>;
};

/** PrivateClasses relation input */
export type PrivateClassesSchoolManyRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
};

/** PrivateClasses relation input */
export type PrivateClassesSchoolRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<SchoolPrivateClassesRelation_SchoolCreateInput>;
};

/** PrivateClasses relation input */
export type PrivateClassesSchoolUpdateRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<SchoolPrivateClassesRelation_SchoolCreateInput>;
  disconnect?: Maybe<SchoolKeyFilter>;
  reconnect?: Maybe<SchoolKeyFilter>;
  update?: Maybe<SchoolPrivateClassesRelation_SchoolUpdateInput>;
};

export type Product = {
  __typename?: 'Product';
  _description: Maybe<Scalars['String']>;
  amount: Maybe<Scalars['Int']>;
  category: Maybe<ProductCategory>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  currency: Maybe<Scalars['String']>;
  deletedAt: Maybe<Scalars['Int']>;
  description: Maybe<Scalars['String']>;
  feesAmount: Maybe<Scalars['Int']>;
  feesLookupKey: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  interval: Maybe<Scalars['String']>;
  isActive: Maybe<Scalars['Boolean']>;
  lookupKey: Maybe<Scalars['String']>;
  name: Maybe<Scalars['String']>;
  productSubscriptionsRelation: Maybe<ProductSubscriptionListResponse>;
  school: Maybe<School>;
  stripeProductId: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

export type ProductProductSubscriptionsRelationArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ProductSubscriptionFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ProductSubscriptionGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ProductSubscriptionOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ProductSubscriptionSort>>;
};

export type ProductCategory = {
  __typename?: 'ProductCategory';
  _description: Maybe<Scalars['String']>;
  categoryProductRelation: Maybe<ProductListResponse>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  description: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

export type ProductCategoryCategoryProductRelationArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ProductFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ProductGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ProductOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ProductSort>>;
};

/** ProductCategory relation input */
export type ProductCategoryCategoryProductRelationManyRelationInput = {
  connect?: Maybe<Array<ProductKeyFilter>>;
};

/** ProductCategory relation input */
export type ProductCategoryCategoryProductRelationRelationInput = {
  connect?: Maybe<Array<ProductKeyFilter>>;
  create?: Maybe<Array<Maybe<Category_ProductCreateInput>>>;
};

/** ProductCategory relation input */
export type ProductCategoryCategoryProductRelationUpdateRelationInput = {
  connect?: Maybe<Array<ProductKeyFilter>>;
  create?: Maybe<Array<Maybe<Category_ProductCreateInput>>>;
  disconnect?: Maybe<Array<ProductKeyFilter>>;
  reconnect?: Maybe<Array<ProductKeyFilter>>;
  update?: Maybe<Array<Maybe<Category_ProductUpdateInput>>>;
};

/** ProductCategory create input */
export type ProductCategoryCreateInput = {
  categoryProductRelation?: Maybe<ProductCategoryCategoryProductRelationRelationInput>;
  description?: Maybe<Scalars['String']>;
  name: Scalars['String'];
};

/** ProductCategory create many input */
export type ProductCategoryCreateManyInput = {
  categoryProductRelation?: Maybe<ProductCategoryCategoryProductRelationManyRelationInput>;
  description?: Maybe<Scalars['String']>;
  name: Scalars['String'];
};

/** ProductCategory delete input */
export type ProductCategoryDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** ProductCategoryFieldsPermissions create input */
export type ProductCategoryFieldsPermissions = {
  createdAt?: Maybe<Scalars['Boolean']>;
  description?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type ProductCategoryFilter = {
  AND?: Maybe<Array<ProductCategoryFilter>>;
  OR?: Maybe<Array<ProductCategoryFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  categoryProductRelation?: Maybe<ProductRelationFilter>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  description?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  name?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type ProductCategoryGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: ProductCategoryGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type ProductCategoryGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  categoryProductRelation?: Maybe<ProductGroupByQuery>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  description?: Maybe<Array<GroupByField>>;
  id?: Maybe<Array<GroupByField>>;
  name?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

export type ProductCategoryKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** ProductCategoryListResponse output */
export type ProductCategoryListResponse = {
  __typename?: 'ProductCategoryListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<ProductCategory>;
};

/** Product relation input */
export type ProductCategoryManyRelationInput = {
  connect?: Maybe<ProductCategoryKeyFilter>;
};

/** ProductCategoryManyResponse output */
export type ProductCategoryManyResponse = {
  __typename?: 'ProductCategoryManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<ProductCategory>;
};

/** No longer supported. Use `sort` instead. */
export enum ProductCategoryOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** ProductCategory subscription payload */
export type ProductCategoryPayload = {
  __typename?: 'ProductCategoryPayload';
  mutation: MutationType;
  node: Maybe<ProductCategory>;
  previousValues: Maybe<ProductCategory>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** Product relation input */
export type ProductCategoryRelationInput = {
  connect?: Maybe<ProductCategoryKeyFilter>;
  create?: Maybe<CategoryProductRelation_ProductCategoryCreateInput>;
};

export type ProductCategorySort = {
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  description?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
};

/** ProductCategory subscription filter */
export type ProductCategorySubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<ProductCategoryFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** ProductCategory update input */
export type ProductCategoryUpdateByFilterInput = {
  description?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  name?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** ProductCategory update input */
export type ProductCategoryUpdateInput = {
  categoryProductRelation?: Maybe<ProductCategoryCategoryProductRelationUpdateRelationInput>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
};

/** Product relation input */
export type ProductCategoryUpdateRelationInput = {
  connect?: Maybe<ProductCategoryKeyFilter>;
  create?: Maybe<CategoryProductRelation_ProductCategoryCreateInput>;
  disconnect?: Maybe<ProductCategoryKeyFilter>;
  reconnect?: Maybe<ProductCategoryKeyFilter>;
  update?: Maybe<CategoryProductRelation_ProductCategoryUpdateInput>;
};

export type ProductCategory_PermissionFilter = {
  AND?: Maybe<Array<ProductCategory_PermissionFilter>>;
  OR?: Maybe<Array<ProductCategory_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  categoryProductRelation?: Maybe<Product_PermissionRelationFilter>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  description?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  name?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

/** Product create input */
export type ProductCreateInput = {
  amount: Scalars['Int'];
  category?: Maybe<ProductCategoryRelationInput>;
  currency?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  feesAmount?: Maybe<Scalars['Int']>;
  feesLookupKey?: Maybe<Scalars['String']>;
  interval: Scalars['String'];
  isActive?: Maybe<Scalars['Boolean']>;
  lookupKey?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  productSubscriptionsRelation?: Maybe<ProductProductSubscriptionsRelationRelationInput>;
  school?: Maybe<ProductSchoolRelationInput>;
  stripeProductId?: Maybe<Scalars['String']>;
};

/** Product create many input */
export type ProductCreateManyInput = {
  amount: Scalars['Int'];
  category?: Maybe<ProductCategoryManyRelationInput>;
  currency?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  feesAmount?: Maybe<Scalars['Int']>;
  feesLookupKey?: Maybe<Scalars['String']>;
  interval: Scalars['String'];
  isActive?: Maybe<Scalars['Boolean']>;
  lookupKey?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  productSubscriptionsRelation?: Maybe<ProductProductSubscriptionsRelationManyRelationInput>;
  school: ProductSchoolManyRelationInput;
  stripeProductId?: Maybe<Scalars['String']>;
};

/** Product delete input */
export type ProductDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** ProductFieldsPermissions create input */
export type ProductFieldsPermissions = {
  amount?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['Boolean']>;
  currency?: Maybe<Scalars['Boolean']>;
  description?: Maybe<Scalars['Boolean']>;
  feesAmount?: Maybe<Scalars['Boolean']>;
  feesLookupKey?: Maybe<Scalars['Boolean']>;
  interval?: Maybe<Scalars['Boolean']>;
  isActive?: Maybe<Scalars['Boolean']>;
  lookupKey?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['Boolean']>;
  stripeProductId?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type ProductFilter = {
  AND?: Maybe<Array<ProductFilter>>;
  OR?: Maybe<Array<ProductFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  amount?: Maybe<IntPredicate>;
  category?: Maybe<ProductCategoryFilter>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  currency?: Maybe<StringPredicate>;
  deletedAt?: Maybe<IntPredicate>;
  description?: Maybe<StringPredicate>;
  feesAmount?: Maybe<IntPredicate>;
  feesLookupKey?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  interval?: Maybe<StringPredicate>;
  isActive?: Maybe<BoolPredicate>;
  lookupKey?: Maybe<StringPredicate>;
  name?: Maybe<StringPredicate>;
  productSubscriptionsRelation?: Maybe<ProductSubscriptionRelationFilter>;
  school?: Maybe<SchoolFilter>;
  stripeProductId?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type ProductGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: ProductGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type ProductGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  amount?: Maybe<Array<GroupByField>>;
  category?: Maybe<ProductCategoryGroupByQuery>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  currency?: Maybe<Array<GroupByField>>;
  description?: Maybe<Array<GroupByField>>;
  feesAmount?: Maybe<Array<GroupByField>>;
  feesLookupKey?: Maybe<Array<GroupByField>>;
  id?: Maybe<Array<GroupByField>>;
  interval?: Maybe<Array<GroupByField>>;
  isActive?: Maybe<Array<GroupByField>>;
  lookupKey?: Maybe<Array<GroupByField>>;
  name?: Maybe<Array<GroupByField>>;
  productSubscriptionsRelation?: Maybe<ProductSubscriptionGroupByQuery>;
  school?: Maybe<SchoolGroupByQuery>;
  stripeProductId?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

export type ProductKeyFilter = {
  feesLookupKey?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  lookupKey?: Maybe<Scalars['String']>;
  stripeProductId?: Maybe<Scalars['String']>;
};

/** ProductListResponse output */
export type ProductListResponse = {
  __typename?: 'ProductListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<Product>;
};

/** ProductManyResponse output */
export type ProductManyResponse = {
  __typename?: 'ProductManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<Product>;
};

/** No longer supported. Use `sort` instead. */
export enum ProductOrderBy {
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CurrencyAsc = 'currency_ASC',
  CurrencyDesc = 'currency_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  FeesAmountAsc = 'feesAmount_ASC',
  FeesAmountDesc = 'feesAmount_DESC',
  FeesLookupKeyAsc = 'feesLookupKey_ASC',
  FeesLookupKeyDesc = 'feesLookupKey_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IntervalAsc = 'interval_ASC',
  IntervalDesc = 'interval_DESC',
  IsActiveAsc = 'isActive_ASC',
  IsActiveDesc = 'isActive_DESC',
  LookupKeyAsc = 'lookupKey_ASC',
  LookupKeyDesc = 'lookupKey_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  StripeProductIdAsc = 'stripeProductId_ASC',
  StripeProductIdDesc = 'stripeProductId_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** Product subscription payload */
export type ProductPayload = {
  __typename?: 'ProductPayload';
  mutation: MutationType;
  node: Maybe<Product>;
  previousValues: Maybe<Product>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** Product relation input */
export type ProductProductSubscriptionsRelationManyRelationInput = {
  connect?: Maybe<Array<ProductSubscriptionKeyFilter>>;
};

/** Product relation input */
export type ProductProductSubscriptionsRelationRelationInput = {
  connect?: Maybe<Array<ProductSubscriptionKeyFilter>>;
  create?: Maybe<Array<Maybe<Product_ProductSubscriptionCreateInput>>>;
};

/** Product relation input */
export type ProductProductSubscriptionsRelationUpdateRelationInput = {
  connect?: Maybe<Array<ProductSubscriptionKeyFilter>>;
  create?: Maybe<Array<Maybe<Product_ProductSubscriptionCreateInput>>>;
  disconnect?: Maybe<Array<ProductSubscriptionKeyFilter>>;
  reconnect?: Maybe<Array<ProductSubscriptionKeyFilter>>;
  update?: Maybe<Array<Maybe<Product_ProductSubscriptionUpdateInput>>>;
};

export type ProductRelationFilter = {
  every?: Maybe<ProductFilter>;
  none?: Maybe<ProductFilter>;
  some?: Maybe<ProductFilter>;
};

/** Product relation input */
export type ProductSchoolManyRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
};

/** Product relation input */
export type ProductSchoolRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<SchoolProductRelation_SchoolCreateInput>;
};

/** Product relation input */
export type ProductSchoolUpdateRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<SchoolProductRelation_SchoolCreateInput>;
  disconnect?: Maybe<SchoolKeyFilter>;
  reconnect?: Maybe<SchoolKeyFilter>;
  update?: Maybe<SchoolProductRelation_SchoolUpdateInput>;
};

export type ProductSort = {
  amount?: Maybe<SortOrder>;
  category?: Maybe<ProductCategorySort>;
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  currency?: Maybe<SortOrder>;
  deletedAt?: Maybe<SortOrder>;
  description?: Maybe<SortOrder>;
  feesAmount?: Maybe<SortOrder>;
  feesLookupKey?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  interval?: Maybe<SortOrder>;
  isActive?: Maybe<SortOrder>;
  lookupKey?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  school?: Maybe<SchoolSort>;
  stripeProductId?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
};

export type ProductSubscription = {
  __typename?: 'ProductSubscription';
  _description: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  customer: Maybe<Customer>;
  deletedAt: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  periodEnd: Maybe<Scalars['DateTime']>;
  periodStart: Maybe<Scalars['DateTime']>;
  product: Maybe<Product>;
  status: Maybe<Scalars['String']>;
  stripeSubscriptionId: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

/** ProductSubscription create input */
export type ProductSubscriptionCreateInput = {
  customer?: Maybe<ProductSubscriptionCustomerRelationInput>;
  periodEnd?: Maybe<Scalars['DateTime']>;
  periodStart?: Maybe<Scalars['DateTime']>;
  product?: Maybe<ProductSubscriptionProductRelationInput>;
  status?: Maybe<Scalars['String']>;
  stripeSubscriptionId: Scalars['String'];
};

/** ProductSubscription create many input */
export type ProductSubscriptionCreateManyInput = {
  customer: ProductSubscriptionCustomerManyRelationInput;
  periodEnd?: Maybe<Scalars['DateTime']>;
  periodStart?: Maybe<Scalars['DateTime']>;
  product: ProductSubscriptionProductManyRelationInput;
  status?: Maybe<Scalars['String']>;
  stripeSubscriptionId: Scalars['String'];
};

/** ProductSubscription relation input */
export type ProductSubscriptionCustomerManyRelationInput = {
  connect?: Maybe<CustomerKeyFilter>;
};

/** ProductSubscription relation input */
export type ProductSubscriptionCustomerRelationInput = {
  connect?: Maybe<CustomerKeyFilter>;
  create?: Maybe<CustomerSubscriptionsRelation_CustomerCreateInput>;
};

/** ProductSubscription relation input */
export type ProductSubscriptionCustomerUpdateRelationInput = {
  connect?: Maybe<CustomerKeyFilter>;
  create?: Maybe<CustomerSubscriptionsRelation_CustomerCreateInput>;
  disconnect?: Maybe<CustomerKeyFilter>;
  reconnect?: Maybe<CustomerKeyFilter>;
  update?: Maybe<CustomerSubscriptionsRelation_CustomerUpdateInput>;
};

/** ProductSubscription delete input */
export type ProductSubscriptionDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** ProductSubscriptionFieldsPermissions create input */
export type ProductSubscriptionFieldsPermissions = {
  createdAt?: Maybe<Scalars['Boolean']>;
  periodEnd?: Maybe<Scalars['Boolean']>;
  periodStart?: Maybe<Scalars['Boolean']>;
  status?: Maybe<Scalars['Boolean']>;
  stripeSubscriptionId?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type ProductSubscriptionFilter = {
  AND?: Maybe<Array<ProductSubscriptionFilter>>;
  OR?: Maybe<Array<ProductSubscriptionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  customer?: Maybe<CustomerFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  periodEnd?: Maybe<DateTimePredicate>;
  periodStart?: Maybe<DateTimePredicate>;
  product?: Maybe<ProductFilter>;
  status?: Maybe<StringPredicate>;
  stripeSubscriptionId?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type ProductSubscriptionGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: ProductSubscriptionGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type ProductSubscriptionGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  customer?: Maybe<CustomerGroupByQuery>;
  id?: Maybe<Array<GroupByField>>;
  periodEnd?: Maybe<Array<GroupByField>>;
  periodStart?: Maybe<Array<GroupByField>>;
  product?: Maybe<ProductGroupByQuery>;
  status?: Maybe<Array<GroupByField>>;
  stripeSubscriptionId?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

export type ProductSubscriptionKeyFilter = {
  id?: Maybe<Scalars['ID']>;
  stripeSubscriptionId?: Maybe<Scalars['String']>;
};

/** ProductSubscriptionListResponse output */
export type ProductSubscriptionListResponse = {
  __typename?: 'ProductSubscriptionListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<ProductSubscription>;
};

/** ProductSubscriptionManyResponse output */
export type ProductSubscriptionManyResponse = {
  __typename?: 'ProductSubscriptionManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<ProductSubscription>;
};

/** No longer supported. Use `sort` instead. */
export enum ProductSubscriptionOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PeriodEndAsc = 'periodEnd_ASC',
  PeriodEndDesc = 'periodEnd_DESC',
  PeriodStartAsc = 'periodStart_ASC',
  PeriodStartDesc = 'periodStart_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  StripeSubscriptionIdAsc = 'stripeSubscriptionId_ASC',
  StripeSubscriptionIdDesc = 'stripeSubscriptionId_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** ProductSubscription subscription payload */
export type ProductSubscriptionPayload = {
  __typename?: 'ProductSubscriptionPayload';
  mutation: MutationType;
  node: Maybe<ProductSubscription>;
  previousValues: Maybe<ProductSubscription>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** ProductSubscription relation input */
export type ProductSubscriptionProductManyRelationInput = {
  connect?: Maybe<ProductKeyFilter>;
};

/** ProductSubscription relation input */
export type ProductSubscriptionProductRelationInput = {
  connect?: Maybe<ProductKeyFilter>;
  create?: Maybe<ProductSubscriptionsRelation_ProductCreateInput>;
};

/** ProductSubscription relation input */
export type ProductSubscriptionProductUpdateRelationInput = {
  connect?: Maybe<ProductKeyFilter>;
  create?: Maybe<ProductSubscriptionsRelation_ProductCreateInput>;
  disconnect?: Maybe<ProductKeyFilter>;
  reconnect?: Maybe<ProductKeyFilter>;
  update?: Maybe<ProductSubscriptionsRelation_ProductUpdateInput>;
};

export type ProductSubscriptionRelationFilter = {
  every?: Maybe<ProductSubscriptionFilter>;
  none?: Maybe<ProductSubscriptionFilter>;
  some?: Maybe<ProductSubscriptionFilter>;
};

export type ProductSubscriptionSort = {
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  customer?: Maybe<CustomerSort>;
  deletedAt?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  periodEnd?: Maybe<SortOrder>;
  periodStart?: Maybe<SortOrder>;
  product?: Maybe<ProductSort>;
  status?: Maybe<SortOrder>;
  stripeSubscriptionId?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
};

/** ProductSubscription subscription filter */
export type ProductSubscriptionSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<ProductSubscriptionFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** ProductSubscription update input */
export type ProductSubscriptionUpdateByFilterInput = {
  periodEnd?: Maybe<Array<Maybe<UpdateByFilterDateTimeInput>>>;
  periodStart?: Maybe<Array<Maybe<UpdateByFilterDateTimeInput>>>;
  status?: Maybe<Array<Maybe<UpdateByFilterStringSwitchInput>>>;
  stripeSubscriptionId?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** ProductSubscription update input */
export type ProductSubscriptionUpdateInput = {
  customer?: Maybe<ProductSubscriptionCustomerUpdateRelationInput>;
  id?: Maybe<Scalars['ID']>;
  periodEnd?: Maybe<Scalars['DateTime']>;
  periodStart?: Maybe<Scalars['DateTime']>;
  product?: Maybe<ProductSubscriptionProductUpdateRelationInput>;
  status?: Maybe<Scalars['String']>;
  stripeSubscriptionId?: Maybe<Scalars['String']>;
};

export type ProductSubscription_PermissionFilter = {
  AND?: Maybe<Array<ProductSubscription_PermissionFilter>>;
  OR?: Maybe<Array<ProductSubscription_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  customer?: Maybe<Customer_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  periodEnd?: Maybe<DateTimePredicate>;
  periodStart?: Maybe<DateTimePredicate>;
  product?: Maybe<Product_PermissionFilter>;
  status?: Maybe<StringPredicate>;
  stripeSubscriptionId?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type ProductSubscription_PermissionRelationFilter = {
  every?: Maybe<ProductSubscription_PermissionFilter>;
  none?: Maybe<ProductSubscription_PermissionFilter>;
  some?: Maybe<ProductSubscription_PermissionFilter>;
};

/** Product create input from productSubscriptionsRelation */
export type ProductSubscriptionsRelation_ProductCreateInput = {
  amount: Scalars['Int'];
  category?: Maybe<ProductCategoryRelationInput>;
  currency?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  feesAmount?: Maybe<Scalars['Int']>;
  feesLookupKey?: Maybe<Scalars['String']>;
  interval: Scalars['String'];
  isActive?: Maybe<Scalars['Boolean']>;
  lookupKey?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  productSubscriptionsRelation?: Maybe<ProductProductSubscriptionsRelationRelationInput>;
  school?: Maybe<ProductSchoolRelationInput>;
  stripeProductId?: Maybe<Scalars['String']>;
};

/** Product update input from productSubscriptionsRelation */
export type ProductSubscriptionsRelation_ProductUpdateInput = {
  amount?: Maybe<Scalars['Int']>;
  category?: Maybe<ProductCategoryUpdateRelationInput>;
  currency?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  feesAmount?: Maybe<Scalars['Int']>;
  feesLookupKey?: Maybe<Scalars['String']>;
  interval?: Maybe<Scalars['String']>;
  isActive?: Maybe<Scalars['Boolean']>;
  lookupKey?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  productSubscriptionsRelation?: Maybe<ProductProductSubscriptionsRelationUpdateRelationInput>;
  school?: Maybe<ProductSchoolUpdateRelationInput>;
  stripeProductId?: Maybe<Scalars['String']>;
};

/** Product update input */
export type ProductUpdateByFilterInput = {
  amount?: Maybe<Array<Maybe<UpdateByFilterIntInput>>>;
  currency?: Maybe<Array<Maybe<UpdateByFilterStringSwitchInput>>>;
  description?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  feesAmount?: Maybe<Array<Maybe<UpdateByFilterIntInput>>>;
  feesLookupKey?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  interval?: Maybe<Array<Maybe<UpdateByFilterStringSwitchInput>>>;
  isActive?: Maybe<Array<Maybe<UpdateByFilterBooleanSwitchInput>>>;
  lookupKey?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  name?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  stripeProductId?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** Product update input */
export type ProductUpdateInput = {
  amount?: Maybe<Scalars['Int']>;
  category?: Maybe<ProductCategoryUpdateRelationInput>;
  currency?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  feesAmount?: Maybe<Scalars['Int']>;
  feesLookupKey?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  interval?: Maybe<Scalars['String']>;
  isActive?: Maybe<Scalars['Boolean']>;
  lookupKey?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  productSubscriptionsRelation?: Maybe<ProductProductSubscriptionsRelationUpdateRelationInput>;
  school?: Maybe<ProductSchoolUpdateRelationInput>;
  stripeProductId?: Maybe<Scalars['String']>;
};

export type Product_PermissionFilter = {
  AND?: Maybe<Array<Product_PermissionFilter>>;
  OR?: Maybe<Array<Product_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  amount?: Maybe<IntPredicate>;
  category?: Maybe<ProductCategory_PermissionFilter>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  currency?: Maybe<StringPredicate>;
  deletedAt?: Maybe<IntPredicate>;
  description?: Maybe<StringPredicate>;
  feesAmount?: Maybe<IntPredicate>;
  feesLookupKey?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  interval?: Maybe<StringPredicate>;
  isActive?: Maybe<BoolPredicate>;
  lookupKey?: Maybe<StringPredicate>;
  name?: Maybe<StringPredicate>;
  productSubscriptionsRelation?: Maybe<ProductSubscription_PermissionRelationFilter>;
  school?: Maybe<School_PermissionFilter>;
  stripeProductId?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type Product_PermissionRelationFilter = {
  every?: Maybe<Product_PermissionFilter>;
  none?: Maybe<Product_PermissionFilter>;
  some?: Maybe<Product_PermissionFilter>;
};

/** ProductSubscription create input from product */
export type Product_ProductSubscriptionCreateInput = {
  customer?: Maybe<ProductSubscriptionCustomerRelationInput>;
  periodEnd?: Maybe<Scalars['DateTime']>;
  periodStart?: Maybe<Scalars['DateTime']>;
  product?: Maybe<ProductSubscriptionProductRelationInput>;
  status?: Maybe<Scalars['String']>;
  stripeSubscriptionId: Scalars['String'];
};

/** ProductSubscription update input from product */
export type Product_ProductSubscriptionUpdateInput = {
  data: ProductSubscriptionUpdateInput;
  filter?: Maybe<ProductSubscriptionKeyFilter>;
};

export type Profile = {
  __typename?: 'Profile';
  _description: Maybe<Scalars['String']>;
  accountType: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements: Maybe<AchievementListResponse>;
  biography: Maybe<Scalars['String']>;
  birthdate: Maybe<Scalars['String']>;
  bjjFanatics: Maybe<Scalars['String']>;
  bjjHeroes: Maybe<Scalars['String']>;
  boxRec: Maybe<Scalars['String']>;
  checkin: Maybe<CheckinListResponse>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  displayName: Maybe<Scalars['String']>;
  displayRank: Maybe<Scalars['String']>;
  email: Maybe<Scalars['String']>;
  espn: Maybe<Scalars['String']>;
  facebook: Maybe<Scalars['String']>;
  firstName: Maybe<Scalars['String']>;
  fullName: Maybe<Scalars['String']>;
  gender: Maybe<Scalars['String']>;
  groupalClass: Maybe<GroupalClassListResponse>;
  height: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  idProfile: Maybe<UserProfileListResponse>;
  instagram: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation: Maybe<PrivateClassListResponse>;
  lastName: Maybe<Scalars['String']>;
  lineage: Maybe<Scalars['String']>;
  masterProfile: Maybe<RankIssuedListResponse>;
  mmaJunkie: Maybe<Scalars['String']>;
  nationality: Maybe<Scalars['String']>;
  nickname: Maybe<Scalars['String']>;
  phone: Maybe<Scalars['String']>;
  photo: Maybe<File>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId: Maybe<Scalars['String']>;
  profileSchool: Maybe<SchoolProfileListResponse>;
  profileShortUrlRelation: Maybe<ShortUrlListResponse>;
  profileTeam: Maybe<TeamProfileListResponse>;
  rankIssuedProfile: Maybe<RankIssuedListResponse>;
  rankSmall: Maybe<File>;
  rankw80h8: Maybe<File>;
  rankw375h24: Maybe<File>;
  scheduleProfile: Maybe<ScheduleListResponse>;
  sherDog: Maybe<Scalars['String']>;
  stripeAccount: Maybe<StripeAccount>;
  teamOrAffiliation: Maybe<Scalars['String']>;
  twitter: Maybe<Scalars['String']>;
  ufc: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
  username: Maybe<Scalars['String']>;
  videoLink: Maybe<VideoLinkListResponse>;
  videosProfileRelation: Maybe<VideoListResponse>;
  website: Maybe<Scalars['String']>;
  weight: Maybe<Scalars['String']>;
  wikipedia: Maybe<Scalars['String']>;
  youtube: Maybe<Scalars['String']>;
};

export type ProfileAchievementsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<AchievementFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<AchievementGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<AchievementOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<AchievementSort>>;
};

export type ProfileCheckinArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<CheckinFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<CheckinGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<CheckinOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<CheckinSort>>;
};

export type ProfileGroupalClassArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<GroupalClassFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<GroupalClassGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<GroupalClassOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupalClassSort>>;
};

export type ProfileIdProfileArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<UserProfileFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<UserProfileGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<UserProfileOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<UserProfileSort>>;
};

export type ProfileInstructorPrivateClassesRelationArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<PrivateClassFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<PrivateClassGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<PrivateClassOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<PrivateClassSort>>;
};

export type ProfileMasterProfileArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<RankIssuedFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<RankIssuedGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<RankIssuedOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<RankIssuedSort>>;
};

export type ProfileProfileSchoolArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<SchoolProfileFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<SchoolProfileGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<SchoolProfileOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<SchoolProfileSort>>;
};

export type ProfileProfileShortUrlRelationArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ShortUrlFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ShortUrlGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ShortUrlOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ShortUrlSort>>;
};

export type ProfileProfileTeamArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<TeamProfileFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<TeamProfileGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<TeamProfileOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<TeamProfileSort>>;
};

export type ProfileRankIssuedProfileArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<RankIssuedFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<RankIssuedGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<RankIssuedOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<RankIssuedSort>>;
};

export type ProfileScheduleProfileArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ScheduleFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ScheduleGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ScheduleOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ScheduleSort>>;
};

export type ProfileVideoLinkArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<VideoLinkFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<VideoLinkGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<VideoLinkOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<VideoLinkSort>>;
};

export type ProfileVideosProfileRelationArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<VideoFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<VideoGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<VideoOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<VideoSort>>;
};

/** Profile relation input */
export type ProfileAchievementsManyRelationInput = {
  connect?: Maybe<Array<AchievementKeyFilter>>;
};

/** Profile relation input */
export type ProfileAchievementsRelationInput = {
  connect?: Maybe<Array<AchievementKeyFilter>>;
  create?: Maybe<Array<Maybe<Profile_AchievementCreateInput>>>;
};

/** Profile relation input */
export type ProfileAchievementsUpdateRelationInput = {
  connect?: Maybe<Array<AchievementKeyFilter>>;
  create?: Maybe<Array<Maybe<Profile_AchievementCreateInput>>>;
  disconnect?: Maybe<Array<AchievementKeyFilter>>;
  reconnect?: Maybe<Array<AchievementKeyFilter>>;
  update?: Maybe<Array<Maybe<Profile_AchievementUpdateInput>>>;
};

/** Profile relation input */
export type ProfileCheckinManyRelationInput = {
  connect?: Maybe<Array<CheckinKeyFilter>>;
};

/** Profile relation input */
export type ProfileCheckinRelationInput = {
  connect?: Maybe<Array<CheckinKeyFilter>>;
  create?: Maybe<Array<Maybe<Profile_CheckinCreateInput>>>;
};

/** Profile relation input */
export type ProfileCheckinUpdateRelationInput = {
  connect?: Maybe<Array<CheckinKeyFilter>>;
  create?: Maybe<Array<Maybe<Profile_CheckinCreateInput>>>;
  disconnect?: Maybe<Array<CheckinKeyFilter>>;
  reconnect?: Maybe<Array<CheckinKeyFilter>>;
  update?: Maybe<Array<Maybe<Profile_CheckinUpdateInput>>>;
};

/** Profile create input */
export type ProfileCreateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8RelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24RelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Profile create many input */
export type ProfileCreateManyInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsManyRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinManyRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassManyRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileManyRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationManyRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileManyRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoManyRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolManyRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationManyRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamManyRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileManyRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallManyRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8ManyRelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24ManyRelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileManyRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountManyRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkManyRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationManyRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Profile delete input */
export type ProfileDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** ProfileFieldsPermissions create input */
export type ProfileFieldsPermissions = {
  accountType?: Maybe<Scalars['Boolean']>;
  biography?: Maybe<Scalars['Boolean']>;
  birthdate?: Maybe<Scalars['Boolean']>;
  bjjFanatics?: Maybe<Scalars['Boolean']>;
  bjjHeroes?: Maybe<Scalars['Boolean']>;
  boxRec?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['Boolean']>;
  displayName?: Maybe<Scalars['Boolean']>;
  displayRank?: Maybe<Scalars['Boolean']>;
  email?: Maybe<Scalars['Boolean']>;
  espn?: Maybe<Scalars['Boolean']>;
  facebook?: Maybe<Scalars['Boolean']>;
  firstName?: Maybe<Scalars['Boolean']>;
  fullName?: Maybe<Scalars['Boolean']>;
  gender?: Maybe<Scalars['Boolean']>;
  height?: Maybe<Scalars['Boolean']>;
  instagram?: Maybe<Scalars['Boolean']>;
  lastName?: Maybe<Scalars['Boolean']>;
  lineage?: Maybe<Scalars['Boolean']>;
  mmaJunkie?: Maybe<Scalars['Boolean']>;
  nationality?: Maybe<Scalars['Boolean']>;
  nickname?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['Boolean']>;
  profileAirtableId?: Maybe<Scalars['Boolean']>;
  sherDog?: Maybe<Scalars['Boolean']>;
  teamOrAffiliation?: Maybe<Scalars['Boolean']>;
  twitter?: Maybe<Scalars['Boolean']>;
  ufc?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
  username?: Maybe<Scalars['Boolean']>;
  website?: Maybe<Scalars['Boolean']>;
  weight?: Maybe<Scalars['Boolean']>;
  wikipedia?: Maybe<Scalars['Boolean']>;
  youtube?: Maybe<Scalars['Boolean']>;
};

export type ProfileFilter = {
  AND?: Maybe<Array<ProfileFilter>>;
  OR?: Maybe<Array<ProfileFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  achievements?: Maybe<AchievementRelationFilter>;
  biography?: Maybe<StringPredicate>;
  birthdate?: Maybe<StringPredicate>;
  bjjFanatics?: Maybe<StringPredicate>;
  bjjHeroes?: Maybe<StringPredicate>;
  boxRec?: Maybe<StringPredicate>;
  checkin?: Maybe<CheckinRelationFilter>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  displayName?: Maybe<StringPredicate>;
  displayRank?: Maybe<StringPredicate>;
  email?: Maybe<StringPredicate>;
  espn?: Maybe<StringPredicate>;
  facebook?: Maybe<StringPredicate>;
  firstName?: Maybe<StringPredicate>;
  fullName?: Maybe<StringPredicate>;
  gender?: Maybe<StringPredicate>;
  groupalClass?: Maybe<GroupalClassRelationFilter>;
  height?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  idProfile?: Maybe<UserProfileRelationFilter>;
  instagram?: Maybe<StringPredicate>;
  instructorPrivateClassesRelation?: Maybe<PrivateClassRelationFilter>;
  lastName?: Maybe<StringPredicate>;
  lineage?: Maybe<StringPredicate>;
  masterProfile?: Maybe<RankIssuedRelationFilter>;
  mmaJunkie?: Maybe<StringPredicate>;
  nationality?: Maybe<StringPredicate>;
  nickname?: Maybe<StringPredicate>;
  phone?: Maybe<StringPredicate>;
  photo?: Maybe<FileFilter>;
  profileAirtableId?: Maybe<StringPredicate>;
  profileSchool?: Maybe<SchoolProfileRelationFilter>;
  profileShortUrlRelation?: Maybe<ShortUrlRelationFilter>;
  profileTeam?: Maybe<TeamProfileRelationFilter>;
  rankIssuedProfile?: Maybe<RankIssuedRelationFilter>;
  rankSmall?: Maybe<FileFilter>;
  rankw80h8?: Maybe<FileFilter>;
  rankw375h24?: Maybe<FileFilter>;
  scheduleProfile?: Maybe<ScheduleRelationFilter>;
  sherDog?: Maybe<StringPredicate>;
  stripeAccount?: Maybe<StripeAccountFilter>;
  teamOrAffiliation?: Maybe<StringPredicate>;
  twitter?: Maybe<StringPredicate>;
  ufc?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
  username?: Maybe<StringPredicate>;
  videoLink?: Maybe<VideoLinkRelationFilter>;
  videosProfileRelation?: Maybe<VideoRelationFilter>;
  website?: Maybe<StringPredicate>;
  weight?: Maybe<StringPredicate>;
  wikipedia?: Maybe<StringPredicate>;
  youtube?: Maybe<StringPredicate>;
};

export type ProfileGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: ProfileGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type ProfileGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  accountType?: Maybe<Array<GroupByField>>;
  achievements?: Maybe<AchievementGroupByQuery>;
  biography?: Maybe<Array<GroupByField>>;
  birthdate?: Maybe<Array<GroupByField>>;
  bjjFanatics?: Maybe<Array<GroupByField>>;
  bjjHeroes?: Maybe<Array<GroupByField>>;
  boxRec?: Maybe<Array<GroupByField>>;
  checkin?: Maybe<CheckinGroupByQuery>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  displayName?: Maybe<Array<GroupByField>>;
  displayRank?: Maybe<Array<GroupByField>>;
  email?: Maybe<Array<GroupByField>>;
  espn?: Maybe<Array<GroupByField>>;
  facebook?: Maybe<Array<GroupByField>>;
  firstName?: Maybe<Array<GroupByField>>;
  fullName?: Maybe<Array<GroupByField>>;
  gender?: Maybe<Array<GroupByField>>;
  groupalClass?: Maybe<GroupalClassGroupByQuery>;
  height?: Maybe<Array<GroupByField>>;
  id?: Maybe<Array<GroupByField>>;
  idProfile?: Maybe<UserProfileGroupByQuery>;
  instagram?: Maybe<Array<GroupByField>>;
  instructorPrivateClassesRelation?: Maybe<PrivateClassGroupByQuery>;
  lastName?: Maybe<Array<GroupByField>>;
  lineage?: Maybe<Array<GroupByField>>;
  masterProfile?: Maybe<RankIssuedGroupByQuery>;
  mmaJunkie?: Maybe<Array<GroupByField>>;
  nationality?: Maybe<Array<GroupByField>>;
  nickname?: Maybe<Array<GroupByField>>;
  phone?: Maybe<Array<GroupByField>>;
  photo?: Maybe<FileGroupByQuery>;
  profileAirtableId?: Maybe<Array<GroupByField>>;
  profileSchool?: Maybe<SchoolProfileGroupByQuery>;
  profileShortUrlRelation?: Maybe<ShortUrlGroupByQuery>;
  profileTeam?: Maybe<TeamProfileGroupByQuery>;
  rankIssuedProfile?: Maybe<RankIssuedGroupByQuery>;
  rankSmall?: Maybe<FileGroupByQuery>;
  rankw80h8?: Maybe<FileGroupByQuery>;
  rankw375h24?: Maybe<FileGroupByQuery>;
  scheduleProfile?: Maybe<ScheduleGroupByQuery>;
  sherDog?: Maybe<Array<GroupByField>>;
  stripeAccount?: Maybe<StripeAccountGroupByQuery>;
  teamOrAffiliation?: Maybe<Array<GroupByField>>;
  twitter?: Maybe<Array<GroupByField>>;
  ufc?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
  username?: Maybe<Array<GroupByField>>;
  videoLink?: Maybe<VideoLinkGroupByQuery>;
  videosProfileRelation?: Maybe<VideoGroupByQuery>;
  website?: Maybe<Array<GroupByField>>;
  weight?: Maybe<Array<GroupByField>>;
  wikipedia?: Maybe<Array<GroupByField>>;
  youtube?: Maybe<Array<GroupByField>>;
};

/** Profile relation input */
export type ProfileGroupalClassManyRelationInput = {
  connect?: Maybe<Array<GroupalClassKeyFilter>>;
};

/** Profile relation input */
export type ProfileGroupalClassRelationInput = {
  connect?: Maybe<Array<GroupalClassKeyFilter>>;
  create?: Maybe<Array<Maybe<Profile_GroupalClassCreateInput>>>;
};

/** Profile relation input */
export type ProfileGroupalClassUpdateRelationInput = {
  connect?: Maybe<Array<GroupalClassKeyFilter>>;
  create?: Maybe<Array<Maybe<Profile_GroupalClassCreateInput>>>;
  disconnect?: Maybe<Array<GroupalClassKeyFilter>>;
  reconnect?: Maybe<Array<GroupalClassKeyFilter>>;
  update?: Maybe<Array<Maybe<Profile_GroupalClassUpdateInput>>>;
};

/** Profile relation input */
export type ProfileIdProfileManyRelationInput = {
  connect?: Maybe<Array<UserProfileKeyFilter>>;
};

/** Profile relation input */
export type ProfileIdProfileRelationInput = {
  connect?: Maybe<Array<UserProfileKeyFilter>>;
  create?: Maybe<Array<Maybe<IdProfile_UserProfileCreateInput>>>;
};

/** Profile relation input */
export type ProfileIdProfileUpdateRelationInput = {
  connect?: Maybe<Array<UserProfileKeyFilter>>;
  create?: Maybe<Array<Maybe<IdProfile_UserProfileCreateInput>>>;
  disconnect?: Maybe<Array<UserProfileKeyFilter>>;
  reconnect?: Maybe<Array<UserProfileKeyFilter>>;
  update?: Maybe<Array<Maybe<IdProfile_UserProfileUpdateInput>>>;
};

/** Profile relation input */
export type ProfileInstructorPrivateClassesRelationManyRelationInput = {
  connect?: Maybe<Array<PrivateClassKeyFilter>>;
};

/** Profile relation input */
export type ProfileInstructorPrivateClassesRelationRelationInput = {
  connect?: Maybe<Array<PrivateClassKeyFilter>>;
  create?: Maybe<Array<Maybe<Instructor_PrivateClassCreateInput>>>;
};

/** Profile relation input */
export type ProfileInstructorPrivateClassesRelationUpdateRelationInput = {
  connect?: Maybe<Array<PrivateClassKeyFilter>>;
  create?: Maybe<Array<Maybe<Instructor_PrivateClassCreateInput>>>;
  disconnect?: Maybe<Array<PrivateClassKeyFilter>>;
  reconnect?: Maybe<Array<PrivateClassKeyFilter>>;
  update?: Maybe<Array<Maybe<Instructor_PrivateClassUpdateInput>>>;
};

export type ProfileKeyFilter = {
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
};

/** ProfileListResponse output */
export type ProfileListResponse = {
  __typename?: 'ProfileListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<Profile>;
};

/** ProfileManyResponse output */
export type ProfileManyResponse = {
  __typename?: 'ProfileManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<Profile>;
};

/** Profile relation input */
export type ProfileMasterProfileManyRelationInput = {
  connect?: Maybe<Array<RankIssuedKeyFilter>>;
};

/** Profile relation input */
export type ProfileMasterProfileRelationInput = {
  connect?: Maybe<Array<RankIssuedKeyFilter>>;
  create?: Maybe<Array<Maybe<Master_RankIssuedCreateInput>>>;
};

/** Profile relation input */
export type ProfileMasterProfileUpdateRelationInput = {
  connect?: Maybe<Array<RankIssuedKeyFilter>>;
  create?: Maybe<Array<Maybe<Master_RankIssuedCreateInput>>>;
  disconnect?: Maybe<Array<RankIssuedKeyFilter>>;
  reconnect?: Maybe<Array<RankIssuedKeyFilter>>;
  update?: Maybe<Array<Maybe<Master_RankIssuedUpdateInput>>>;
};

/** No longer supported. Use `sort` instead. */
export enum ProfileOrderBy {
  BiographyAsc = 'biography_ASC',
  BiographyDesc = 'biography_DESC',
  BirthdateAsc = 'birthdate_ASC',
  BirthdateDesc = 'birthdate_DESC',
  BjjFanaticsAsc = 'bjjFanatics_ASC',
  BjjFanaticsDesc = 'bjjFanatics_DESC',
  BjjHeroesAsc = 'bjjHeroes_ASC',
  BjjHeroesDesc = 'bjjHeroes_DESC',
  BoxRecAsc = 'boxRec_ASC',
  BoxRecDesc = 'boxRec_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DisplayNameAsc = 'displayName_ASC',
  DisplayNameDesc = 'displayName_DESC',
  DisplayRankAsc = 'displayRank_ASC',
  DisplayRankDesc = 'displayRank_DESC',
  EmailAsc = 'email_ASC',
  EmailDesc = 'email_DESC',
  EspnAsc = 'espn_ASC',
  EspnDesc = 'espn_DESC',
  FacebookAsc = 'facebook_ASC',
  FacebookDesc = 'facebook_DESC',
  FirstNameAsc = 'firstName_ASC',
  FirstNameDesc = 'firstName_DESC',
  FullNameAsc = 'fullName_ASC',
  FullNameDesc = 'fullName_DESC',
  GenderAsc = 'gender_ASC',
  GenderDesc = 'gender_DESC',
  HeightAsc = 'height_ASC',
  HeightDesc = 'height_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  InstagramAsc = 'instagram_ASC',
  InstagramDesc = 'instagram_DESC',
  LastNameAsc = 'lastName_ASC',
  LastNameDesc = 'lastName_DESC',
  LineageAsc = 'lineage_ASC',
  LineageDesc = 'lineage_DESC',
  MmaJunkieAsc = 'mmaJunkie_ASC',
  MmaJunkieDesc = 'mmaJunkie_DESC',
  NationalityAsc = 'nationality_ASC',
  NationalityDesc = 'nationality_DESC',
  NicknameAsc = 'nickname_ASC',
  NicknameDesc = 'nickname_DESC',
  PhoneAsc = 'phone_ASC',
  PhoneDesc = 'phone_DESC',
  ProfileAirtableIdAsc = 'profileAirtableId_ASC',
  ProfileAirtableIdDesc = 'profileAirtableId_DESC',
  SherDogAsc = 'sherDog_ASC',
  SherDogDesc = 'sherDog_DESC',
  TeamOrAffiliationAsc = 'teamOrAffiliation_ASC',
  TeamOrAffiliationDesc = 'teamOrAffiliation_DESC',
  TwitterAsc = 'twitter_ASC',
  TwitterDesc = 'twitter_DESC',
  UfcAsc = 'ufc_ASC',
  UfcDesc = 'ufc_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  UsernameAsc = 'username_ASC',
  UsernameDesc = 'username_DESC',
  WebsiteAsc = 'website_ASC',
  WebsiteDesc = 'website_DESC',
  WeightAsc = 'weight_ASC',
  WeightDesc = 'weight_DESC',
  WikipediaAsc = 'wikipedia_ASC',
  WikipediaDesc = 'wikipedia_DESC',
  YoutubeAsc = 'youtube_ASC',
  YoutubeDesc = 'youtube_DESC',
}

/** Profile subscription payload */
export type ProfilePayload = {
  __typename?: 'ProfilePayload';
  mutation: MutationType;
  node: Maybe<Profile>;
  previousValues: Maybe<Profile>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** Profile relation input */
export type ProfilePhotoManyRelationInput = {
  connect?: Maybe<FileKeyFilter>;
};

/** Profile relation input */
export type ProfilePhotoRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Profiles_Photo_FileCreateInput>;
};

/** Profile relation input */
export type ProfilePhotoUpdateRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Profiles_Photo_FileCreateInput>;
  disconnect?: Maybe<FileKeyFilter>;
  reconnect?: Maybe<FileKeyFilter>;
  update?: Maybe<Profiles_Photo_FileUpdateInput>;
};

/** Profile relation input */
export type ProfileProfileSchoolManyRelationInput = {
  connect?: Maybe<Array<SchoolProfileKeyFilter>>;
};

/** Profile relation input */
export type ProfileProfileSchoolRelationInput = {
  connect?: Maybe<Array<SchoolProfileKeyFilter>>;
  create?: Maybe<Array<Maybe<IdProfile_SchoolProfileCreateInput>>>;
};

/** Profile relation input */
export type ProfileProfileSchoolUpdateRelationInput = {
  connect?: Maybe<Array<SchoolProfileKeyFilter>>;
  create?: Maybe<Array<Maybe<IdProfile_SchoolProfileCreateInput>>>;
  disconnect?: Maybe<Array<SchoolProfileKeyFilter>>;
  reconnect?: Maybe<Array<SchoolProfileKeyFilter>>;
  update?: Maybe<Array<Maybe<IdProfile_SchoolProfileUpdateInput>>>;
};

/** Profile relation input */
export type ProfileProfileShortUrlRelationManyRelationInput = {
  connect?: Maybe<Array<ShortUrlKeyFilter>>;
};

/** Profile relation input */
export type ProfileProfileShortUrlRelationRelationInput = {
  connect?: Maybe<Array<ShortUrlKeyFilter>>;
  create?: Maybe<Array<Maybe<Profile_ShortUrlCreateInput>>>;
};

/** Profile relation input */
export type ProfileProfileShortUrlRelationUpdateRelationInput = {
  connect?: Maybe<Array<ShortUrlKeyFilter>>;
  create?: Maybe<Array<Maybe<Profile_ShortUrlCreateInput>>>;
  disconnect?: Maybe<Array<ShortUrlKeyFilter>>;
  reconnect?: Maybe<Array<ShortUrlKeyFilter>>;
  update?: Maybe<Array<Maybe<Profile_ShortUrlUpdateInput>>>;
};

/** Profile relation input */
export type ProfileProfileTeamManyRelationInput = {
  connect?: Maybe<Array<TeamProfileKeyFilter>>;
};

/** Profile relation input */
export type ProfileProfileTeamRelationInput = {
  connect?: Maybe<Array<TeamProfileKeyFilter>>;
  create?: Maybe<Array<Maybe<IdProfile_TeamProfileCreateInput>>>;
};

/** Profile relation input */
export type ProfileProfileTeamUpdateRelationInput = {
  connect?: Maybe<Array<TeamProfileKeyFilter>>;
  create?: Maybe<Array<Maybe<IdProfile_TeamProfileCreateInput>>>;
  disconnect?: Maybe<Array<TeamProfileKeyFilter>>;
  reconnect?: Maybe<Array<TeamProfileKeyFilter>>;
  update?: Maybe<Array<Maybe<IdProfile_TeamProfileUpdateInput>>>;
};

/** Profile relation input */
export type ProfileRankIssuedProfileManyRelationInput = {
  connect?: Maybe<Array<RankIssuedKeyFilter>>;
};

/** Profile relation input */
export type ProfileRankIssuedProfileRelationInput = {
  connect?: Maybe<Array<RankIssuedKeyFilter>>;
  create?: Maybe<Array<Maybe<DisplayName_RankIssuedCreateInput>>>;
};

/** Profile relation input */
export type ProfileRankIssuedProfileUpdateRelationInput = {
  connect?: Maybe<Array<RankIssuedKeyFilter>>;
  create?: Maybe<Array<Maybe<DisplayName_RankIssuedCreateInput>>>;
  disconnect?: Maybe<Array<RankIssuedKeyFilter>>;
  reconnect?: Maybe<Array<RankIssuedKeyFilter>>;
  update?: Maybe<Array<Maybe<DisplayName_RankIssuedUpdateInput>>>;
};

/** Profile relation input */
export type ProfileRankSmallManyRelationInput = {
  connect?: Maybe<FileKeyFilter>;
};

/** Profile relation input */
export type ProfileRankSmallRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Profiles_RankSmall_FileCreateInput>;
};

/** Profile relation input */
export type ProfileRankSmallUpdateRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Profiles_RankSmall_FileCreateInput>;
  disconnect?: Maybe<FileKeyFilter>;
  reconnect?: Maybe<FileKeyFilter>;
  update?: Maybe<Profiles_RankSmall_FileUpdateInput>;
};

/** Profile relation input */
export type ProfileRankw80h8ManyRelationInput = {
  connect?: Maybe<FileKeyFilter>;
};

/** Profile relation input */
export type ProfileRankw80h8RelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Profiles_Rankw80h8_FileCreateInput>;
};

/** Profile relation input */
export type ProfileRankw80h8UpdateRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Profiles_Rankw80h8_FileCreateInput>;
  disconnect?: Maybe<FileKeyFilter>;
  reconnect?: Maybe<FileKeyFilter>;
  update?: Maybe<Profiles_Rankw80h8_FileUpdateInput>;
};

/** Profile relation input */
export type ProfileRankw375h24ManyRelationInput = {
  connect?: Maybe<FileKeyFilter>;
};

/** Profile relation input */
export type ProfileRankw375h24RelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Profiles_Rankw375h24_FileCreateInput>;
};

/** Profile relation input */
export type ProfileRankw375h24UpdateRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Profiles_Rankw375h24_FileCreateInput>;
  disconnect?: Maybe<FileKeyFilter>;
  reconnect?: Maybe<FileKeyFilter>;
  update?: Maybe<Profiles_Rankw375h24_FileUpdateInput>;
};

export type ProfileRelationFilter = {
  every?: Maybe<ProfileFilter>;
  none?: Maybe<ProfileFilter>;
  some?: Maybe<ProfileFilter>;
};

/** Profile relation input */
export type ProfileScheduleProfileManyRelationInput = {
  connect?: Maybe<Array<ScheduleKeyFilter>>;
};

/** Profile relation input */
export type ProfileScheduleProfileRelationInput = {
  connect?: Maybe<Array<ScheduleKeyFilter>>;
  create?: Maybe<Array<Maybe<IdProfile_ScheduleCreateInput>>>;
};

/** Profile relation input */
export type ProfileScheduleProfileUpdateRelationInput = {
  connect?: Maybe<Array<ScheduleKeyFilter>>;
  create?: Maybe<Array<Maybe<IdProfile_ScheduleCreateInput>>>;
  disconnect?: Maybe<Array<ScheduleKeyFilter>>;
  reconnect?: Maybe<Array<ScheduleKeyFilter>>;
  update?: Maybe<Array<Maybe<IdProfile_ScheduleUpdateInput>>>;
};

/** Profile create input from profileSchool */
export type ProfileSchool_ProfileCreateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8RelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24RelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Profile update input from profileSchool */
export type ProfileSchool_ProfileUpdateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsUpdateRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinUpdateRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassUpdateRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationUpdateRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileUpdateRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoUpdateRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolUpdateRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationUpdateRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamUpdateRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileUpdateRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallUpdateRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8UpdateRelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24UpdateRelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileUpdateRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountUpdateRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkUpdateRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationUpdateRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Profile create input from profileShortUrlRelation */
export type ProfileShortUrlRelation_ProfileCreateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8RelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24RelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Profile update input from profileShortUrlRelation */
export type ProfileShortUrlRelation_ProfileUpdateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsUpdateRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinUpdateRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassUpdateRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationUpdateRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileUpdateRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoUpdateRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolUpdateRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationUpdateRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamUpdateRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileUpdateRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallUpdateRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8UpdateRelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24UpdateRelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileUpdateRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountUpdateRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkUpdateRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationUpdateRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

export type ProfileSort = {
  biography?: Maybe<SortOrder>;
  birthdate?: Maybe<SortOrder>;
  bjjFanatics?: Maybe<SortOrder>;
  bjjHeroes?: Maybe<SortOrder>;
  boxRec?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  displayName?: Maybe<SortOrder>;
  displayRank?: Maybe<SortOrder>;
  email?: Maybe<SortOrder>;
  espn?: Maybe<SortOrder>;
  facebook?: Maybe<SortOrder>;
  firstName?: Maybe<SortOrder>;
  fullName?: Maybe<SortOrder>;
  gender?: Maybe<SortOrder>;
  height?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  instagram?: Maybe<SortOrder>;
  lastName?: Maybe<SortOrder>;
  lineage?: Maybe<SortOrder>;
  mmaJunkie?: Maybe<SortOrder>;
  nationality?: Maybe<SortOrder>;
  nickname?: Maybe<SortOrder>;
  phone?: Maybe<SortOrder>;
  photo?: Maybe<FileSort>;
  profileAirtableId?: Maybe<SortOrder>;
  rankSmall?: Maybe<FileSort>;
  rankw80h8?: Maybe<FileSort>;
  rankw375h24?: Maybe<FileSort>;
  sherDog?: Maybe<SortOrder>;
  stripeAccount?: Maybe<StripeAccountSort>;
  teamOrAffiliation?: Maybe<SortOrder>;
  twitter?: Maybe<SortOrder>;
  ufc?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  username?: Maybe<SortOrder>;
  website?: Maybe<SortOrder>;
  weight?: Maybe<SortOrder>;
  wikipedia?: Maybe<SortOrder>;
  youtube?: Maybe<SortOrder>;
};

/** Profile relation input */
export type ProfileStripeAccountManyRelationInput = {
  connect?: Maybe<StripeAccountKeyFilter>;
};

/** Profile relation input */
export type ProfileStripeAccountRelationInput = {
  connect?: Maybe<StripeAccountKeyFilter>;
  create?: Maybe<Profile_StripeAccountCreateInput>;
};

/** Profile relation input */
export type ProfileStripeAccountUpdateRelationInput = {
  connect?: Maybe<StripeAccountKeyFilter>;
  create?: Maybe<Profile_StripeAccountCreateInput>;
  disconnect?: Maybe<StripeAccountKeyFilter>;
  reconnect?: Maybe<StripeAccountKeyFilter>;
  update?: Maybe<Profile_StripeAccountUpdateInput>;
};

/** Profile subscription filter */
export type ProfileSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<ProfileFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** Profile create input from profileTeam */
export type ProfileTeam_ProfileCreateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8RelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24RelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Profile update input from profileTeam */
export type ProfileTeam_ProfileUpdateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsUpdateRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinUpdateRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassUpdateRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationUpdateRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileUpdateRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoUpdateRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolUpdateRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationUpdateRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamUpdateRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileUpdateRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallUpdateRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8UpdateRelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24UpdateRelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileUpdateRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountUpdateRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkUpdateRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationUpdateRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Profile update input */
export type ProfileUpdateByFilterInput = {
  accountType?: Maybe<Array<Maybe<UpdateByFilterListStringInput>>>;
  biography?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  birthdate?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  bjjFanatics?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  bjjHeroes?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  boxRec?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  displayName?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  displayRank?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  email?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  espn?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  facebook?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  firstName?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  fullName?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  gender?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  height?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  instagram?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  lastName?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  lineage?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  mmaJunkie?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  nationality?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  nickname?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  phone?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  profileAirtableId?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  sherDog?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  teamOrAffiliation?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  twitter?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  ufc?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  username?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  website?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  weight?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  wikipedia?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  youtube?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** Profile update input */
export type ProfileUpdateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsUpdateRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinUpdateRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassUpdateRelationInput>;
  height?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  idProfile?: Maybe<ProfileIdProfileUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationUpdateRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileUpdateRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoUpdateRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolUpdateRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationUpdateRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamUpdateRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileUpdateRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallUpdateRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8UpdateRelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24UpdateRelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileUpdateRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountUpdateRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkUpdateRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationUpdateRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Profile relation input */
export type ProfileVideoLinkManyRelationInput = {
  connect?: Maybe<Array<VideoLinkKeyFilter>>;
};

/** Profile relation input */
export type ProfileVideoLinkRelationInput = {
  connect?: Maybe<Array<VideoLinkKeyFilter>>;
  create?: Maybe<Array<Maybe<Profile_VideoLinkCreateInput>>>;
};

/** Profile relation input */
export type ProfileVideoLinkUpdateRelationInput = {
  connect?: Maybe<Array<VideoLinkKeyFilter>>;
  create?: Maybe<Array<Maybe<Profile_VideoLinkCreateInput>>>;
  disconnect?: Maybe<Array<VideoLinkKeyFilter>>;
  reconnect?: Maybe<Array<VideoLinkKeyFilter>>;
  update?: Maybe<Array<Maybe<Profile_VideoLinkUpdateInput>>>;
};

/** Profile relation input */
export type ProfileVideosProfileRelationManyRelationInput = {
  connect?: Maybe<Array<VideoKeyFilter>>;
};

/** Profile relation input */
export type ProfileVideosProfileRelationRelationInput = {
  connect?: Maybe<Array<VideoKeyFilter>>;
  create?: Maybe<Array<Maybe<Profile_VideoCreateInput>>>;
};

/** Profile relation input */
export type ProfileVideosProfileRelationUpdateRelationInput = {
  connect?: Maybe<Array<VideoKeyFilter>>;
  create?: Maybe<Array<Maybe<Profile_VideoCreateInput>>>;
  disconnect?: Maybe<Array<VideoKeyFilter>>;
  reconnect?: Maybe<Array<VideoKeyFilter>>;
  update?: Maybe<Array<Maybe<Profile_VideoUpdateInput>>>;
};

/** Achievements create input from profile */
export type Profile_AchievementCreateInput = {
  ageDivision?: Maybe<Scalars['String']>;
  beltLevel?: Maybe<Scalars['String']>;
  championship: Scalars['String'];
  gender?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  martialArt?: Maybe<AchievementsMartialArtRelationInput>;
  month?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  profile?: Maybe<AchievementsProfileRelationInput>;
  rankResult?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  year?: Maybe<Scalars['Int']>;
};

/** Achievements update input from profile */
export type Profile_AchievementUpdateInput = {
  data: AchievementUpdateInput;
  filter?: Maybe<AchievementKeyFilter>;
};

/** Checkin create input from profile */
export type Profile_CheckinCreateInput = {
  date?: Maybe<Scalars['Date']>;
  profile?: Maybe<CheckinProfileRelationInput>;
  schedule?: Maybe<CheckinScheduleRelationInput>;
};

/** Checkin update input from profile */
export type Profile_CheckinUpdateInput = {
  data: CheckinUpdateInput;
  filter?: Maybe<CheckinKeyFilter>;
};

/** GroupalClass create input from profile */
export type Profile_GroupalClassCreateInput = {
  days?: Maybe<Scalars['String']>;
  duration?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  profile?: Maybe<GroupalClassProfileRelationInput>;
  school?: Maybe<GroupalClassSchoolRelationInput>;
  startTime?: Maybe<Scalars['DateTime']>;
};

/** GroupalClass update input from profile */
export type Profile_GroupalClassUpdateInput = {
  data: GroupalClassUpdateInput;
  filter?: Maybe<GroupalClassKeyFilter>;
};

export type Profile_PermissionFilter = {
  AND?: Maybe<Array<Profile_PermissionFilter>>;
  OR?: Maybe<Array<Profile_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  achievements?: Maybe<Achievement_PermissionRelationFilter>;
  biography?: Maybe<StringPredicate>;
  birthdate?: Maybe<StringPredicate>;
  bjjFanatics?: Maybe<StringPredicate>;
  bjjHeroes?: Maybe<StringPredicate>;
  boxRec?: Maybe<StringPredicate>;
  checkin?: Maybe<Checkin_PermissionRelationFilter>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  displayName?: Maybe<StringPredicate>;
  displayRank?: Maybe<StringPredicate>;
  email?: Maybe<StringPredicate>;
  espn?: Maybe<StringPredicate>;
  facebook?: Maybe<StringPredicate>;
  firstName?: Maybe<StringPredicate>;
  fullName?: Maybe<StringPredicate>;
  gender?: Maybe<StringPredicate>;
  groupalClass?: Maybe<GroupalClass_PermissionRelationFilter>;
  height?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  idProfile?: Maybe<UserProfile_PermissionRelationFilter>;
  instagram?: Maybe<StringPredicate>;
  instructorPrivateClassesRelation?: Maybe<PrivateClass_PermissionRelationFilter>;
  lastName?: Maybe<StringPredicate>;
  lineage?: Maybe<StringPredicate>;
  masterProfile?: Maybe<RankIssued_PermissionRelationFilter>;
  mmaJunkie?: Maybe<StringPredicate>;
  nationality?: Maybe<StringPredicate>;
  nickname?: Maybe<StringPredicate>;
  phone?: Maybe<StringPredicate>;
  photo?: Maybe<File_PermissionFilter>;
  profileAirtableId?: Maybe<StringPredicate>;
  profileSchool?: Maybe<SchoolProfile_PermissionRelationFilter>;
  profileShortUrlRelation?: Maybe<ShortUrl_PermissionRelationFilter>;
  profileTeam?: Maybe<TeamProfile_PermissionRelationFilter>;
  rankIssuedProfile?: Maybe<RankIssued_PermissionRelationFilter>;
  rankSmall?: Maybe<File_PermissionFilter>;
  rankw80h8?: Maybe<File_PermissionFilter>;
  rankw375h24?: Maybe<File_PermissionFilter>;
  scheduleProfile?: Maybe<Schedule_PermissionRelationFilter>;
  sherDog?: Maybe<StringPredicate>;
  stripeAccount?: Maybe<StripeAccount_PermissionFilter>;
  teamOrAffiliation?: Maybe<StringPredicate>;
  twitter?: Maybe<StringPredicate>;
  ufc?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
  username?: Maybe<StringPredicate>;
  videoLink?: Maybe<VideoLink_PermissionRelationFilter>;
  videosProfileRelation?: Maybe<Video_PermissionRelationFilter>;
  website?: Maybe<StringPredicate>;
  weight?: Maybe<StringPredicate>;
  wikipedia?: Maybe<StringPredicate>;
  youtube?: Maybe<StringPredicate>;
};

export type Profile_PermissionRelationFilter = {
  every?: Maybe<Profile_PermissionFilter>;
  none?: Maybe<Profile_PermissionFilter>;
  some?: Maybe<Profile_PermissionFilter>;
};

/** ShortUrl create input from profile */
export type Profile_ShortUrlCreateInput = {
  profile?: Maybe<ShortUrlProfileRelationInput>;
  school?: Maybe<ShortUrlSchoolRelationInput>;
  slug: Scalars['String'];
  url?: Maybe<Scalars['String']>;
};

/** ShortUrl update input from profile */
export type Profile_ShortUrlUpdateInput = {
  data: ShortUrlUpdateInput;
  filter?: Maybe<ShortUrlKeyFilter>;
};

/** StripeAccount create input from profile */
export type Profile_StripeAccountCreateInput = {
  account: Scalars['String'];
  profile?: Maybe<StripeAccountProfileRelationInput>;
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** StripeAccount update input from profile */
export type Profile_StripeAccountUpdateInput = {
  account?: Maybe<Scalars['String']>;
  profile?: Maybe<StripeAccountProfileUpdateRelationInput>;
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** Video create input from profile */
export type Profile_VideoCreateInput = {
  category?: Maybe<Scalars['String']>;
  dutarion?: Maybe<Scalars['Int']>;
  preview?: Maybe<VideoPreviewRelationInput>;
  profile?: Maybe<VideoProfileRelationInput>;
  thumbnail?: Maybe<VideoThumbnailRelationInput>;
  title?: Maybe<Scalars['String']>;
  video?: Maybe<VideoVideoRelationInput>;
  youtubeID?: Maybe<Scalars['String']>;
};

/** VideoLink create input from profile */
export type Profile_VideoLinkCreateInput = {
  imgUrl?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['String']>;
  profile?: Maybe<VideoLinkProfileRelationInput>;
  rating?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  videoUrl?: Maybe<Scalars['String']>;
  views?: Maybe<Scalars['String']>;
};

/** VideoLink update input from profile */
export type Profile_VideoLinkUpdateInput = {
  data: VideoLinkUpdateInput;
  filter?: Maybe<VideoLinkKeyFilter>;
};

/** Video update input from profile */
export type Profile_VideoUpdateInput = {
  data: VideoUpdateInput;
  filter?: Maybe<VideoKeyFilter>;
};

/** Files create input from profiles_photo */
export type Profiles_Photo_FileCreateInput = {
  brand_logo?: Maybe<FilesBrand_LogoRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8RelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24RelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8RelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8RelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24RelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailRelationInput>;
  video_video?: Maybe<FilesVideo_VideoRelationInput>;
};

/** Files update input from profiles_photo */
export type Profiles_Photo_FileUpdateInput = {
  brand_logo?: Maybe<FilesBrand_LogoUpdateRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverUpdateRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsUpdateRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsUpdateRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoUpdateRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallUpdateRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8UpdateRelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24UpdateRelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoUpdateRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8UpdateRelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8UpdateRelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24UpdateRelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoUpdateRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarUpdateRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoUpdateRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarUpdateRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewUpdateRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailUpdateRelationInput>;
  video_video?: Maybe<FilesVideo_VideoUpdateRelationInput>;
};

/** Files create input from profiles_rankSmall */
export type Profiles_RankSmall_FileCreateInput = {
  brand_logo?: Maybe<FilesBrand_LogoRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8RelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24RelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8RelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8RelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24RelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailRelationInput>;
  video_video?: Maybe<FilesVideo_VideoRelationInput>;
};

/** Files update input from profiles_rankSmall */
export type Profiles_RankSmall_FileUpdateInput = {
  brand_logo?: Maybe<FilesBrand_LogoUpdateRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverUpdateRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsUpdateRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsUpdateRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoUpdateRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallUpdateRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8UpdateRelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24UpdateRelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoUpdateRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8UpdateRelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8UpdateRelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24UpdateRelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoUpdateRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarUpdateRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoUpdateRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarUpdateRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewUpdateRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailUpdateRelationInput>;
  video_video?: Maybe<FilesVideo_VideoUpdateRelationInput>;
};

/** Files create input from profiles_rankw80h8 */
export type Profiles_Rankw80h8_FileCreateInput = {
  brand_logo?: Maybe<FilesBrand_LogoRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8RelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24RelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8RelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8RelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24RelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailRelationInput>;
  video_video?: Maybe<FilesVideo_VideoRelationInput>;
};

/** Files update input from profiles_rankw80h8 */
export type Profiles_Rankw80h8_FileUpdateInput = {
  brand_logo?: Maybe<FilesBrand_LogoUpdateRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverUpdateRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsUpdateRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsUpdateRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoUpdateRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallUpdateRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8UpdateRelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24UpdateRelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoUpdateRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8UpdateRelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8UpdateRelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24UpdateRelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoUpdateRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarUpdateRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoUpdateRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarUpdateRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewUpdateRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailUpdateRelationInput>;
  video_video?: Maybe<FilesVideo_VideoUpdateRelationInput>;
};

/** Files create input from profiles_rankw375h24 */
export type Profiles_Rankw375h24_FileCreateInput = {
  brand_logo?: Maybe<FilesBrand_LogoRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8RelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24RelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8RelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8RelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24RelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailRelationInput>;
  video_video?: Maybe<FilesVideo_VideoRelationInput>;
};

/** Files update input from profiles_rankw375h24 */
export type Profiles_Rankw375h24_FileUpdateInput = {
  brand_logo?: Maybe<FilesBrand_LogoUpdateRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverUpdateRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsUpdateRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsUpdateRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoUpdateRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallUpdateRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8UpdateRelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24UpdateRelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoUpdateRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8UpdateRelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8UpdateRelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24UpdateRelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoUpdateRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarUpdateRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoUpdateRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarUpdateRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewUpdateRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailUpdateRelationInput>;
  video_video?: Maybe<FilesVideo_VideoUpdateRelationInput>;
};

export type Query = {
  __typename?: 'Query';
  achievement: Maybe<Achievement>;
  achievementsList: AchievementListResponse;
  apiToken: Maybe<ApiToken>;
  apiTokensList: ApiTokenListResponse;
  /** @deprecated No longer supported. Use `system.application` instead. */
  application: Maybe<Application>;
  /** @deprecated No longer supported. Use `system.applicationsList` instead. */
  applicationsList: Maybe<ApplicationListResponse>;
  asyncSessionStatus: Maybe<AsyncSessionStatusResponse>;
  authenticationProfile: Maybe<AuthenticationProfile>;
  authenticationProfilesList: AuthenticationProfileListResponse;
  authenticationSettings: Maybe<AuthenticationSetting>;
  /** @deprecated No longer supported. Use `system.billingCurrentPlan` instead. */
  billingCurrentPlan: Maybe<BillingCurrentPlanResponse>;
  /** @deprecated No longer supported. Use `system.memberPaymentDetails, system.organizationPaymentDetails or system.workspacePaymentDetails` instead. */
  billingDetails: Maybe<BillingDetailsResponse>;
  /** @deprecated No longer supported. Use `system.memberBillingHistory, system.organizationBillingHistory or system.workspaceBillingHistory` instead. */
  billingInvoicesList: BillingInvoicesListResponse;
  /** @deprecated No longer supported. Use `system.billingMetricUsageQuotasList` instead. */
  billingMetricUsageQuotasList: BillingMetricUsageQuotasListResponse;
  /** @deprecated No longer supported. Use `system.billingMetricUsagesList` instead. */
  billingMetricUsagesList: BillingMetricUsagesListResponse;
  brand: Maybe<Brand>;
  brandsList: BrandListResponse;
  checkin: Maybe<Checkin>;
  checkinsList: CheckinListResponse;
  ciCdMigration: Maybe<CiCdMigration>;
  ciCdMigrationsList: CiCdMigrationListResponse;
  companyName: Maybe<Scalars['String']>;
  competition: Maybe<Competition>;
  competitionsList: CompetitionListResponse;
  countriesList: CountryListResponse;
  country: Maybe<Country>;
  customer: Maybe<Customer>;
  customersList: CustomerListResponse;
  /** @deprecated No longer supported. Use `system.deployStatus` instead. */
  deployStatus: DeployStatusResult;
  discount: Maybe<Discount>;
  discountsList: DiscountListResponse;
  emailTemplate: Maybe<EmailTemplate>;
  emailTemplatesList: EmailTemplateListResponse;
  environmentVariable: Maybe<EnvironmentVariable>;
  environmentVariablesList: EnvironmentVariableListResponse;
  file: Maybe<File>;
  fileUploadInfo: Maybe<FileUploadInfoResponse>;
  filesList: FileListResponse;
  /** @deprecated No longer supported. Use `system.functionsList` instead. */
  functionsList: Maybe<FunctionListResponse>;
  getWorkspaceTransferInfo: Maybe<WorkspaceTransferItem>;
  groupalClass: Maybe<GroupalClass>;
  groupalClassesList: GroupalClassListResponse;
  language: Maybe<Language>;
  languageCountriesList: LanguageCountryListResponse;
  languageCountry: Maybe<LanguageCountry>;
  languagesList: LanguageListResponse;
  /** @deprecated No longer supported. Use `system.logsList` instead. */
  logs: Maybe<Array<Maybe<Scalars['String']>>>;
  martialArt: Maybe<MartialArt>;
  martialArtsList: MartialArtListResponse;
  plan: Maybe<Plan>;
  planCategoriesList: PlanCategoryListResponse;
  planCategory: Maybe<PlanCategory>;
  plansList: PlanListResponse;
  preSignup: Maybe<PreSignup>;
  preSignupsList: PreSignupListResponse;
  privateClass: Maybe<PrivateClass>;
  privateClassPurchase: Maybe<PrivateClassPurchase>;
  privateClassPurchasesList: PrivateClassPurchaseListResponse;
  privateClassesList: PrivateClassListResponse;
  product: Maybe<Product>;
  productCategoriesList: ProductCategoryListResponse;
  productCategory: Maybe<ProductCategory>;
  productSubscription: Maybe<ProductSubscription>;
  productSubscriptionsList: ProductSubscriptionListResponse;
  productsList: ProductListResponse;
  profile: Maybe<Profile>;
  profilesList: ProfileListResponse;
  rank: Maybe<Rank>;
  rankIssued: Maybe<RankIssued>;
  rankIssuedsList: RankIssuedListResponse;
  ranksList: RankListResponse;
  role: Maybe<Role>;
  rolesList: RoleListResponse;
  schedule: Maybe<Schedule>;
  schedulesList: ScheduleListResponse;
  school: Maybe<School>;
  schoolMartialArt: Maybe<SchoolMartialArt>;
  schoolMartialArtsList: SchoolMartialArtListResponse;
  schoolProfile: Maybe<SchoolProfile>;
  schoolProfilesList: SchoolProfileListResponse;
  schoolStripeAccount: Maybe<SchoolStripeAccount>;
  schoolStripeAccountsList: SchoolStripeAccountListResponse;
  schoolTeam: Maybe<SchoolTeam>;
  schoolTeamsList: SchoolTeamListResponse;
  schoolsList: SchoolListResponse;
  settings: Maybe<Setting>;
  shortLink: Maybe<ShortLink>;
  shortLinksList: ShortLinkListResponse;
  shortUrl: Maybe<ShortUrl>;
  shortUrlsList: ShortUrlListResponse;
  signUp: Maybe<SignUp>;
  signUpsList: SignUpListResponse;
  stripeAccount: Maybe<StripeAccount>;
  stripeAccountsList: StripeAccountListResponse;
  system: Maybe<SystemQuery>;
  /** @deprecated No longer supported. Use `system.table` instead. */
  table: Maybe<Table>;
  /** @deprecated No longer supported. Use `system.tableField` instead. */
  tableField: Maybe<TableField>;
  /** @deprecated No longer supported. Use `system.tablesList` instead. */
  tablesList: TableListResponse;
  team: Maybe<Team>;
  teamMember: Maybe<TeamMember>;
  teamMembersList: TeamMemberListResponse;
  teamProfile: Maybe<TeamProfile>;
  teamProfilesList: TeamProfileListResponse;
  teamsList: TeamListResponse;
  text: Maybe<Text>;
  textsList: TextListResponse;
  unknow: Maybe<Unknow>;
  unknowsList: UnknowListResponse;
  user: Maybe<User>;
  userBillingConfiguration: UserBillingConfigurationResponse;
  /** @deprecated No longer supported. Use `system.userInvitationsList` instead. */
  userInvitationsList: Maybe<UserInvitationList>;
  userProfile: Maybe<UserProfile>;
  userProfilesList: UserProfileListResponse;
  userSchool: Maybe<UserSchool>;
  userSchoolsList: UserSchoolListResponse;
  usersList: UserListResponse;
  video: Maybe<Video>;
  videoLink: Maybe<VideoLink>;
  videoLinksList: VideoLinkListResponse;
  videosList: VideoListResponse;
  waitingList: Maybe<WaitingList>;
  waitingListsList: WaitingListListResponse;
  /** @deprecated No longer supported. Use `system.workspacesList` instead. */
  workspacesList: Maybe<WorkspaceListResponse>;
  xCustomer: Maybe<XCustomer>;
  xCustomersList: XCustomerListResponse;
  xSchoolCustomer: Maybe<XSchoolCustomer>;
  xSchoolCustomersList: XSchoolCustomerListResponse;
};

export type QueryAchievementArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryAchievementsListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<AchievementFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<AchievementGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<AchievementOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<AchievementSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryApiTokenArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryApiTokensListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ApiTokenFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ApiTokenGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ApiTokenOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ApiTokenSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryApplicationArgs = {
  id: Scalars['String'];
};

export type QueryAsyncSessionStatusArgs = {
  sessionId: Scalars['String'];
};

export type QueryAuthenticationProfileArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryAuthenticationProfilesListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<AuthenticationProfileFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<AuthenticationProfileGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<AuthenticationProfileOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<AuthenticationProfileSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryBillingInvoicesListArgs = {
  after?: Maybe<Scalars['ID']>;
  before?: Maybe<Scalars['ID']>;
  by?: Maybe<BillingInvoicesListFilterType>;
  limit?: Maybe<Scalars['Int']>;
};

export type QueryBillingMetricUsagesListArgs = {
  filter?: Maybe<BillingMetricUsagesListFilter>;
};

export type QueryBrandArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryBrandsListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<BrandFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<BrandGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<BrandOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<BrandSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryCheckinArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryCheckinsListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<CheckinFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<CheckinGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<CheckinOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<CheckinSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryCiCdMigrationArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryCiCdMigrationsListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<CiCdMigrationFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<CiCdMigrationGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<CiCdMigrationOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<CiCdMigrationSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryCompetitionArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryCompetitionsListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<CompetitionFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<CompetitionGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<CompetitionOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<CompetitionSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryCountriesListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<CountryFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<CountryGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<CountryOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<CountrySort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryCountryArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryCustomerArgs = {
  id?: Maybe<Scalars['ID']>;
  stripeCustomerId?: Maybe<Scalars['String']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryCustomersListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<CustomerFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<CustomerGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<CustomerOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<CustomerSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryDeployStatusArgs = {
  buildName: Scalars['String'];
};

export type QueryDiscountArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryDiscountsListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<DiscountFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<DiscountGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<DiscountOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<DiscountSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryEmailTemplateArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryEmailTemplatesListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<EmailTemplateFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<EmailTemplateGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<EmailTemplateOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<EmailTemplateSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryEnvironmentVariableArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryEnvironmentVariablesListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<EnvironmentVariableFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<EnvironmentVariableGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<EnvironmentVariableOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<EnvironmentVariableSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryFileArgs = {
  fileId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryFilesListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<FileFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<FileGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<FileOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<FileSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryFunctionsListArgs = {
  applicationId?: Maybe<Scalars['String']>;
  filter?: Maybe<FunctionInfoFilter>;
  orderBy?: Maybe<Array<Maybe<FunctionInfoOrderBy>>>;
};

export type QueryGetWorkspaceTransferInfoArgs = {
  workspaceId: Scalars['String'];
};

export type QueryGroupalClassArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryGroupalClassesListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<GroupalClassFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<GroupalClassGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<GroupalClassOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupalClassSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryLanguageArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryLanguageCountriesListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<LanguageCountryFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<LanguageCountryGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<LanguageCountryOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<LanguageCountrySort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryLanguageCountryArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryLanguagesListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<LanguageFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<LanguageGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<LanguageOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<LanguageSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryLogsArgs = {
  applicationId?: Maybe<Scalars['String']>;
  endTime?: Maybe<Scalars['DateTime']>;
  functionName: Scalars['String'];
  limit?: Maybe<Scalars['Int']>;
  startTime?: Maybe<Scalars['DateTime']>;
};

export type QueryMartialArtArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryMartialArtsListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<MartialArtFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<MartialArtGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<MartialArtOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<MartialArtSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryPlanArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryPlanCategoriesListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<PlanCategoryFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<PlanCategoryGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<PlanCategoryOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<PlanCategorySort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryPlanCategoryArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryPlansListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<PlanFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<PlanGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<PlanOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<PlanSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryPreSignupArgs = {
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryPreSignupsListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<PreSignupFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<PreSignupGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<PreSignupOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<PreSignupSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryPrivateClassArgs = {
  id?: Maybe<Scalars['ID']>;
  lookupKey?: Maybe<Scalars['String']>;
  stripeProductId?: Maybe<Scalars['String']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryPrivateClassPurchaseArgs = {
  id?: Maybe<Scalars['ID']>;
  paymentIntent?: Maybe<Scalars['String']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryPrivateClassPurchasesListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<PrivateClassPurchaseFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<PrivateClassPurchaseGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<PrivateClassPurchaseOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<PrivateClassPurchaseSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryPrivateClassesListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<PrivateClassFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<PrivateClassGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<PrivateClassOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<PrivateClassSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryProductArgs = {
  feesLookupKey?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  lookupKey?: Maybe<Scalars['String']>;
  stripeProductId?: Maybe<Scalars['String']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryProductCategoriesListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ProductCategoryFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ProductCategoryGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ProductCategoryOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ProductCategorySort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryProductCategoryArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryProductSubscriptionArgs = {
  id?: Maybe<Scalars['ID']>;
  stripeSubscriptionId?: Maybe<Scalars['String']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryProductSubscriptionsListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ProductSubscriptionFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ProductSubscriptionGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ProductSubscriptionOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ProductSubscriptionSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryProductsListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ProductFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ProductGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ProductOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ProductSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryProfileArgs = {
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryProfilesListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ProfileFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ProfileGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ProfileOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ProfileSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryRankArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryRankIssuedArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryRankIssuedsListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<RankIssuedFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<RankIssuedGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<RankIssuedOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<RankIssuedSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryRanksListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<RankFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<RankGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<RankOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<RankSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryRoleArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryRolesListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<RoleFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<RoleGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<RoleOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<RoleSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryScheduleArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QuerySchedulesListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ScheduleFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ScheduleGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ScheduleOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ScheduleSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QuerySchoolArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QuerySchoolMartialArtArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QuerySchoolMartialArtsListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<SchoolMartialArtFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<SchoolMartialArtGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<SchoolMartialArtOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<SchoolMartialArtSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QuerySchoolProfileArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QuerySchoolProfilesListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<SchoolProfileFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<SchoolProfileGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<SchoolProfileOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<SchoolProfileSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QuerySchoolStripeAccountArgs = {
  account?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QuerySchoolStripeAccountsListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<SchoolStripeAccountFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<SchoolStripeAccountGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<SchoolStripeAccountOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<SchoolStripeAccountSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QuerySchoolTeamArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QuerySchoolTeamsListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<SchoolTeamFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<SchoolTeamGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<SchoolTeamOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<SchoolTeamSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QuerySchoolsListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<SchoolFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<SchoolGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<SchoolOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<SchoolSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryShortLinkArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryShortLinksListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ShortLinkFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ShortLinkGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ShortLinkOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ShortLinkSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryShortUrlArgs = {
  id?: Maybe<Scalars['ID']>;
  index?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryShortUrlsListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ShortUrlFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ShortUrlGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ShortUrlOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ShortUrlSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QuerySignUpArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QuerySignUpsListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<SignUpFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<SignUpGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<SignUpOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<SignUpSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryStripeAccountArgs = {
  account?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryStripeAccountsListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<StripeAccountFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<StripeAccountGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<StripeAccountOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<StripeAccountSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryTableArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
};

export type QueryTableFieldArgs = {
  id: Scalars['ID'];
};

export type QueryTablesListArgs = {
  filter?: Maybe<TableListFilter>;
};

export type QueryTeamArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryTeamMemberArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryTeamMembersListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<TeamMemberFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<TeamMemberGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<TeamMemberOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<TeamMemberSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryTeamProfileArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryTeamProfilesListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<TeamProfileFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<TeamProfileGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<TeamProfileOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<TeamProfileSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryTeamsListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<TeamFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<TeamGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<TeamOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<TeamSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryTextArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryTextsListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<TextFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<TextGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<TextOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<TextSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryUnknowArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryUnknowsListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<UnknowFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<UnknowGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<UnknowOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<UnknowSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryUserArgs = {
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryUserProfileArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryUserProfilesListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<UserProfileFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<UserProfileGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<UserProfileOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<UserProfileSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryUserSchoolArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryUserSchoolsListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<UserSchoolFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<UserSchoolGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<UserSchoolOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<UserSchoolSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryUsersListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<UserFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<UserGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<UserOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<UserSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryVideoArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryVideoLinkArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryVideoLinksListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<VideoLinkFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<VideoLinkGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<VideoLinkOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<VideoLinkSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryVideosListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<VideoFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<VideoGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<VideoOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<VideoSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryWaitingListArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryWaitingListsListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<WaitingListFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<WaitingListGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<WaitingListOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<WaitingListSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryXCustomerArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryXCustomersListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<XCustomerFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<XCustomerGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<XCustomerOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<XCustomerSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryXSchoolCustomerArgs = {
  id?: Maybe<Scalars['ID']>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type QueryXSchoolCustomersListArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<XSchoolCustomerFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<XSchoolCustomerGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<XSchoolCustomerOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<XSchoolCustomerSort>>;
  withDeleted?: Maybe<Scalars['Boolean']>;
};

export type Rank = {
  __typename?: 'Rank';
  _description: Maybe<Scalars['String']>;
  airtableId: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  degree: Maybe<Scalars['String']>;
  deletedAt: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  level: Maybe<Scalars['String']>;
  martialArt: Maybe<MartialArt>;
  order: Maybe<Scalars['Int']>;
  rankImageW64H8: Maybe<File>;
  rankImageW80H8: Maybe<File>;
  rankImageW375H24: Maybe<File>;
  rankIssued: Maybe<RankIssuedListResponse>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

export type RankRankIssuedArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<RankIssuedFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<RankIssuedGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<RankIssuedOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<RankIssuedSort>>;
};

/** Rank create input */
export type RankCreateInput = {
  airtableId?: Maybe<Scalars['String']>;
  degree?: Maybe<Scalars['String']>;
  level?: Maybe<Scalars['String']>;
  martialArt?: Maybe<RankMartialArtRelationInput>;
  order?: Maybe<Scalars['Int']>;
  rankImageW64H8?: Maybe<RankRankImageW64H8RelationInput>;
  rankImageW80H8?: Maybe<RankRankImageW80H8RelationInput>;
  rankImageW375H24?: Maybe<RankRankImageW375H24RelationInput>;
  rankIssued?: Maybe<RankRankIssuedRelationInput>;
};

/** Rank create many input */
export type RankCreateManyInput = {
  airtableId?: Maybe<Scalars['String']>;
  degree?: Maybe<Scalars['String']>;
  level?: Maybe<Scalars['String']>;
  martialArt?: Maybe<RankMartialArtManyRelationInput>;
  order?: Maybe<Scalars['Int']>;
  rankImageW64H8?: Maybe<RankRankImageW64H8ManyRelationInput>;
  rankImageW80H8?: Maybe<RankRankImageW80H8ManyRelationInput>;
  rankImageW375H24?: Maybe<RankRankImageW375H24ManyRelationInput>;
  rankIssued?: Maybe<RankRankIssuedManyRelationInput>;
};

/** Rank delete input */
export type RankDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** RankFieldsPermissions create input */
export type RankFieldsPermissions = {
  airtableId?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['Boolean']>;
  degree?: Maybe<Scalars['Boolean']>;
  level?: Maybe<Scalars['Boolean']>;
  order?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type RankFilter = {
  AND?: Maybe<Array<RankFilter>>;
  OR?: Maybe<Array<RankFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  airtableId?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  degree?: Maybe<StringPredicate>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  level?: Maybe<StringPredicate>;
  martialArt?: Maybe<MartialArtFilter>;
  order?: Maybe<IntPredicate>;
  rankImageW64H8?: Maybe<FileFilter>;
  rankImageW80H8?: Maybe<FileFilter>;
  rankImageW375H24?: Maybe<FileFilter>;
  rankIssued?: Maybe<RankIssuedRelationFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type RankGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: RankGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type RankGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  airtableId?: Maybe<Array<GroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  degree?: Maybe<Array<GroupByField>>;
  id?: Maybe<Array<GroupByField>>;
  level?: Maybe<Array<GroupByField>>;
  martialArt?: Maybe<MartialArtGroupByQuery>;
  order?: Maybe<Array<GroupByField>>;
  rankImageW64H8?: Maybe<FileGroupByQuery>;
  rankImageW80H8?: Maybe<FileGroupByQuery>;
  rankImageW375H24?: Maybe<FileGroupByQuery>;
  rankIssued?: Maybe<RankIssuedGroupByQuery>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

/** Rank create input from rankImageW64H8 */
export type RankImageW64H8_RankCreateInput = {
  airtableId?: Maybe<Scalars['String']>;
  degree?: Maybe<Scalars['String']>;
  level?: Maybe<Scalars['String']>;
  martialArt?: Maybe<RankMartialArtRelationInput>;
  order?: Maybe<Scalars['Int']>;
  rankImageW64H8?: Maybe<RankRankImageW64H8RelationInput>;
  rankImageW80H8?: Maybe<RankRankImageW80H8RelationInput>;
  rankImageW375H24?: Maybe<RankRankImageW375H24RelationInput>;
  rankIssued?: Maybe<RankRankIssuedRelationInput>;
};

/** Rank update input from rankImageW64H8 */
export type RankImageW64H8_RankUpdateInput = {
  data: RankUpdateInput;
  filter?: Maybe<RankKeyFilter>;
};

/** Rank create input from rankImageW80H8 */
export type RankImageW80H8_RankCreateInput = {
  airtableId?: Maybe<Scalars['String']>;
  degree?: Maybe<Scalars['String']>;
  level?: Maybe<Scalars['String']>;
  martialArt?: Maybe<RankMartialArtRelationInput>;
  order?: Maybe<Scalars['Int']>;
  rankImageW64H8?: Maybe<RankRankImageW64H8RelationInput>;
  rankImageW80H8?: Maybe<RankRankImageW80H8RelationInput>;
  rankImageW375H24?: Maybe<RankRankImageW375H24RelationInput>;
  rankIssued?: Maybe<RankRankIssuedRelationInput>;
};

/** Rank update input from rankImageW80H8 */
export type RankImageW80H8_RankUpdateInput = {
  data: RankUpdateInput;
  filter?: Maybe<RankKeyFilter>;
};

/** Rank create input from rankImageW375H24 */
export type RankImageW375H24_RankCreateInput = {
  airtableId?: Maybe<Scalars['String']>;
  degree?: Maybe<Scalars['String']>;
  level?: Maybe<Scalars['String']>;
  martialArt?: Maybe<RankMartialArtRelationInput>;
  order?: Maybe<Scalars['Int']>;
  rankImageW64H8?: Maybe<RankRankImageW64H8RelationInput>;
  rankImageW80H8?: Maybe<RankRankImageW80H8RelationInput>;
  rankImageW375H24?: Maybe<RankRankImageW375H24RelationInput>;
  rankIssued?: Maybe<RankRankIssuedRelationInput>;
};

/** Rank update input from rankImageW375H24 */
export type RankImageW375H24_RankUpdateInput = {
  data: RankUpdateInput;
  filter?: Maybe<RankKeyFilter>;
};

export type RankIssued = {
  __typename?: 'RankIssued';
  _description: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  displayName: Maybe<Profile>;
  graduated: Maybe<Scalars['Date']>;
  id: Maybe<Scalars['ID']>;
  master: Maybe<Profile>;
  masterPhoto: Maybe<File>;
  rank: Maybe<Rank>;
  school: Maybe<School>;
  updatedAt: Maybe<Scalars['DateTime']>;
  verified: Maybe<Scalars['Boolean']>;
};

/** RankIssued create input */
export type RankIssuedCreateInput = {
  displayName?: Maybe<RankIssuedDisplayNameRelationInput>;
  graduated?: Maybe<Scalars['Date']>;
  master?: Maybe<RankIssuedMasterRelationInput>;
  masterPhoto?: Maybe<RankIssuedMasterPhotoRelationInput>;
  rank?: Maybe<RankIssuedRankRelationInput>;
  school?: Maybe<RankIssuedSchoolRelationInput>;
  verified?: Maybe<Scalars['Boolean']>;
};

/** RankIssued create many input */
export type RankIssuedCreateManyInput = {
  displayName?: Maybe<RankIssuedDisplayNameManyRelationInput>;
  graduated?: Maybe<Scalars['Date']>;
  master?: Maybe<RankIssuedMasterManyRelationInput>;
  masterPhoto?: Maybe<RankIssuedMasterPhotoManyRelationInput>;
  rank?: Maybe<RankIssuedRankManyRelationInput>;
  school?: Maybe<RankIssuedSchoolManyRelationInput>;
  verified?: Maybe<Scalars['Boolean']>;
};

/** RankIssued delete input */
export type RankIssuedDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** RankIssued relation input */
export type RankIssuedDisplayNameManyRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
};

/** RankIssued relation input */
export type RankIssuedDisplayNameRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
  create?: Maybe<RankIssuedProfile_ProfileCreateInput>;
};

/** RankIssued relation input */
export type RankIssuedDisplayNameUpdateRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
  create?: Maybe<RankIssuedProfile_ProfileCreateInput>;
  disconnect?: Maybe<ProfileKeyFilter>;
  reconnect?: Maybe<ProfileKeyFilter>;
  update?: Maybe<RankIssuedProfile_ProfileUpdateInput>;
};

/** RankIssuedFieldsPermissions create input */
export type RankIssuedFieldsPermissions = {
  createdAt?: Maybe<Scalars['Boolean']>;
  graduated?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
  verified?: Maybe<Scalars['Boolean']>;
};

export type RankIssuedFilter = {
  AND?: Maybe<Array<RankIssuedFilter>>;
  OR?: Maybe<Array<RankIssuedFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  displayName?: Maybe<ProfileFilter>;
  graduated?: Maybe<DatePredicate>;
  id?: Maybe<IdPredicate>;
  master?: Maybe<ProfileFilter>;
  masterPhoto?: Maybe<FileFilter>;
  rank?: Maybe<RankFilter>;
  school?: Maybe<SchoolFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
  verified?: Maybe<BoolPredicate>;
};

export type RankIssuedGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: RankIssuedGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type RankIssuedGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  displayName?: Maybe<ProfileGroupByQuery>;
  graduated?: Maybe<Array<GroupByField>>;
  id?: Maybe<Array<GroupByField>>;
  master?: Maybe<ProfileGroupByQuery>;
  masterPhoto?: Maybe<FileGroupByQuery>;
  rank?: Maybe<RankGroupByQuery>;
  school?: Maybe<SchoolGroupByQuery>;
  updatedAt?: Maybe<Array<GroupByField>>;
  verified?: Maybe<Array<GroupByField>>;
};

export type RankIssuedKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** RankIssuedListResponse output */
export type RankIssuedListResponse = {
  __typename?: 'RankIssuedListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<RankIssued>;
};

/** RankIssuedManyResponse output */
export type RankIssuedManyResponse = {
  __typename?: 'RankIssuedManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<RankIssued>;
};

/** RankIssued relation input */
export type RankIssuedMasterManyRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
};

/** RankIssued relation input */
export type RankIssuedMasterPhotoManyRelationInput = {
  connect?: Maybe<FileKeyFilter>;
};

/** RankIssued relation input */
export type RankIssuedMasterPhotoRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<RankIssued_MasterPhoto_FileCreateInput>;
};

/** RankIssued relation input */
export type RankIssuedMasterPhotoUpdateRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<RankIssued_MasterPhoto_FileCreateInput>;
  disconnect?: Maybe<FileKeyFilter>;
  reconnect?: Maybe<FileKeyFilter>;
  update?: Maybe<RankIssued_MasterPhoto_FileUpdateInput>;
};

/** RankIssued relation input */
export type RankIssuedMasterRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
  create?: Maybe<MasterProfile_ProfileCreateInput>;
};

/** RankIssued relation input */
export type RankIssuedMasterUpdateRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
  create?: Maybe<MasterProfile_ProfileCreateInput>;
  disconnect?: Maybe<ProfileKeyFilter>;
  reconnect?: Maybe<ProfileKeyFilter>;
  update?: Maybe<MasterProfile_ProfileUpdateInput>;
};

/** No longer supported. Use `sort` instead. */
export enum RankIssuedOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GraduatedAsc = 'graduated_ASC',
  GraduatedDesc = 'graduated_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VerifiedAsc = 'verified_ASC',
  VerifiedDesc = 'verified_DESC',
}

/** RankIssued subscription payload */
export type RankIssuedPayload = {
  __typename?: 'RankIssuedPayload';
  mutation: MutationType;
  node: Maybe<RankIssued>;
  previousValues: Maybe<RankIssued>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** Profile create input from rankIssuedProfile */
export type RankIssuedProfile_ProfileCreateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8RelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24RelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Profile update input from rankIssuedProfile */
export type RankIssuedProfile_ProfileUpdateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsUpdateRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinUpdateRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassUpdateRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationUpdateRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileUpdateRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoUpdateRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolUpdateRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationUpdateRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamUpdateRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileUpdateRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallUpdateRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8UpdateRelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24UpdateRelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileUpdateRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountUpdateRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkUpdateRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationUpdateRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** RankIssued relation input */
export type RankIssuedRankManyRelationInput = {
  connect?: Maybe<RankKeyFilter>;
};

/** RankIssued relation input */
export type RankIssuedRankRelationInput = {
  connect?: Maybe<RankKeyFilter>;
  create?: Maybe<RankIssued_RankCreateInput>;
};

/** RankIssued relation input */
export type RankIssuedRankUpdateRelationInput = {
  connect?: Maybe<RankKeyFilter>;
  create?: Maybe<RankIssued_RankCreateInput>;
  disconnect?: Maybe<RankKeyFilter>;
  reconnect?: Maybe<RankKeyFilter>;
  update?: Maybe<RankIssued_RankUpdateInput>;
};

export type RankIssuedRelationFilter = {
  every?: Maybe<RankIssuedFilter>;
  none?: Maybe<RankIssuedFilter>;
  some?: Maybe<RankIssuedFilter>;
};

/** RankIssued relation input */
export type RankIssuedSchoolManyRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
};

/** RankIssued relation input */
export type RankIssuedSchoolRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<RankIssuedSchool_SchoolCreateInput>;
};

/** RankIssued relation input */
export type RankIssuedSchoolUpdateRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<RankIssuedSchool_SchoolCreateInput>;
  disconnect?: Maybe<SchoolKeyFilter>;
  reconnect?: Maybe<SchoolKeyFilter>;
  update?: Maybe<RankIssuedSchool_SchoolUpdateInput>;
};

/** School create input from rankIssuedSchool */
export type RankIssuedSchool_SchoolCreateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountRelationInput>;
  user?: Maybe<SchoolUserRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

/** School update input from rankIssuedSchool */
export type RankIssuedSchool_SchoolUpdateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationUpdateRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolUpdateRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolUpdateRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolUpdateRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerUpdateRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoUpdateRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsUpdateRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationUpdateRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationUpdateRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationUpdateRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileUpdateRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationUpdateRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamUpdateRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountUpdateRelationInput>;
  user?: Maybe<SchoolUserUpdateRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

export type RankIssuedSort = {
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  displayName?: Maybe<ProfileSort>;
  graduated?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  master?: Maybe<ProfileSort>;
  masterPhoto?: Maybe<FileSort>;
  rank?: Maybe<RankSort>;
  school?: Maybe<SchoolSort>;
  updatedAt?: Maybe<SortOrder>;
  verified?: Maybe<SortOrder>;
};

/** RankIssued subscription filter */
export type RankIssuedSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<RankIssuedFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** RankIssued update input */
export type RankIssuedUpdateByFilterInput = {
  graduated?: Maybe<Array<Maybe<UpdateByFilterDateInput>>>;
  verified?: Maybe<Array<Maybe<UpdateByFilterBooleanSwitchInput>>>;
};

/** RankIssued update input */
export type RankIssuedUpdateInput = {
  displayName?: Maybe<RankIssuedDisplayNameUpdateRelationInput>;
  graduated?: Maybe<Scalars['Date']>;
  id?: Maybe<Scalars['ID']>;
  master?: Maybe<RankIssuedMasterUpdateRelationInput>;
  masterPhoto?: Maybe<RankIssuedMasterPhotoUpdateRelationInput>;
  rank?: Maybe<RankIssuedRankUpdateRelationInput>;
  school?: Maybe<RankIssuedSchoolUpdateRelationInput>;
  verified?: Maybe<Scalars['Boolean']>;
};

export type RankIssued_PermissionFilter = {
  AND?: Maybe<Array<RankIssued_PermissionFilter>>;
  OR?: Maybe<Array<RankIssued_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  displayName?: Maybe<Profile_PermissionFilter>;
  graduated?: Maybe<DatePredicate>;
  id?: Maybe<IdPredicate>;
  master?: Maybe<Profile_PermissionFilter>;
  masterPhoto?: Maybe<File_PermissionFilter>;
  rank?: Maybe<Rank_PermissionFilter>;
  school?: Maybe<School_PermissionFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
  verified?: Maybe<BoolPredicate>;
};

export type RankIssued_PermissionRelationFilter = {
  every?: Maybe<RankIssued_PermissionFilter>;
  none?: Maybe<RankIssued_PermissionFilter>;
  some?: Maybe<RankIssued_PermissionFilter>;
};

/** Rank create input from rankIssued */
export type RankIssued_RankCreateInput = {
  airtableId?: Maybe<Scalars['String']>;
  degree?: Maybe<Scalars['String']>;
  level?: Maybe<Scalars['String']>;
  martialArt?: Maybe<RankMartialArtRelationInput>;
  order?: Maybe<Scalars['Int']>;
  rankImageW64H8?: Maybe<RankRankImageW64H8RelationInput>;
  rankImageW80H8?: Maybe<RankRankImageW80H8RelationInput>;
  rankImageW375H24?: Maybe<RankRankImageW375H24RelationInput>;
  rankIssued?: Maybe<RankRankIssuedRelationInput>;
};

/** Rank update input from rankIssued */
export type RankIssued_RankUpdateInput = {
  airtableId?: Maybe<Scalars['String']>;
  degree?: Maybe<Scalars['String']>;
  level?: Maybe<Scalars['String']>;
  martialArt?: Maybe<RankMartialArtUpdateRelationInput>;
  order?: Maybe<Scalars['Int']>;
  rankImageW64H8?: Maybe<RankRankImageW64H8UpdateRelationInput>;
  rankImageW80H8?: Maybe<RankRankImageW80H8UpdateRelationInput>;
  rankImageW375H24?: Maybe<RankRankImageW375H24UpdateRelationInput>;
  rankIssued?: Maybe<RankRankIssuedUpdateRelationInput>;
};

/** Files create input from rankIssued_masterPhoto */
export type RankIssued_MasterPhoto_FileCreateInput = {
  brand_logo?: Maybe<FilesBrand_LogoRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8RelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24RelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8RelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8RelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24RelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailRelationInput>;
  video_video?: Maybe<FilesVideo_VideoRelationInput>;
};

/** Files update input from rankIssued_masterPhoto */
export type RankIssued_MasterPhoto_FileUpdateInput = {
  brand_logo?: Maybe<FilesBrand_LogoUpdateRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverUpdateRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsUpdateRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsUpdateRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoUpdateRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallUpdateRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8UpdateRelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24UpdateRelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoUpdateRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8UpdateRelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8UpdateRelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24UpdateRelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoUpdateRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarUpdateRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoUpdateRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarUpdateRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewUpdateRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailUpdateRelationInput>;
  video_video?: Maybe<FilesVideo_VideoUpdateRelationInput>;
};

export type RankKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** RankListResponse output */
export type RankListResponse = {
  __typename?: 'RankListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<Rank>;
};

/** RankManyResponse output */
export type RankManyResponse = {
  __typename?: 'RankManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<Rank>;
};

/** Rank relation input */
export type RankMartialArtManyRelationInput = {
  connect?: Maybe<MartialArtKeyFilter>;
};

/** Rank relation input */
export type RankMartialArtRelationInput = {
  connect?: Maybe<MartialArtKeyFilter>;
  create?: Maybe<RankMartialArt_MartialArtCreateInput>;
};

/** Rank relation input */
export type RankMartialArtUpdateRelationInput = {
  connect?: Maybe<MartialArtKeyFilter>;
  create?: Maybe<RankMartialArt_MartialArtCreateInput>;
  disconnect?: Maybe<MartialArtKeyFilter>;
  reconnect?: Maybe<MartialArtKeyFilter>;
  update?: Maybe<RankMartialArt_MartialArtUpdateInput>;
};

/** MartialArt create input from rankMartialArt */
export type RankMartialArt_MartialArtCreateInput = {
  achievementsMartialArt?: Maybe<MartialArtAchievementsMartialArtRelationInput>;
  attachments?: Maybe<MartialArtAttachmentsRelationInput>;
  competitionId?: Maybe<MartialArtCompetitionIdRelationInput>;
  countryOrigin?: Maybe<Scalars['String']>;
  martialArtsAirtableId?: Maybe<Scalars['String']>;
  martialArtsSchool?: Maybe<MartialArtMartialArtsSchoolRelationInput>;
  name: Scalars['String'];
  rankMartialArt?: Maybe<MartialArtRankMartialArtRelationInput>;
  scheduleMartialArt?: Maybe<MartialArtScheduleMartialArtRelationInput>;
  schoolsAirtableId?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
};

/** MartialArt update input from rankMartialArt */
export type RankMartialArt_MartialArtUpdateInput = {
  achievementsMartialArt?: Maybe<MartialArtAchievementsMartialArtUpdateRelationInput>;
  attachments?: Maybe<MartialArtAttachmentsUpdateRelationInput>;
  competitionId?: Maybe<MartialArtCompetitionIdUpdateRelationInput>;
  countryOrigin?: Maybe<Scalars['String']>;
  martialArtsAirtableId?: Maybe<Scalars['String']>;
  martialArtsSchool?: Maybe<MartialArtMartialArtsSchoolUpdateRelationInput>;
  name?: Maybe<Scalars['String']>;
  rankMartialArt?: Maybe<MartialArtRankMartialArtUpdateRelationInput>;
  scheduleMartialArt?: Maybe<MartialArtScheduleMartialArtUpdateRelationInput>;
  schoolsAirtableId?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
};

/** No longer supported. Use `sort` instead. */
export enum RankOrderBy {
  AirtableIdAsc = 'airtableId_ASC',
  AirtableIdDesc = 'airtableId_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DegreeAsc = 'degree_ASC',
  DegreeDesc = 'degree_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LevelAsc = 'level_ASC',
  LevelDesc = 'level_DESC',
  OrderAsc = 'order_ASC',
  OrderDesc = 'order_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** Rank subscription payload */
export type RankPayload = {
  __typename?: 'RankPayload';
  mutation: MutationType;
  node: Maybe<Rank>;
  previousValues: Maybe<Rank>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** Rank relation input */
export type RankRankImageW64H8ManyRelationInput = {
  connect?: Maybe<FileKeyFilter>;
};

/** Rank relation input */
export type RankRankImageW64H8RelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Rank_RankImageW64H8_FileCreateInput>;
};

/** Rank relation input */
export type RankRankImageW64H8UpdateRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Rank_RankImageW64H8_FileCreateInput>;
  disconnect?: Maybe<FileKeyFilter>;
  reconnect?: Maybe<FileKeyFilter>;
  update?: Maybe<Rank_RankImageW64H8_FileUpdateInput>;
};

/** Rank relation input */
export type RankRankImageW80H8ManyRelationInput = {
  connect?: Maybe<FileKeyFilter>;
};

/** Rank relation input */
export type RankRankImageW80H8RelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Rank_RankImageW80H8_FileCreateInput>;
};

/** Rank relation input */
export type RankRankImageW80H8UpdateRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Rank_RankImageW80H8_FileCreateInput>;
  disconnect?: Maybe<FileKeyFilter>;
  reconnect?: Maybe<FileKeyFilter>;
  update?: Maybe<Rank_RankImageW80H8_FileUpdateInput>;
};

/** Rank relation input */
export type RankRankImageW375H24ManyRelationInput = {
  connect?: Maybe<FileKeyFilter>;
};

/** Rank relation input */
export type RankRankImageW375H24RelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Rank_RankImageW375H24_FileCreateInput>;
};

/** Rank relation input */
export type RankRankImageW375H24UpdateRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Rank_RankImageW375H24_FileCreateInput>;
  disconnect?: Maybe<FileKeyFilter>;
  reconnect?: Maybe<FileKeyFilter>;
  update?: Maybe<Rank_RankImageW375H24_FileUpdateInput>;
};

/** Rank relation input */
export type RankRankIssuedManyRelationInput = {
  connect?: Maybe<Array<RankIssuedKeyFilter>>;
};

/** Rank relation input */
export type RankRankIssuedRelationInput = {
  connect?: Maybe<Array<RankIssuedKeyFilter>>;
  create?: Maybe<Array<Maybe<Rank_RankIssuedCreateInput>>>;
};

/** Rank relation input */
export type RankRankIssuedUpdateRelationInput = {
  connect?: Maybe<Array<RankIssuedKeyFilter>>;
  create?: Maybe<Array<Maybe<Rank_RankIssuedCreateInput>>>;
  disconnect?: Maybe<Array<RankIssuedKeyFilter>>;
  reconnect?: Maybe<Array<RankIssuedKeyFilter>>;
  update?: Maybe<Array<Maybe<Rank_RankIssuedUpdateInput>>>;
};

export type RankRelationFilter = {
  every?: Maybe<RankFilter>;
  none?: Maybe<RankFilter>;
  some?: Maybe<RankFilter>;
};

/** Profile create input from rankSmall */
export type RankSmall_ProfileCreateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8RelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24RelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Profile update input from rankSmall */
export type RankSmall_ProfileUpdateInput = {
  data: ProfileUpdateInput;
  filter?: Maybe<ProfileKeyFilter>;
};

export type RankSort = {
  airtableId?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  degree?: Maybe<SortOrder>;
  deletedAt?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  level?: Maybe<SortOrder>;
  martialArt?: Maybe<MartialArtSort>;
  order?: Maybe<SortOrder>;
  rankImageW64H8?: Maybe<FileSort>;
  rankImageW80H8?: Maybe<FileSort>;
  rankImageW375H24?: Maybe<FileSort>;
  updatedAt?: Maybe<SortOrder>;
};

/** Rank subscription filter */
export type RankSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<RankFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** Rank update input */
export type RankUpdateByFilterInput = {
  airtableId?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  degree?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  level?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  order?: Maybe<Array<Maybe<UpdateByFilterIntInput>>>;
};

/** Rank update input */
export type RankUpdateInput = {
  airtableId?: Maybe<Scalars['String']>;
  degree?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  level?: Maybe<Scalars['String']>;
  martialArt?: Maybe<RankMartialArtUpdateRelationInput>;
  order?: Maybe<Scalars['Int']>;
  rankImageW64H8?: Maybe<RankRankImageW64H8UpdateRelationInput>;
  rankImageW80H8?: Maybe<RankRankImageW80H8UpdateRelationInput>;
  rankImageW375H24?: Maybe<RankRankImageW375H24UpdateRelationInput>;
  rankIssued?: Maybe<RankRankIssuedUpdateRelationInput>;
};

export type Rank_PermissionFilter = {
  AND?: Maybe<Array<Rank_PermissionFilter>>;
  OR?: Maybe<Array<Rank_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  airtableId?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  degree?: Maybe<StringPredicate>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  level?: Maybe<StringPredicate>;
  martialArt?: Maybe<MartialArt_PermissionFilter>;
  order?: Maybe<IntPredicate>;
  rankImageW64H8?: Maybe<File_PermissionFilter>;
  rankImageW80H8?: Maybe<File_PermissionFilter>;
  rankImageW375H24?: Maybe<File_PermissionFilter>;
  rankIssued?: Maybe<RankIssued_PermissionRelationFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type Rank_PermissionRelationFilter = {
  every?: Maybe<Rank_PermissionFilter>;
  none?: Maybe<Rank_PermissionFilter>;
  some?: Maybe<Rank_PermissionFilter>;
};

/** RankIssued create input from rank */
export type Rank_RankIssuedCreateInput = {
  displayName?: Maybe<RankIssuedDisplayNameRelationInput>;
  graduated?: Maybe<Scalars['Date']>;
  master?: Maybe<RankIssuedMasterRelationInput>;
  masterPhoto?: Maybe<RankIssuedMasterPhotoRelationInput>;
  rank?: Maybe<RankIssuedRankRelationInput>;
  school?: Maybe<RankIssuedSchoolRelationInput>;
  verified?: Maybe<Scalars['Boolean']>;
};

/** RankIssued update input from rank */
export type Rank_RankIssuedUpdateInput = {
  data: RankIssuedUpdateInput;
  filter?: Maybe<RankIssuedKeyFilter>;
};

/** Files create input from rank_rankImageW64H8 */
export type Rank_RankImageW64H8_FileCreateInput = {
  brand_logo?: Maybe<FilesBrand_LogoRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8RelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24RelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8RelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8RelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24RelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailRelationInput>;
  video_video?: Maybe<FilesVideo_VideoRelationInput>;
};

/** Files update input from rank_rankImageW64H8 */
export type Rank_RankImageW64H8_FileUpdateInput = {
  brand_logo?: Maybe<FilesBrand_LogoUpdateRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverUpdateRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsUpdateRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsUpdateRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoUpdateRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallUpdateRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8UpdateRelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24UpdateRelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoUpdateRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8UpdateRelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8UpdateRelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24UpdateRelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoUpdateRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarUpdateRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoUpdateRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarUpdateRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewUpdateRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailUpdateRelationInput>;
  video_video?: Maybe<FilesVideo_VideoUpdateRelationInput>;
};

/** Files create input from rank_rankImageW80H8 */
export type Rank_RankImageW80H8_FileCreateInput = {
  brand_logo?: Maybe<FilesBrand_LogoRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8RelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24RelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8RelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8RelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24RelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailRelationInput>;
  video_video?: Maybe<FilesVideo_VideoRelationInput>;
};

/** Files update input from rank_rankImageW80H8 */
export type Rank_RankImageW80H8_FileUpdateInput = {
  brand_logo?: Maybe<FilesBrand_LogoUpdateRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverUpdateRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsUpdateRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsUpdateRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoUpdateRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallUpdateRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8UpdateRelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24UpdateRelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoUpdateRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8UpdateRelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8UpdateRelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24UpdateRelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoUpdateRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarUpdateRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoUpdateRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarUpdateRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewUpdateRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailUpdateRelationInput>;
  video_video?: Maybe<FilesVideo_VideoUpdateRelationInput>;
};

/** Files create input from rank_rankImageW375H24 */
export type Rank_RankImageW375H24_FileCreateInput = {
  brand_logo?: Maybe<FilesBrand_LogoRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8RelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24RelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8RelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8RelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24RelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailRelationInput>;
  video_video?: Maybe<FilesVideo_VideoRelationInput>;
};

/** Files update input from rank_rankImageW375H24 */
export type Rank_RankImageW375H24_FileUpdateInput = {
  brand_logo?: Maybe<FilesBrand_LogoUpdateRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverUpdateRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsUpdateRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsUpdateRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoUpdateRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallUpdateRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8UpdateRelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24UpdateRelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoUpdateRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8UpdateRelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8UpdateRelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24UpdateRelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoUpdateRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarUpdateRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoUpdateRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarUpdateRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewUpdateRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailUpdateRelationInput>;
  video_video?: Maybe<FilesVideo_VideoUpdateRelationInput>;
};

/** Profile create input from rankw80h8 */
export type Rankw80h8_ProfileCreateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8RelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24RelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Profile update input from rankw80h8 */
export type Rankw80h8_ProfileUpdateInput = {
  data: ProfileUpdateInput;
  filter?: Maybe<ProfileKeyFilter>;
};

/** Profile create input from rankw375h24 */
export type Rankw375h24_ProfileCreateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8RelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24RelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Profile update input from rankw375h24 */
export type Rankw375h24_ProfileUpdateInput = {
  data: ProfileUpdateInput;
  filter?: Maybe<ProfileKeyFilter>;
};

/** RefreshTokenInput */
export type RefreshTokenInput = {
  authProfileId?: Maybe<Scalars['ID']>;
  email?: Maybe<Scalars['String']>;
  refreshToken: Scalars['String'];
};

/** Relation */
export type Relation = {
  __typename?: 'Relation';
  refField: Maybe<TableField>;
  refFieldDisplayName: Maybe<Scalars['String']>;
  refFieldIsList: Maybe<Scalars['Boolean']>;
  refFieldIsRequired: Maybe<Scalars['Boolean']>;
  refFieldName: Maybe<Scalars['String']>;
  refTable: Table;
  relationFieldName: Maybe<Scalars['String']>;
  relationTableName: Maybe<Scalars['String']>;
};

/** Relation Create Input */
export type RelationCreateInput = {
  refFieldDisplayName?: Maybe<Scalars['String']>;
  refFieldIsList: Scalars['Boolean'];
  refFieldIsRequired: Scalars['Boolean'];
  refFieldName?: Maybe<Scalars['String']>;
  refTableId: Scalars['ID'];
};

/** Relation Update Input */
export type RelationUpdateInput = {
  refFieldDisplayName?: Maybe<Scalars['String']>;
  refFieldIsList?: Maybe<Scalars['Boolean']>;
  refFieldIsRequired?: Maybe<Scalars['Boolean']>;
  refFieldName?: Maybe<Scalars['String']>;
  refTableId?: Maybe<Scalars['ID']>;
};

/** Relative Date Predicate Operation Enum */
export enum RelativePredicateOpEnum {
  Add = 'ADD',
  Sub = 'SUB',
}

/** Relative Date Predicate Unit Enum */
export enum RelativePredicateUnitEnum {
  Day = 'DAY',
  DayHour = 'DAY_HOUR',
  DayMicrosecond = 'DAY_MICROSECOND',
  DayMinute = 'DAY_MINUTE',
  DaySecond = 'DAY_SECOND',
  Hour = 'HOUR',
  HourMicrosecond = 'HOUR_MICROSECOND',
  HourMinute = 'HOUR_MINUTE',
  HourSecond = 'HOUR_SECOND',
  Microsecond = 'MICROSECOND',
  Minute = 'MINUTE',
  MinuteMicrosecond = 'MINUTE_MICROSECOND',
  MinuteSecond = 'MINUTE_SECOND',
  Month = 'MONTH',
  Quarter = 'QUARTER',
  Second = 'SECOND',
  SecondMicrosecond = 'SECOND_MICROSECOND',
  Week = 'WEEK',
  Year = 'YEAR',
  YearMonth = 'YEAR_MONTH',
}

export type ReplaceFunctionArguments = {
  from: Scalars['String'];
  to: Scalars['String'];
};

export type Role = {
  __typename?: 'Role';
  _description: Maybe<Scalars['String']>;
  apiTokens: Maybe<ApiTokenListResponse>;
  authenticationProfiles: Maybe<AuthenticationProfileListResponse>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  description: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  membersCount: Scalars['Int'];
  name: Maybe<Scalars['String']>;
  permissions: Maybe<PermissionListResponse>;
  teamMembers: Maybe<TeamMemberListResponse>;
  updatedAt: Maybe<Scalars['DateTime']>;
  users: Maybe<UserListResponse>;
};

export type RoleApiTokensArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ApiTokenFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ApiTokenGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ApiTokenOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ApiTokenSort>>;
};

export type RoleAuthenticationProfilesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<AuthenticationProfileFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<AuthenticationProfileGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<AuthenticationProfileOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<AuthenticationProfileSort>>;
};

export type RolePermissionsArgs = {
  filter?: Maybe<PermissionInputFilter>;
};

export type RoleTeamMembersArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<TeamMemberFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<TeamMemberGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<TeamMemberOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<TeamMemberSort>>;
};

export type RoleUsersArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<UserFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<UserGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<UserOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<UserSort>>;
};

/** Roles create input */
export type RoleCreateInput = {
  apiTokens?: Maybe<RolesApiTokensRelationInput>;
  authenticationProfiles?: Maybe<RolesAuthenticationProfilesRelationInput>;
  description?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  permissions?: Maybe<PermissionsInput>;
  teamMembers?: Maybe<RolesTeamMembersRelationInput>;
  users?: Maybe<RolesUsersRelationInput>;
};

/** Roles create many input */
export type RoleCreateManyInput = {
  apiTokens?: Maybe<RolesApiTokensManyRelationInput>;
  authenticationProfiles?: Maybe<RolesAuthenticationProfilesManyRelationInput>;
  description?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  teamMembers?: Maybe<RolesTeamMembersManyRelationInput>;
  users?: Maybe<RolesUsersManyRelationInput>;
};

/** Roles delete input */
export type RoleDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** RoleFieldsPermissions create input */
export type RoleFieldsPermissions = {
  createdAt?: Maybe<Scalars['Boolean']>;
  description?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type RoleFilter = {
  AND?: Maybe<Array<RoleFilter>>;
  OR?: Maybe<Array<RoleFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  apiTokens?: Maybe<ApiTokenRelationFilter>;
  authenticationProfiles?: Maybe<AuthenticationProfileRelationFilter>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  description?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  name?: Maybe<StringPredicate>;
  permissions?: Maybe<PermissionRelationFilter>;
  teamMembers?: Maybe<TeamMemberRelationFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
  users?: Maybe<UserRelationFilter>;
};

export type RoleGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: RoleGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type RoleGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  apiTokens?: Maybe<ApiTokenGroupByQuery>;
  authenticationProfiles?: Maybe<AuthenticationProfileGroupByQuery>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  description?: Maybe<Array<GroupByField>>;
  id?: Maybe<Array<GroupByField>>;
  name?: Maybe<Array<GroupByField>>;
  permissions?: Maybe<PermissionGroupByQuery>;
  teamMembers?: Maybe<TeamMemberGroupByQuery>;
  updatedAt?: Maybe<Array<GroupByField>>;
  users?: Maybe<UserGroupByQuery>;
};

export type RoleKeyFilter = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
};

/** RoleListResponse output */
export type RoleListResponse = {
  __typename?: 'RoleListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<Role>;
};

/** RoleManyResponse output */
export type RoleManyResponse = {
  __typename?: 'RoleManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<Role>;
};

/** No longer supported. Use `sort` instead. */
export enum RoleOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  SystemTypeAsc = 'systemType_ASC',
  SystemTypeDesc = 'systemType_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** Roles subscription payload */
export type RolePayload = {
  __typename?: 'RolePayload';
  mutation: MutationType;
  node: Maybe<Role>;
  previousValues: Maybe<Role>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type RoleRelationFilter = {
  every?: Maybe<RoleFilter>;
  none?: Maybe<RoleFilter>;
  some?: Maybe<RoleFilter>;
};

export type RoleSort = {
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  description?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
};

/** Roles subscription filter */
export type RoleSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<RoleFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** Roles update input */
export type RoleUpdateByFilterInput = {
  description?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  name?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  systemType?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** Roles update input */
export type RoleUpdateInput = {
  apiTokens?: Maybe<RolesApiTokensUpdateRelationInput>;
  authenticationProfiles?: Maybe<RolesAuthenticationProfilesUpdateRelationInput>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  permissions?: Maybe<PermissionsInput>;
  teamMembers?: Maybe<RolesTeamMembersUpdateRelationInput>;
  users?: Maybe<RolesUsersUpdateRelationInput>;
};

export type Role_PermissionFilter = {
  AND?: Maybe<Array<Role_PermissionFilter>>;
  OR?: Maybe<Array<Role_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  apiTokens?: Maybe<ApiToken_PermissionRelationFilter>;
  authenticationProfiles?: Maybe<AuthenticationProfile_PermissionRelationFilter>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  description?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  name?: Maybe<StringPredicate>;
  permissions?: Maybe<Permission_PermissionRelationFilter>;
  teamMembers?: Maybe<TeamMember_PermissionRelationFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
  users?: Maybe<User_PermissionRelationFilter>;
};

export type Role_PermissionRelationFilter = {
  every?: Maybe<Role_PermissionFilter>;
  none?: Maybe<Role_PermissionFilter>;
  some?: Maybe<Role_PermissionFilter>;
};

/** Roles relation input */
export type RolesApiTokensManyRelationInput = {
  connect?: Maybe<Array<ApiTokenKeyFilter>>;
};

/** Roles relation input */
export type RolesApiTokensRelationInput = {
  connect?: Maybe<Array<ApiTokenKeyFilter>>;
};

/** Roles relation input */
export type RolesApiTokensUpdateRelationInput = {
  connect?: Maybe<Array<ApiTokenKeyFilter>>;
  disconnect?: Maybe<Array<ApiTokenKeyFilter>>;
  reconnect?: Maybe<Array<ApiTokenKeyFilter>>;
  update?: Maybe<Array<Maybe<Roles_ApiTokenUpdateInput>>>;
};

/** Roles relation input */
export type RolesAuthenticationProfilesManyRelationInput = {
  connect?: Maybe<Array<AuthenticationProfileKeyFilter>>;
};

/** Roles relation input */
export type RolesAuthenticationProfilesRelationInput = {
  connect?: Maybe<Array<AuthenticationProfileKeyFilter>>;
  create?: Maybe<Array<Maybe<Roles_AuthenticationProfileCreateInput>>>;
};

/** Roles relation input */
export type RolesAuthenticationProfilesUpdateRelationInput = {
  connect?: Maybe<Array<AuthenticationProfileKeyFilter>>;
  create?: Maybe<Array<Maybe<Roles_AuthenticationProfileCreateInput>>>;
  disconnect?: Maybe<Array<AuthenticationProfileKeyFilter>>;
  reconnect?: Maybe<Array<AuthenticationProfileKeyFilter>>;
  update?: Maybe<Array<Maybe<Roles_AuthenticationProfileUpdateInput>>>;
};

/** Roles relation input */
export type RolesTeamMembersManyRelationInput = {
  connect?: Maybe<Array<TeamMemberKeyFilter>>;
};

/** Roles relation input */
export type RolesTeamMembersRelationInput = {
  connect?: Maybe<Array<TeamMemberKeyFilter>>;
};

/** Roles relation input */
export type RolesTeamMembersUpdateRelationInput = {
  connect?: Maybe<Array<TeamMemberKeyFilter>>;
  disconnect?: Maybe<Array<TeamMemberKeyFilter>>;
  reconnect?: Maybe<Array<TeamMemberKeyFilter>>;
  update?: Maybe<Array<Maybe<Roles_TeamMemberUpdateInput>>>;
};

/** Roles relation input */
export type RolesUsersManyRelationInput = {
  connect?: Maybe<Array<UserKeyFilter>>;
};

/** Roles relation input */
export type RolesUsersRelationInput = {
  connect?: Maybe<Array<UserKeyFilter>>;
  create?: Maybe<Array<Maybe<Roles_UserCreateInput>>>;
};

/** Roles relation input */
export type RolesUsersUpdateRelationInput = {
  connect?: Maybe<Array<UserKeyFilter>>;
  create?: Maybe<Array<Maybe<Roles_UserCreateInput>>>;
  disconnect?: Maybe<Array<UserKeyFilter>>;
  reconnect?: Maybe<Array<UserKeyFilter>>;
  update?: Maybe<Array<Maybe<Roles_UserUpdateInput>>>;
};

/** ApiTokens update input from roles */
export type Roles_ApiTokenUpdateInput = {
  data: ApiTokenUpdateInput;
  filter?: Maybe<ApiTokenKeyFilter>;
};

/** AuthenticationProfiles create input from roles */
export type Roles_AuthenticationProfileCreateInput = {
  audiences?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientId?: Maybe<Scalars['String']>;
  databaseName?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  managementDomain?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  roles?: Maybe<AuthenticationProfilesRolesRelationInput>;
  secret?: Maybe<Scalars['String']>;
  selfSignUpEmailDomains?: Maybe<Array<Maybe<Scalars['String']>>>;
  selfSignUpEnabled?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
};

/** AuthenticationProfiles update input from roles */
export type Roles_AuthenticationProfileUpdateInput = {
  data: AuthenticationProfileUpdateInput;
  filter?: Maybe<AuthenticationProfileKeyFilter>;
};

/** TeamMembers update input from roles */
export type Roles_TeamMemberUpdateInput = {
  data: TeamMemberUpdateInput;
  filter?: Maybe<TeamMemberKeyFilter>;
};

/** Users create input from roles */
export type Roles_UserCreateInput = {
  avatar?: Maybe<UsersAvatarRelationInput>;
  email: Scalars['String'];
  firstName?: Maybe<Scalars['String']>;
  idUser?: Maybe<UsersIdUserRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  roles?: Maybe<UsersRolesRelationInput>;
  schools?: Maybe<UsersSchoolsRelationInput>;
  status?: Maybe<Scalars['String']>;
  timezone?: Maybe<Scalars['String']>;
};

/** Users update input from roles */
export type Roles_UserUpdateInput = {
  data: UserUpdateInput;
  filter?: Maybe<UserKeyFilter>;
};

export type Schedule = {
  __typename?: 'Schedule';
  _description: Maybe<Scalars['String']>;
  airtableId: Maybe<Scalars['String']>;
  checkin: Maybe<CheckinListResponse>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  endTime: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  idMartialArt: Maybe<MartialArt>;
  idProfile: Maybe<Profile>;
  idSchool: Maybe<School>;
  name: Maybe<Scalars['String']>;
  room: Maybe<Scalars['String']>;
  startTime: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
  weekday: Maybe<Scalars['String']>;
};

export type ScheduleCheckinArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<CheckinFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<CheckinGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<CheckinOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<CheckinSort>>;
};

/** Schedule relation input */
export type ScheduleCheckinManyRelationInput = {
  connect?: Maybe<Array<CheckinKeyFilter>>;
};

/** Schedule relation input */
export type ScheduleCheckinRelationInput = {
  connect?: Maybe<Array<CheckinKeyFilter>>;
  create?: Maybe<Array<Maybe<Schedule_CheckinCreateInput>>>;
};

/** Schedule relation input */
export type ScheduleCheckinUpdateRelationInput = {
  connect?: Maybe<Array<CheckinKeyFilter>>;
  create?: Maybe<Array<Maybe<Schedule_CheckinCreateInput>>>;
  disconnect?: Maybe<Array<CheckinKeyFilter>>;
  reconnect?: Maybe<Array<CheckinKeyFilter>>;
  update?: Maybe<Array<Maybe<Schedule_CheckinUpdateInput>>>;
};

/** Schedule create input */
export type ScheduleCreateInput = {
  airtableId?: Maybe<Scalars['String']>;
  checkin?: Maybe<ScheduleCheckinRelationInput>;
  endTime?: Maybe<Scalars['String']>;
  idMartialArt?: Maybe<ScheduleIdMartialArtRelationInput>;
  idProfile?: Maybe<ScheduleIdProfileRelationInput>;
  idSchool?: Maybe<ScheduleIdSchoolRelationInput>;
  name?: Maybe<Scalars['String']>;
  room?: Maybe<Scalars['String']>;
  startTime?: Maybe<Scalars['String']>;
  weekday?: Maybe<Scalars['String']>;
};

/** Schedule create many input */
export type ScheduleCreateManyInput = {
  airtableId?: Maybe<Scalars['String']>;
  checkin?: Maybe<ScheduleCheckinManyRelationInput>;
  endTime?: Maybe<Scalars['String']>;
  idMartialArt?: Maybe<ScheduleIdMartialArtManyRelationInput>;
  idProfile?: Maybe<ScheduleIdProfileManyRelationInput>;
  idSchool?: Maybe<ScheduleIdSchoolManyRelationInput>;
  name?: Maybe<Scalars['String']>;
  room?: Maybe<Scalars['String']>;
  startTime?: Maybe<Scalars['String']>;
  weekday?: Maybe<Scalars['String']>;
};

/** Schedule delete input */
export type ScheduleDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** ScheduleFieldsPermissions create input */
export type ScheduleFieldsPermissions = {
  airtableId?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['Boolean']>;
  endTime?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['Boolean']>;
  room?: Maybe<Scalars['Boolean']>;
  startTime?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
  weekday?: Maybe<Scalars['Boolean']>;
};

export type ScheduleFilter = {
  AND?: Maybe<Array<ScheduleFilter>>;
  OR?: Maybe<Array<ScheduleFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  airtableId?: Maybe<StringPredicate>;
  checkin?: Maybe<CheckinRelationFilter>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  endTime?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  idMartialArt?: Maybe<MartialArtFilter>;
  idProfile?: Maybe<ProfileFilter>;
  idSchool?: Maybe<SchoolFilter>;
  name?: Maybe<StringPredicate>;
  room?: Maybe<StringPredicate>;
  startTime?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
  weekday?: Maybe<StringPredicate>;
};

export type ScheduleGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: ScheduleGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type ScheduleGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  airtableId?: Maybe<Array<GroupByField>>;
  checkin?: Maybe<CheckinGroupByQuery>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  endTime?: Maybe<Array<GroupByField>>;
  id?: Maybe<Array<GroupByField>>;
  idMartialArt?: Maybe<MartialArtGroupByQuery>;
  idProfile?: Maybe<ProfileGroupByQuery>;
  idSchool?: Maybe<SchoolGroupByQuery>;
  name?: Maybe<Array<GroupByField>>;
  room?: Maybe<Array<GroupByField>>;
  startTime?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
  weekday?: Maybe<Array<GroupByField>>;
};

/** Schedule relation input */
export type ScheduleIdMartialArtManyRelationInput = {
  connect?: Maybe<MartialArtKeyFilter>;
};

/** Schedule relation input */
export type ScheduleIdMartialArtRelationInput = {
  connect?: Maybe<MartialArtKeyFilter>;
  create?: Maybe<ScheduleMartialArt_MartialArtCreateInput>;
};

/** Schedule relation input */
export type ScheduleIdMartialArtUpdateRelationInput = {
  connect?: Maybe<MartialArtKeyFilter>;
  create?: Maybe<ScheduleMartialArt_MartialArtCreateInput>;
  disconnect?: Maybe<MartialArtKeyFilter>;
  reconnect?: Maybe<MartialArtKeyFilter>;
  update?: Maybe<ScheduleMartialArt_MartialArtUpdateInput>;
};

/** Schedule relation input */
export type ScheduleIdProfileManyRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
};

/** Schedule relation input */
export type ScheduleIdProfileRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
  create?: Maybe<ScheduleProfile_ProfileCreateInput>;
};

/** Schedule relation input */
export type ScheduleIdProfileUpdateRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
  create?: Maybe<ScheduleProfile_ProfileCreateInput>;
  disconnect?: Maybe<ProfileKeyFilter>;
  reconnect?: Maybe<ProfileKeyFilter>;
  update?: Maybe<ScheduleProfile_ProfileUpdateInput>;
};

/** Schedule relation input */
export type ScheduleIdSchoolManyRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
};

/** Schedule relation input */
export type ScheduleIdSchoolRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<ScheduleSchool_SchoolCreateInput>;
};

/** Schedule relation input */
export type ScheduleIdSchoolUpdateRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<ScheduleSchool_SchoolCreateInput>;
  disconnect?: Maybe<SchoolKeyFilter>;
  reconnect?: Maybe<SchoolKeyFilter>;
  update?: Maybe<ScheduleSchool_SchoolUpdateInput>;
};

export type ScheduleKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** ScheduleListResponse output */
export type ScheduleListResponse = {
  __typename?: 'ScheduleListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<Schedule>;
};

/** ScheduleManyResponse output */
export type ScheduleManyResponse = {
  __typename?: 'ScheduleManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<Schedule>;
};

/** MartialArt create input from scheduleMartialArt */
export type ScheduleMartialArt_MartialArtCreateInput = {
  achievementsMartialArt?: Maybe<MartialArtAchievementsMartialArtRelationInput>;
  attachments?: Maybe<MartialArtAttachmentsRelationInput>;
  competitionId?: Maybe<MartialArtCompetitionIdRelationInput>;
  countryOrigin?: Maybe<Scalars['String']>;
  martialArtsAirtableId?: Maybe<Scalars['String']>;
  martialArtsSchool?: Maybe<MartialArtMartialArtsSchoolRelationInput>;
  name: Scalars['String'];
  rankMartialArt?: Maybe<MartialArtRankMartialArtRelationInput>;
  scheduleMartialArt?: Maybe<MartialArtScheduleMartialArtRelationInput>;
  schoolsAirtableId?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
};

/** MartialArt update input from scheduleMartialArt */
export type ScheduleMartialArt_MartialArtUpdateInput = {
  achievementsMartialArt?: Maybe<MartialArtAchievementsMartialArtUpdateRelationInput>;
  attachments?: Maybe<MartialArtAttachmentsUpdateRelationInput>;
  competitionId?: Maybe<MartialArtCompetitionIdUpdateRelationInput>;
  countryOrigin?: Maybe<Scalars['String']>;
  martialArtsAirtableId?: Maybe<Scalars['String']>;
  martialArtsSchool?: Maybe<MartialArtMartialArtsSchoolUpdateRelationInput>;
  name?: Maybe<Scalars['String']>;
  rankMartialArt?: Maybe<MartialArtRankMartialArtUpdateRelationInput>;
  scheduleMartialArt?: Maybe<MartialArtScheduleMartialArtUpdateRelationInput>;
  schoolsAirtableId?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
};

/** No longer supported. Use `sort` instead. */
export enum ScheduleOrderBy {
  AirtableIdAsc = 'airtableId_ASC',
  AirtableIdDesc = 'airtableId_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  EndTimeAsc = 'endTime_ASC',
  EndTimeDesc = 'endTime_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  RoomAsc = 'room_ASC',
  RoomDesc = 'room_DESC',
  StartTimeAsc = 'startTime_ASC',
  StartTimeDesc = 'startTime_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WeekdayAsc = 'weekday_ASC',
  WeekdayDesc = 'weekday_DESC',
}

/** Schedule subscription payload */
export type SchedulePayload = {
  __typename?: 'SchedulePayload';
  mutation: MutationType;
  node: Maybe<Schedule>;
  previousValues: Maybe<Schedule>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** Profile create input from scheduleProfile */
export type ScheduleProfile_ProfileCreateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8RelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24RelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Profile update input from scheduleProfile */
export type ScheduleProfile_ProfileUpdateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsUpdateRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinUpdateRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassUpdateRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationUpdateRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileUpdateRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoUpdateRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolUpdateRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationUpdateRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamUpdateRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileUpdateRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallUpdateRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8UpdateRelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24UpdateRelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileUpdateRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountUpdateRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkUpdateRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationUpdateRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

export type ScheduleRelationFilter = {
  every?: Maybe<ScheduleFilter>;
  none?: Maybe<ScheduleFilter>;
  some?: Maybe<ScheduleFilter>;
};

/** School create input from scheduleSchool */
export type ScheduleSchool_SchoolCreateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountRelationInput>;
  user?: Maybe<SchoolUserRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

/** School update input from scheduleSchool */
export type ScheduleSchool_SchoolUpdateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationUpdateRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolUpdateRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolUpdateRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolUpdateRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerUpdateRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoUpdateRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsUpdateRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationUpdateRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationUpdateRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationUpdateRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileUpdateRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationUpdateRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamUpdateRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountUpdateRelationInput>;
  user?: Maybe<SchoolUserUpdateRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

export type ScheduleSort = {
  airtableId?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  endTime?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  idMartialArt?: Maybe<MartialArtSort>;
  idProfile?: Maybe<ProfileSort>;
  idSchool?: Maybe<SchoolSort>;
  name?: Maybe<SortOrder>;
  room?: Maybe<SortOrder>;
  startTime?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  weekday?: Maybe<SortOrder>;
};

/** Schedule subscription filter */
export type ScheduleSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<ScheduleFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** Schedule update input */
export type ScheduleUpdateByFilterInput = {
  airtableId?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  endTime?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  name?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  room?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  startTime?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  weekday?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** Schedule update input */
export type ScheduleUpdateInput = {
  airtableId?: Maybe<Scalars['String']>;
  checkin?: Maybe<ScheduleCheckinUpdateRelationInput>;
  endTime?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  idMartialArt?: Maybe<ScheduleIdMartialArtUpdateRelationInput>;
  idProfile?: Maybe<ScheduleIdProfileUpdateRelationInput>;
  idSchool?: Maybe<ScheduleIdSchoolUpdateRelationInput>;
  name?: Maybe<Scalars['String']>;
  room?: Maybe<Scalars['String']>;
  startTime?: Maybe<Scalars['String']>;
  weekday?: Maybe<Scalars['String']>;
};

/** Checkin create input from schedule */
export type Schedule_CheckinCreateInput = {
  date?: Maybe<Scalars['Date']>;
  profile?: Maybe<CheckinProfileRelationInput>;
  schedule?: Maybe<CheckinScheduleRelationInput>;
};

/** Checkin update input from schedule */
export type Schedule_CheckinUpdateInput = {
  data: CheckinUpdateInput;
  filter?: Maybe<CheckinKeyFilter>;
};

export type Schedule_PermissionFilter = {
  AND?: Maybe<Array<Schedule_PermissionFilter>>;
  OR?: Maybe<Array<Schedule_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  airtableId?: Maybe<StringPredicate>;
  checkin?: Maybe<Checkin_PermissionRelationFilter>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  endTime?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  idMartialArt?: Maybe<MartialArt_PermissionFilter>;
  idProfile?: Maybe<Profile_PermissionFilter>;
  idSchool?: Maybe<School_PermissionFilter>;
  name?: Maybe<StringPredicate>;
  room?: Maybe<StringPredicate>;
  startTime?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
  weekday?: Maybe<StringPredicate>;
};

export type Schedule_PermissionRelationFilter = {
  every?: Maybe<Schedule_PermissionFilter>;
  none?: Maybe<Schedule_PermissionFilter>;
  some?: Maybe<Schedule_PermissionFilter>;
};

/** Schema Origin */
export type SchemaOrigin = {
  __typename?: 'SchemaOrigin';
  provider: Maybe<Scalars['String']>;
  type: SchemaOriginType;
};

/** Schema Origin Type Enum */
export enum SchemaOriginType {
  Local = 'LOCAL',
  Remote = 'REMOTE',
  View = 'VIEW',
}

export type School = {
  __typename?: 'School';
  _description: Maybe<Scalars['String']>;
  address1: Maybe<Scalars['String']>;
  address2: Maybe<Scalars['String']>;
  airtableId: Maybe<Scalars['String']>;
  city: Maybe<Scalars['String']>;
  country: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  customersSchoolRelation: Maybe<XCustomerListResponse>;
  deletedAt: Maybe<Scalars['Int']>;
  email: Maybe<Scalars['String']>;
  facebook: Maybe<Scalars['String']>;
  founded: Maybe<Scalars['Int']>;
  founders: Maybe<Scalars['String']>;
  fullAddress: Maybe<Scalars['String']>;
  geo: Maybe<Scalars['String']>;
  groupalClass: Maybe<GroupalClassListResponse>;
  id: Maybe<Scalars['ID']>;
  instagram: Maybe<Scalars['String']>;
  lastModifiedTime: Maybe<Scalars['String']>;
  latitud: Maybe<Scalars['String']>;
  location: Maybe<Scalars['String']>;
  longitud: Maybe<Scalars['String']>;
  neighborhood: Maybe<Scalars['String']>;
  phone: Maybe<Scalars['String']>;
  phoneType: Maybe<Scalars['String']>;
  planSchool: Maybe<PlanListResponse>;
  rankIssuedSchool: Maybe<RankIssuedListResponse>;
  scheduleSchool: Maybe<ScheduleListResponse>;
  schoolCustomer: Maybe<XSchoolCustomerListResponse>;
  schoolLogo: Maybe<File>;
  schoolMartialArts: Maybe<SchoolMartialArtListResponse>;
  schoolName: Maybe<Scalars['String']>;
  schoolPhoneType: Maybe<Scalars['String']>;
  schoolPreSignupRelation: Maybe<PreSignupListResponse>;
  schoolPrivateClassesRelation: Maybe<PrivateClassListResponse>;
  schoolProductRelation: Maybe<ProductListResponse>;
  schoolProfile: Maybe<SchoolProfileListResponse>;
  schoolShortUrlRelation: Maybe<ShortUrlListResponse>;
  schoolTeam: Maybe<SchoolTeamListResponse>;
  slug: Maybe<Scalars['String']>;
  state: Maybe<Scalars['String']>;
  stripeAccount: Maybe<SchoolStripeAccount>;
  updatedAt: Maybe<Scalars['DateTime']>;
  user: Maybe<UserSchoolListResponse>;
  verified: Maybe<Scalars['String']>;
  website: Maybe<Scalars['String']>;
  youtube: Maybe<Scalars['String']>;
  zip: Maybe<Scalars['String']>;
};

export type SchoolCustomersSchoolRelationArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<XCustomerFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<XCustomerGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<XCustomerOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<XCustomerSort>>;
};

export type SchoolGroupalClassArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<GroupalClassFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<GroupalClassGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<GroupalClassOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupalClassSort>>;
};

export type SchoolPlanSchoolArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<PlanFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<PlanGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<PlanOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<PlanSort>>;
};

export type SchoolRankIssuedSchoolArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<RankIssuedFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<RankIssuedGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<RankIssuedOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<RankIssuedSort>>;
};

export type SchoolScheduleSchoolArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ScheduleFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ScheduleGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ScheduleOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ScheduleSort>>;
};

export type SchoolSchoolCustomerArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<XSchoolCustomerFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<XSchoolCustomerGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<XSchoolCustomerOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<XSchoolCustomerSort>>;
};

export type SchoolSchoolMartialArtsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<SchoolMartialArtFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<SchoolMartialArtGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<SchoolMartialArtOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<SchoolMartialArtSort>>;
};

export type SchoolSchoolPreSignupRelationArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<PreSignupFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<PreSignupGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<PreSignupOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<PreSignupSort>>;
};

export type SchoolSchoolPrivateClassesRelationArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<PrivateClassFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<PrivateClassGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<PrivateClassOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<PrivateClassSort>>;
};

export type SchoolSchoolProductRelationArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ProductFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ProductGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ProductOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ProductSort>>;
};

export type SchoolSchoolProfileArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<SchoolProfileFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<SchoolProfileGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<SchoolProfileOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<SchoolProfileSort>>;
};

export type SchoolSchoolShortUrlRelationArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<ShortUrlFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<ShortUrlGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<ShortUrlOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<ShortUrlSort>>;
};

export type SchoolSchoolTeamArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<SchoolTeamFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<SchoolTeamGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<SchoolTeamOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<SchoolTeamSort>>;
};

export type SchoolUserArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<UserSchoolFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<UserSchoolGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<UserSchoolOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<UserSchoolSort>>;
};

/** School create input */
export type SchoolCreateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountRelationInput>;
  user?: Maybe<SchoolUserRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

/** School create many input */
export type SchoolCreateManyInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationManyRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassManyRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolManyRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolManyRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolManyRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerManyRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoManyRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsManyRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationManyRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationManyRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationManyRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileManyRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationManyRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamManyRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountManyRelationInput>;
  user?: Maybe<SchoolUserManyRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

/** School create input from schoolCustomer */
export type SchoolCustomer_SchoolCreateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountRelationInput>;
  user?: Maybe<SchoolUserRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

/** School update input from schoolCustomer */
export type SchoolCustomer_SchoolUpdateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationUpdateRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolUpdateRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolUpdateRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolUpdateRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerUpdateRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoUpdateRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsUpdateRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationUpdateRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationUpdateRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationUpdateRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileUpdateRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationUpdateRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamUpdateRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountUpdateRelationInput>;
  user?: Maybe<SchoolUserUpdateRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

/** School relation input */
export type SchoolCustomersSchoolRelationManyRelationInput = {
  connect?: Maybe<Array<XCustomerKeyFilter>>;
};

/** School relation input */
export type SchoolCustomersSchoolRelationRelationInput = {
  connect?: Maybe<Array<XCustomerKeyFilter>>;
  create?: Maybe<Array<Maybe<Schools_XCustomerCreateInput>>>;
};

/** School relation input */
export type SchoolCustomersSchoolRelationUpdateRelationInput = {
  connect?: Maybe<Array<XCustomerKeyFilter>>;
  create?: Maybe<Array<Maybe<Schools_XCustomerCreateInput>>>;
  disconnect?: Maybe<Array<XCustomerKeyFilter>>;
  reconnect?: Maybe<Array<XCustomerKeyFilter>>;
  update?: Maybe<Array<Maybe<Schools_XCustomerUpdateInput>>>;
};

/** School delete input */
export type SchoolDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** SchoolFieldsPermissions create input */
export type SchoolFieldsPermissions = {
  address1?: Maybe<Scalars['Boolean']>;
  address2?: Maybe<Scalars['Boolean']>;
  airtableId?: Maybe<Scalars['Boolean']>;
  city?: Maybe<Scalars['Boolean']>;
  country?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['Boolean']>;
  email?: Maybe<Scalars['Boolean']>;
  facebook?: Maybe<Scalars['Boolean']>;
  founded?: Maybe<Scalars['Boolean']>;
  founders?: Maybe<Scalars['Boolean']>;
  fullAddress?: Maybe<Scalars['Boolean']>;
  geo?: Maybe<Scalars['Boolean']>;
  instagram?: Maybe<Scalars['Boolean']>;
  lastModifiedTime?: Maybe<Scalars['Boolean']>;
  latitud?: Maybe<Scalars['Boolean']>;
  location?: Maybe<Scalars['Boolean']>;
  longitud?: Maybe<Scalars['Boolean']>;
  neighborhood?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['Boolean']>;
  phoneType?: Maybe<Scalars['Boolean']>;
  schoolName?: Maybe<Scalars['Boolean']>;
  schoolPhoneType?: Maybe<Scalars['Boolean']>;
  slug?: Maybe<Scalars['Boolean']>;
  state?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
  verified?: Maybe<Scalars['Boolean']>;
  website?: Maybe<Scalars['Boolean']>;
  youtube?: Maybe<Scalars['Boolean']>;
  zip?: Maybe<Scalars['Boolean']>;
};

export type SchoolFilter = {
  AND?: Maybe<Array<SchoolFilter>>;
  OR?: Maybe<Array<SchoolFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  address1?: Maybe<StringPredicate>;
  address2?: Maybe<StringPredicate>;
  airtableId?: Maybe<StringPredicate>;
  city?: Maybe<StringPredicate>;
  country?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  customersSchoolRelation?: Maybe<XCustomerRelationFilter>;
  deletedAt?: Maybe<IntPredicate>;
  email?: Maybe<StringPredicate>;
  facebook?: Maybe<StringPredicate>;
  founded?: Maybe<IntPredicate>;
  founders?: Maybe<StringPredicate>;
  fullAddress?: Maybe<StringPredicate>;
  geo?: Maybe<StringPredicate>;
  groupalClass?: Maybe<GroupalClassRelationFilter>;
  id?: Maybe<IdPredicate>;
  instagram?: Maybe<StringPredicate>;
  lastModifiedTime?: Maybe<StringPredicate>;
  latitud?: Maybe<StringPredicate>;
  location?: Maybe<StringPredicate>;
  longitud?: Maybe<StringPredicate>;
  neighborhood?: Maybe<StringPredicate>;
  phone?: Maybe<StringPredicate>;
  phoneType?: Maybe<StringPredicate>;
  planSchool?: Maybe<PlanRelationFilter>;
  rankIssuedSchool?: Maybe<RankIssuedRelationFilter>;
  scheduleSchool?: Maybe<ScheduleRelationFilter>;
  schoolCustomer?: Maybe<XSchoolCustomerRelationFilter>;
  schoolLogo?: Maybe<FileFilter>;
  schoolMartialArts?: Maybe<SchoolMartialArtRelationFilter>;
  schoolName?: Maybe<StringPredicate>;
  schoolPhoneType?: Maybe<StringPredicate>;
  schoolPreSignupRelation?: Maybe<PreSignupRelationFilter>;
  schoolPrivateClassesRelation?: Maybe<PrivateClassRelationFilter>;
  schoolProductRelation?: Maybe<ProductRelationFilter>;
  schoolProfile?: Maybe<SchoolProfileRelationFilter>;
  schoolShortUrlRelation?: Maybe<ShortUrlRelationFilter>;
  schoolTeam?: Maybe<SchoolTeamRelationFilter>;
  slug?: Maybe<StringPredicate>;
  state?: Maybe<StringPredicate>;
  stripeAccount?: Maybe<SchoolStripeAccountFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
  user?: Maybe<UserSchoolRelationFilter>;
  verified?: Maybe<StringPredicate>;
  website?: Maybe<StringPredicate>;
  youtube?: Maybe<StringPredicate>;
  zip?: Maybe<StringPredicate>;
};

export type SchoolGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: SchoolGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type SchoolGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  address1?: Maybe<Array<GroupByField>>;
  address2?: Maybe<Array<GroupByField>>;
  airtableId?: Maybe<Array<GroupByField>>;
  city?: Maybe<Array<GroupByField>>;
  country?: Maybe<Array<GroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  customersSchoolRelation?: Maybe<XCustomerGroupByQuery>;
  email?: Maybe<Array<GroupByField>>;
  facebook?: Maybe<Array<GroupByField>>;
  founded?: Maybe<Array<GroupByField>>;
  founders?: Maybe<Array<GroupByField>>;
  fullAddress?: Maybe<Array<GroupByField>>;
  geo?: Maybe<Array<GroupByField>>;
  groupalClass?: Maybe<GroupalClassGroupByQuery>;
  id?: Maybe<Array<GroupByField>>;
  instagram?: Maybe<Array<GroupByField>>;
  lastModifiedTime?: Maybe<Array<GroupByField>>;
  latitud?: Maybe<Array<GroupByField>>;
  location?: Maybe<Array<GroupByField>>;
  longitud?: Maybe<Array<GroupByField>>;
  neighborhood?: Maybe<Array<GroupByField>>;
  phone?: Maybe<Array<GroupByField>>;
  phoneType?: Maybe<Array<GroupByField>>;
  planSchool?: Maybe<PlanGroupByQuery>;
  rankIssuedSchool?: Maybe<RankIssuedGroupByQuery>;
  scheduleSchool?: Maybe<ScheduleGroupByQuery>;
  schoolCustomer?: Maybe<XSchoolCustomerGroupByQuery>;
  schoolLogo?: Maybe<FileGroupByQuery>;
  schoolMartialArts?: Maybe<SchoolMartialArtGroupByQuery>;
  schoolName?: Maybe<Array<GroupByField>>;
  schoolPhoneType?: Maybe<Array<GroupByField>>;
  schoolPreSignupRelation?: Maybe<PreSignupGroupByQuery>;
  schoolPrivateClassesRelation?: Maybe<PrivateClassGroupByQuery>;
  schoolProductRelation?: Maybe<ProductGroupByQuery>;
  schoolProfile?: Maybe<SchoolProfileGroupByQuery>;
  schoolShortUrlRelation?: Maybe<ShortUrlGroupByQuery>;
  schoolTeam?: Maybe<SchoolTeamGroupByQuery>;
  slug?: Maybe<Array<GroupByField>>;
  state?: Maybe<Array<GroupByField>>;
  stripeAccount?: Maybe<SchoolStripeAccountGroupByQuery>;
  updatedAt?: Maybe<Array<GroupByField>>;
  user?: Maybe<UserSchoolGroupByQuery>;
  verified?: Maybe<Array<GroupByField>>;
  website?: Maybe<Array<GroupByField>>;
  youtube?: Maybe<Array<GroupByField>>;
  zip?: Maybe<Array<GroupByField>>;
};

/** School relation input */
export type SchoolGroupalClassManyRelationInput = {
  connect?: Maybe<Array<GroupalClassKeyFilter>>;
};

/** School relation input */
export type SchoolGroupalClassRelationInput = {
  connect?: Maybe<Array<GroupalClassKeyFilter>>;
  create?: Maybe<Array<Maybe<School_GroupalClassCreateInput>>>;
};

/** School relation input */
export type SchoolGroupalClassUpdateRelationInput = {
  connect?: Maybe<Array<GroupalClassKeyFilter>>;
  create?: Maybe<Array<Maybe<School_GroupalClassCreateInput>>>;
  disconnect?: Maybe<Array<GroupalClassKeyFilter>>;
  reconnect?: Maybe<Array<GroupalClassKeyFilter>>;
  update?: Maybe<Array<Maybe<School_GroupalClassUpdateInput>>>;
};

export type SchoolKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** SchoolListResponse output */
export type SchoolListResponse = {
  __typename?: 'SchoolListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<School>;
};

/** School create input from schoolLogo */
export type SchoolLogo_SchoolCreateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountRelationInput>;
  user?: Maybe<SchoolUserRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

/** School update input from schoolLogo */
export type SchoolLogo_SchoolUpdateInput = {
  data: SchoolUpdateInput;
  filter?: Maybe<SchoolKeyFilter>;
};

/** SchoolManyResponse output */
export type SchoolManyResponse = {
  __typename?: 'SchoolManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<School>;
};

export type SchoolMartialArt = {
  __typename?: 'SchoolMartialArt';
  _description: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  idMartialArt: Maybe<MartialArt>;
  idSchool: Maybe<School>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

/** SchoolMartialArt create input */
export type SchoolMartialArtCreateInput = {
  idMartialArt?: Maybe<SchoolMartialArtIdMartialArtRelationInput>;
  idSchool?: Maybe<SchoolMartialArtIdSchoolRelationInput>;
};

/** SchoolMartialArt create many input */
export type SchoolMartialArtCreateManyInput = {
  idMartialArt?: Maybe<SchoolMartialArtIdMartialArtManyRelationInput>;
  idSchool?: Maybe<SchoolMartialArtIdSchoolManyRelationInput>;
};

/** SchoolMartialArt delete input */
export type SchoolMartialArtDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** SchoolMartialArtFieldsPermissions create input */
export type SchoolMartialArtFieldsPermissions = {
  createdAt?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type SchoolMartialArtFilter = {
  AND?: Maybe<Array<SchoolMartialArtFilter>>;
  OR?: Maybe<Array<SchoolMartialArtFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  idMartialArt?: Maybe<MartialArtFilter>;
  idSchool?: Maybe<SchoolFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type SchoolMartialArtGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: SchoolMartialArtGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type SchoolMartialArtGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  id?: Maybe<Array<GroupByField>>;
  idMartialArt?: Maybe<MartialArtGroupByQuery>;
  idSchool?: Maybe<SchoolGroupByQuery>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

/** SchoolMartialArt relation input */
export type SchoolMartialArtIdMartialArtManyRelationInput = {
  connect?: Maybe<MartialArtKeyFilter>;
};

/** SchoolMartialArt relation input */
export type SchoolMartialArtIdMartialArtRelationInput = {
  connect?: Maybe<MartialArtKeyFilter>;
  create?: Maybe<MartialArtsSchool_MartialArtCreateInput>;
};

/** SchoolMartialArt relation input */
export type SchoolMartialArtIdMartialArtUpdateRelationInput = {
  connect?: Maybe<MartialArtKeyFilter>;
  create?: Maybe<MartialArtsSchool_MartialArtCreateInput>;
  disconnect?: Maybe<MartialArtKeyFilter>;
  reconnect?: Maybe<MartialArtKeyFilter>;
  update?: Maybe<MartialArtsSchool_MartialArtUpdateInput>;
};

/** SchoolMartialArt relation input */
export type SchoolMartialArtIdSchoolManyRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
};

/** SchoolMartialArt relation input */
export type SchoolMartialArtIdSchoolRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<SchoolMartialArts_SchoolCreateInput>;
};

/** SchoolMartialArt relation input */
export type SchoolMartialArtIdSchoolUpdateRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<SchoolMartialArts_SchoolCreateInput>;
  disconnect?: Maybe<SchoolKeyFilter>;
  reconnect?: Maybe<SchoolKeyFilter>;
  update?: Maybe<SchoolMartialArts_SchoolUpdateInput>;
};

export type SchoolMartialArtKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** SchoolMartialArtListResponse output */
export type SchoolMartialArtListResponse = {
  __typename?: 'SchoolMartialArtListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<SchoolMartialArt>;
};

/** SchoolMartialArtManyResponse output */
export type SchoolMartialArtManyResponse = {
  __typename?: 'SchoolMartialArtManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<SchoolMartialArt>;
};

/** No longer supported. Use `sort` instead. */
export enum SchoolMartialArtOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** SchoolMartialArt subscription payload */
export type SchoolMartialArtPayload = {
  __typename?: 'SchoolMartialArtPayload';
  mutation: MutationType;
  node: Maybe<SchoolMartialArt>;
  previousValues: Maybe<SchoolMartialArt>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type SchoolMartialArtRelationFilter = {
  every?: Maybe<SchoolMartialArtFilter>;
  none?: Maybe<SchoolMartialArtFilter>;
  some?: Maybe<SchoolMartialArtFilter>;
};

export type SchoolMartialArtSort = {
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  idMartialArt?: Maybe<MartialArtSort>;
  idSchool?: Maybe<SchoolSort>;
  updatedAt?: Maybe<SortOrder>;
};

/** SchoolMartialArt subscription filter */
export type SchoolMartialArtSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<SchoolMartialArtFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** SchoolMartialArt update input */
export type SchoolMartialArtUpdateInput = {
  id?: Maybe<Scalars['ID']>;
  idMartialArt?: Maybe<SchoolMartialArtIdMartialArtUpdateRelationInput>;
  idSchool?: Maybe<SchoolMartialArtIdSchoolUpdateRelationInput>;
};

export type SchoolMartialArt_PermissionFilter = {
  AND?: Maybe<Array<SchoolMartialArt_PermissionFilter>>;
  OR?: Maybe<Array<SchoolMartialArt_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  idMartialArt?: Maybe<MartialArt_PermissionFilter>;
  idSchool?: Maybe<School_PermissionFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type SchoolMartialArt_PermissionRelationFilter = {
  every?: Maybe<SchoolMartialArt_PermissionFilter>;
  none?: Maybe<SchoolMartialArt_PermissionFilter>;
  some?: Maybe<SchoolMartialArt_PermissionFilter>;
};

/** School create input from schoolMartialArts */
export type SchoolMartialArts_SchoolCreateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountRelationInput>;
  user?: Maybe<SchoolUserRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

/** School update input from schoolMartialArts */
export type SchoolMartialArts_SchoolUpdateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationUpdateRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolUpdateRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolUpdateRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolUpdateRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerUpdateRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoUpdateRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsUpdateRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationUpdateRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationUpdateRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationUpdateRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileUpdateRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationUpdateRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamUpdateRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountUpdateRelationInput>;
  user?: Maybe<SchoolUserUpdateRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

/** No longer supported. Use `sort` instead. */
export enum SchoolOrderBy {
  Address1Asc = 'address1_ASC',
  Address1Desc = 'address1_DESC',
  Address2Asc = 'address2_ASC',
  Address2Desc = 'address2_DESC',
  AirtableIdAsc = 'airtableId_ASC',
  AirtableIdDesc = 'airtableId_DESC',
  CityAsc = 'city_ASC',
  CityDesc = 'city_DESC',
  CountryAsc = 'country_ASC',
  CountryDesc = 'country_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  EmailAsc = 'email_ASC',
  EmailDesc = 'email_DESC',
  FacebookAsc = 'facebook_ASC',
  FacebookDesc = 'facebook_DESC',
  FoundedAsc = 'founded_ASC',
  FoundedDesc = 'founded_DESC',
  FoundersAsc = 'founders_ASC',
  FoundersDesc = 'founders_DESC',
  FullAddressAsc = 'fullAddress_ASC',
  FullAddressDesc = 'fullAddress_DESC',
  GeoAsc = 'geo_ASC',
  GeoDesc = 'geo_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  InstagramAsc = 'instagram_ASC',
  InstagramDesc = 'instagram_DESC',
  LastModifiedTimeAsc = 'lastModifiedTime_ASC',
  LastModifiedTimeDesc = 'lastModifiedTime_DESC',
  LatitudAsc = 'latitud_ASC',
  LatitudDesc = 'latitud_DESC',
  LocationAsc = 'location_ASC',
  LocationDesc = 'location_DESC',
  LongitudAsc = 'longitud_ASC',
  LongitudDesc = 'longitud_DESC',
  NeighborhoodAsc = 'neighborhood_ASC',
  NeighborhoodDesc = 'neighborhood_DESC',
  PhoneTypeAsc = 'phoneType_ASC',
  PhoneTypeDesc = 'phoneType_DESC',
  PhoneAsc = 'phone_ASC',
  PhoneDesc = 'phone_DESC',
  SchoolNameAsc = 'schoolName_ASC',
  SchoolNameDesc = 'schoolName_DESC',
  SchoolPhoneTypeAsc = 'schoolPhoneType_ASC',
  SchoolPhoneTypeDesc = 'schoolPhoneType_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  StateAsc = 'state_ASC',
  StateDesc = 'state_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VerifiedAsc = 'verified_ASC',
  VerifiedDesc = 'verified_DESC',
  WebsiteAsc = 'website_ASC',
  WebsiteDesc = 'website_DESC',
  YoutubeAsc = 'youtube_ASC',
  YoutubeDesc = 'youtube_DESC',
  ZipAsc = 'zip_ASC',
  ZipDesc = 'zip_DESC',
}

/** School subscription payload */
export type SchoolPayload = {
  __typename?: 'SchoolPayload';
  mutation: MutationType;
  node: Maybe<School>;
  previousValues: Maybe<School>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** School relation input */
export type SchoolPlanSchoolManyRelationInput = {
  connect?: Maybe<Array<PlanKeyFilter>>;
};

/** School relation input */
export type SchoolPlanSchoolRelationInput = {
  connect?: Maybe<Array<PlanKeyFilter>>;
  create?: Maybe<Array<Maybe<School_PlanCreateInput>>>;
};

/** School relation input */
export type SchoolPlanSchoolUpdateRelationInput = {
  connect?: Maybe<Array<PlanKeyFilter>>;
  create?: Maybe<Array<Maybe<School_PlanCreateInput>>>;
  disconnect?: Maybe<Array<PlanKeyFilter>>;
  reconnect?: Maybe<Array<PlanKeyFilter>>;
  update?: Maybe<Array<Maybe<School_PlanUpdateInput>>>;
};

/** School create input from schoolPreSignupRelation */
export type SchoolPreSignupRelation_SchoolCreateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountRelationInput>;
  user?: Maybe<SchoolUserRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

/** School update input from schoolPreSignupRelation */
export type SchoolPreSignupRelation_SchoolUpdateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationUpdateRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolUpdateRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolUpdateRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolUpdateRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerUpdateRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoUpdateRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsUpdateRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationUpdateRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationUpdateRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationUpdateRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileUpdateRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationUpdateRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamUpdateRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountUpdateRelationInput>;
  user?: Maybe<SchoolUserUpdateRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

/** School create input from schoolPrivateClassesRelation */
export type SchoolPrivateClassesRelation_SchoolCreateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountRelationInput>;
  user?: Maybe<SchoolUserRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

/** School update input from schoolPrivateClassesRelation */
export type SchoolPrivateClassesRelation_SchoolUpdateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationUpdateRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolUpdateRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolUpdateRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolUpdateRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerUpdateRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoUpdateRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsUpdateRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationUpdateRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationUpdateRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationUpdateRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileUpdateRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationUpdateRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamUpdateRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountUpdateRelationInput>;
  user?: Maybe<SchoolUserUpdateRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

/** School create input from schoolProductRelation */
export type SchoolProductRelation_SchoolCreateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountRelationInput>;
  user?: Maybe<SchoolUserRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

/** School update input from schoolProductRelation */
export type SchoolProductRelation_SchoolUpdateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationUpdateRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolUpdateRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolUpdateRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolUpdateRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerUpdateRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoUpdateRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsUpdateRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationUpdateRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationUpdateRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationUpdateRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileUpdateRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationUpdateRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamUpdateRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountUpdateRelationInput>;
  user?: Maybe<SchoolUserUpdateRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

export type SchoolProfile = {
  __typename?: 'SchoolProfile';
  _description: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  idProfile: Maybe<Profile>;
  idSchool: Maybe<School>;
  rol: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

/** SchoolProfile create input */
export type SchoolProfileCreateInput = {
  idProfile?: Maybe<SchoolProfileIdProfileRelationInput>;
  idSchool?: Maybe<SchoolProfileIdSchoolRelationInput>;
  rol?: Maybe<Scalars['String']>;
};

/** SchoolProfile create many input */
export type SchoolProfileCreateManyInput = {
  idProfile?: Maybe<SchoolProfileIdProfileManyRelationInput>;
  idSchool?: Maybe<SchoolProfileIdSchoolManyRelationInput>;
  rol?: Maybe<Scalars['String']>;
};

/** SchoolProfile delete input */
export type SchoolProfileDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** SchoolProfileFieldsPermissions create input */
export type SchoolProfileFieldsPermissions = {
  createdAt?: Maybe<Scalars['Boolean']>;
  rol?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type SchoolProfileFilter = {
  AND?: Maybe<Array<SchoolProfileFilter>>;
  OR?: Maybe<Array<SchoolProfileFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  idProfile?: Maybe<ProfileFilter>;
  idSchool?: Maybe<SchoolFilter>;
  rol?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type SchoolProfileGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: SchoolProfileGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type SchoolProfileGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  id?: Maybe<Array<GroupByField>>;
  idProfile?: Maybe<ProfileGroupByQuery>;
  idSchool?: Maybe<SchoolGroupByQuery>;
  rol?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

/** SchoolProfile relation input */
export type SchoolProfileIdProfileManyRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
};

/** SchoolProfile relation input */
export type SchoolProfileIdProfileRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
  create?: Maybe<ProfileSchool_ProfileCreateInput>;
};

/** SchoolProfile relation input */
export type SchoolProfileIdProfileUpdateRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
  create?: Maybe<ProfileSchool_ProfileCreateInput>;
  disconnect?: Maybe<ProfileKeyFilter>;
  reconnect?: Maybe<ProfileKeyFilter>;
  update?: Maybe<ProfileSchool_ProfileUpdateInput>;
};

/** SchoolProfile relation input */
export type SchoolProfileIdSchoolManyRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
};

/** SchoolProfile relation input */
export type SchoolProfileIdSchoolRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<SchoolProfile_SchoolCreateInput>;
};

/** SchoolProfile relation input */
export type SchoolProfileIdSchoolUpdateRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<SchoolProfile_SchoolCreateInput>;
  disconnect?: Maybe<SchoolKeyFilter>;
  reconnect?: Maybe<SchoolKeyFilter>;
  update?: Maybe<SchoolProfile_SchoolUpdateInput>;
};

export type SchoolProfileKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** SchoolProfileListResponse output */
export type SchoolProfileListResponse = {
  __typename?: 'SchoolProfileListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<SchoolProfile>;
};

/** SchoolProfileManyResponse output */
export type SchoolProfileManyResponse = {
  __typename?: 'SchoolProfileManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<SchoolProfile>;
};

/** No longer supported. Use `sort` instead. */
export enum SchoolProfileOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  RolAsc = 'rol_ASC',
  RolDesc = 'rol_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** SchoolProfile subscription payload */
export type SchoolProfilePayload = {
  __typename?: 'SchoolProfilePayload';
  mutation: MutationType;
  node: Maybe<SchoolProfile>;
  previousValues: Maybe<SchoolProfile>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type SchoolProfileRelationFilter = {
  every?: Maybe<SchoolProfileFilter>;
  none?: Maybe<SchoolProfileFilter>;
  some?: Maybe<SchoolProfileFilter>;
};

export type SchoolProfileSort = {
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  idProfile?: Maybe<ProfileSort>;
  idSchool?: Maybe<SchoolSort>;
  rol?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
};

/** SchoolProfile subscription filter */
export type SchoolProfileSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<SchoolProfileFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** SchoolProfile update input */
export type SchoolProfileUpdateByFilterInput = {
  rol?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** SchoolProfile update input */
export type SchoolProfileUpdateInput = {
  id?: Maybe<Scalars['ID']>;
  idProfile?: Maybe<SchoolProfileIdProfileUpdateRelationInput>;
  idSchool?: Maybe<SchoolProfileIdSchoolUpdateRelationInput>;
  rol?: Maybe<Scalars['String']>;
};

export type SchoolProfile_PermissionFilter = {
  AND?: Maybe<Array<SchoolProfile_PermissionFilter>>;
  OR?: Maybe<Array<SchoolProfile_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  idProfile?: Maybe<Profile_PermissionFilter>;
  idSchool?: Maybe<School_PermissionFilter>;
  rol?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type SchoolProfile_PermissionRelationFilter = {
  every?: Maybe<SchoolProfile_PermissionFilter>;
  none?: Maybe<SchoolProfile_PermissionFilter>;
  some?: Maybe<SchoolProfile_PermissionFilter>;
};

/** School create input from schoolProfile */
export type SchoolProfile_SchoolCreateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountRelationInput>;
  user?: Maybe<SchoolUserRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

/** School update input from schoolProfile */
export type SchoolProfile_SchoolUpdateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationUpdateRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolUpdateRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolUpdateRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolUpdateRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerUpdateRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoUpdateRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsUpdateRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationUpdateRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationUpdateRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationUpdateRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileUpdateRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationUpdateRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamUpdateRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountUpdateRelationInput>;
  user?: Maybe<SchoolUserUpdateRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

/** School relation input */
export type SchoolRankIssuedSchoolManyRelationInput = {
  connect?: Maybe<Array<RankIssuedKeyFilter>>;
};

/** School relation input */
export type SchoolRankIssuedSchoolRelationInput = {
  connect?: Maybe<Array<RankIssuedKeyFilter>>;
  create?: Maybe<Array<Maybe<School_RankIssuedCreateInput>>>;
};

/** School relation input */
export type SchoolRankIssuedSchoolUpdateRelationInput = {
  connect?: Maybe<Array<RankIssuedKeyFilter>>;
  create?: Maybe<Array<Maybe<School_RankIssuedCreateInput>>>;
  disconnect?: Maybe<Array<RankIssuedKeyFilter>>;
  reconnect?: Maybe<Array<RankIssuedKeyFilter>>;
  update?: Maybe<Array<Maybe<School_RankIssuedUpdateInput>>>;
};

export type SchoolRelationFilter = {
  every?: Maybe<SchoolFilter>;
  none?: Maybe<SchoolFilter>;
  some?: Maybe<SchoolFilter>;
};

/** School relation input */
export type SchoolScheduleSchoolManyRelationInput = {
  connect?: Maybe<Array<ScheduleKeyFilter>>;
};

/** School relation input */
export type SchoolScheduleSchoolRelationInput = {
  connect?: Maybe<Array<ScheduleKeyFilter>>;
  create?: Maybe<Array<Maybe<IdSchool_ScheduleCreateInput>>>;
};

/** School relation input */
export type SchoolScheduleSchoolUpdateRelationInput = {
  connect?: Maybe<Array<ScheduleKeyFilter>>;
  create?: Maybe<Array<Maybe<IdSchool_ScheduleCreateInput>>>;
  disconnect?: Maybe<Array<ScheduleKeyFilter>>;
  reconnect?: Maybe<Array<ScheduleKeyFilter>>;
  update?: Maybe<Array<Maybe<IdSchool_ScheduleUpdateInput>>>;
};

/** School relation input */
export type SchoolSchoolCustomerManyRelationInput = {
  connect?: Maybe<Array<XSchoolCustomerKeyFilter>>;
};

/** School relation input */
export type SchoolSchoolCustomerRelationInput = {
  connect?: Maybe<Array<XSchoolCustomerKeyFilter>>;
  create?: Maybe<Array<Maybe<IdSchool_XSchoolCustomerCreateInput>>>;
};

/** School relation input */
export type SchoolSchoolCustomerUpdateRelationInput = {
  connect?: Maybe<Array<XSchoolCustomerKeyFilter>>;
  create?: Maybe<Array<Maybe<IdSchool_XSchoolCustomerCreateInput>>>;
  disconnect?: Maybe<Array<XSchoolCustomerKeyFilter>>;
  reconnect?: Maybe<Array<XSchoolCustomerKeyFilter>>;
  update?: Maybe<Array<Maybe<IdSchool_XSchoolCustomerUpdateInput>>>;
};

/** School relation input */
export type SchoolSchoolLogoManyRelationInput = {
  connect?: Maybe<FileKeyFilter>;
};

/** School relation input */
export type SchoolSchoolLogoRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Schools_SchoolLogo_FileCreateInput>;
};

/** School relation input */
export type SchoolSchoolLogoUpdateRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Schools_SchoolLogo_FileCreateInput>;
  disconnect?: Maybe<FileKeyFilter>;
  reconnect?: Maybe<FileKeyFilter>;
  update?: Maybe<Schools_SchoolLogo_FileUpdateInput>;
};

/** School relation input */
export type SchoolSchoolMartialArtsManyRelationInput = {
  connect?: Maybe<Array<SchoolMartialArtKeyFilter>>;
};

/** School relation input */
export type SchoolSchoolMartialArtsRelationInput = {
  connect?: Maybe<Array<SchoolMartialArtKeyFilter>>;
  create?: Maybe<Array<Maybe<IdSchool_SchoolMartialArtCreateInput>>>;
};

/** School relation input */
export type SchoolSchoolMartialArtsUpdateRelationInput = {
  connect?: Maybe<Array<SchoolMartialArtKeyFilter>>;
  create?: Maybe<Array<Maybe<IdSchool_SchoolMartialArtCreateInput>>>;
  disconnect?: Maybe<Array<SchoolMartialArtKeyFilter>>;
  reconnect?: Maybe<Array<SchoolMartialArtKeyFilter>>;
  update?: Maybe<Array<Maybe<IdSchool_SchoolMartialArtUpdateInput>>>;
};

/** School relation input */
export type SchoolSchoolPreSignupRelationManyRelationInput = {
  connect?: Maybe<Array<PreSignupKeyFilter>>;
};

/** School relation input */
export type SchoolSchoolPreSignupRelationRelationInput = {
  connect?: Maybe<Array<PreSignupKeyFilter>>;
  create?: Maybe<Array<Maybe<School_PreSignupCreateInput>>>;
};

/** School relation input */
export type SchoolSchoolPreSignupRelationUpdateRelationInput = {
  connect?: Maybe<Array<PreSignupKeyFilter>>;
  create?: Maybe<Array<Maybe<School_PreSignupCreateInput>>>;
  disconnect?: Maybe<Array<PreSignupKeyFilter>>;
  reconnect?: Maybe<Array<PreSignupKeyFilter>>;
  update?: Maybe<Array<Maybe<School_PreSignupUpdateInput>>>;
};

/** School relation input */
export type SchoolSchoolPrivateClassesRelationManyRelationInput = {
  connect?: Maybe<Array<PrivateClassKeyFilter>>;
};

/** School relation input */
export type SchoolSchoolPrivateClassesRelationRelationInput = {
  connect?: Maybe<Array<PrivateClassKeyFilter>>;
  create?: Maybe<Array<Maybe<School_PrivateClassCreateInput>>>;
};

/** School relation input */
export type SchoolSchoolPrivateClassesRelationUpdateRelationInput = {
  connect?: Maybe<Array<PrivateClassKeyFilter>>;
  create?: Maybe<Array<Maybe<School_PrivateClassCreateInput>>>;
  disconnect?: Maybe<Array<PrivateClassKeyFilter>>;
  reconnect?: Maybe<Array<PrivateClassKeyFilter>>;
  update?: Maybe<Array<Maybe<School_PrivateClassUpdateInput>>>;
};

/** School relation input */
export type SchoolSchoolProductRelationManyRelationInput = {
  connect?: Maybe<Array<ProductKeyFilter>>;
};

/** School relation input */
export type SchoolSchoolProductRelationRelationInput = {
  connect?: Maybe<Array<ProductKeyFilter>>;
  create?: Maybe<Array<Maybe<School_ProductCreateInput>>>;
};

/** School relation input */
export type SchoolSchoolProductRelationUpdateRelationInput = {
  connect?: Maybe<Array<ProductKeyFilter>>;
  create?: Maybe<Array<Maybe<School_ProductCreateInput>>>;
  disconnect?: Maybe<Array<ProductKeyFilter>>;
  reconnect?: Maybe<Array<ProductKeyFilter>>;
  update?: Maybe<Array<Maybe<School_ProductUpdateInput>>>;
};

/** School relation input */
export type SchoolSchoolProfileManyRelationInput = {
  connect?: Maybe<Array<SchoolProfileKeyFilter>>;
};

/** School relation input */
export type SchoolSchoolProfileRelationInput = {
  connect?: Maybe<Array<SchoolProfileKeyFilter>>;
  create?: Maybe<Array<Maybe<IdSchool_SchoolProfileCreateInput>>>;
};

/** School relation input */
export type SchoolSchoolProfileUpdateRelationInput = {
  connect?: Maybe<Array<SchoolProfileKeyFilter>>;
  create?: Maybe<Array<Maybe<IdSchool_SchoolProfileCreateInput>>>;
  disconnect?: Maybe<Array<SchoolProfileKeyFilter>>;
  reconnect?: Maybe<Array<SchoolProfileKeyFilter>>;
  update?: Maybe<Array<Maybe<IdSchool_SchoolProfileUpdateInput>>>;
};

/** School relation input */
export type SchoolSchoolShortUrlRelationManyRelationInput = {
  connect?: Maybe<Array<ShortUrlKeyFilter>>;
};

/** School relation input */
export type SchoolSchoolShortUrlRelationRelationInput = {
  connect?: Maybe<Array<ShortUrlKeyFilter>>;
  create?: Maybe<Array<Maybe<School_ShortUrlCreateInput>>>;
};

/** School relation input */
export type SchoolSchoolShortUrlRelationUpdateRelationInput = {
  connect?: Maybe<Array<ShortUrlKeyFilter>>;
  create?: Maybe<Array<Maybe<School_ShortUrlCreateInput>>>;
  disconnect?: Maybe<Array<ShortUrlKeyFilter>>;
  reconnect?: Maybe<Array<ShortUrlKeyFilter>>;
  update?: Maybe<Array<Maybe<School_ShortUrlUpdateInput>>>;
};

/** School relation input */
export type SchoolSchoolTeamManyRelationInput = {
  connect?: Maybe<Array<SchoolTeamKeyFilter>>;
};

/** School relation input */
export type SchoolSchoolTeamRelationInput = {
  connect?: Maybe<Array<SchoolTeamKeyFilter>>;
  create?: Maybe<Array<Maybe<IdSchool_SchoolTeamCreateInput>>>;
};

/** School relation input */
export type SchoolSchoolTeamUpdateRelationInput = {
  connect?: Maybe<Array<SchoolTeamKeyFilter>>;
  create?: Maybe<Array<Maybe<IdSchool_SchoolTeamCreateInput>>>;
  disconnect?: Maybe<Array<SchoolTeamKeyFilter>>;
  reconnect?: Maybe<Array<SchoolTeamKeyFilter>>;
  update?: Maybe<Array<Maybe<IdSchool_SchoolTeamUpdateInput>>>;
};

/** School create input from schoolShortUrlRelation */
export type SchoolShortUrlRelation_SchoolCreateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountRelationInput>;
  user?: Maybe<SchoolUserRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

/** School update input from schoolShortUrlRelation */
export type SchoolShortUrlRelation_SchoolUpdateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationUpdateRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolUpdateRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolUpdateRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolUpdateRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerUpdateRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoUpdateRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsUpdateRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationUpdateRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationUpdateRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationUpdateRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileUpdateRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationUpdateRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamUpdateRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountUpdateRelationInput>;
  user?: Maybe<SchoolUserUpdateRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

export type SchoolSort = {
  address1?: Maybe<SortOrder>;
  address2?: Maybe<SortOrder>;
  airtableId?: Maybe<SortOrder>;
  city?: Maybe<SortOrder>;
  country?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  email?: Maybe<SortOrder>;
  facebook?: Maybe<SortOrder>;
  founded?: Maybe<SortOrder>;
  founders?: Maybe<SortOrder>;
  fullAddress?: Maybe<SortOrder>;
  geo?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  instagram?: Maybe<SortOrder>;
  lastModifiedTime?: Maybe<SortOrder>;
  latitud?: Maybe<SortOrder>;
  location?: Maybe<SortOrder>;
  longitud?: Maybe<SortOrder>;
  neighborhood?: Maybe<SortOrder>;
  phone?: Maybe<SortOrder>;
  phoneType?: Maybe<SortOrder>;
  schoolLogo?: Maybe<FileSort>;
  schoolName?: Maybe<SortOrder>;
  schoolPhoneType?: Maybe<SortOrder>;
  slug?: Maybe<SortOrder>;
  state?: Maybe<SortOrder>;
  stripeAccount?: Maybe<SchoolStripeAccountSort>;
  updatedAt?: Maybe<SortOrder>;
  verified?: Maybe<SortOrder>;
  website?: Maybe<SortOrder>;
  youtube?: Maybe<SortOrder>;
  zip?: Maybe<SortOrder>;
};

export type SchoolStripeAccount = {
  __typename?: 'SchoolStripeAccount';
  _description: Maybe<Scalars['String']>;
  account: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  school: Maybe<School>;
  status: Maybe<Scalars['String']>;
  type: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

/** SchoolStripeAccount create input */
export type SchoolStripeAccountCreateInput = {
  account: Scalars['String'];
  school?: Maybe<SchoolStripeAccountSchoolRelationInput>;
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** SchoolStripeAccount create many input */
export type SchoolStripeAccountCreateManyInput = {
  account: Scalars['String'];
  school: SchoolStripeAccountSchoolManyRelationInput;
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** SchoolStripeAccount delete input */
export type SchoolStripeAccountDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** SchoolStripeAccountFieldsPermissions create input */
export type SchoolStripeAccountFieldsPermissions = {
  account?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['Boolean']>;
  status?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type SchoolStripeAccountFilter = {
  AND?: Maybe<Array<SchoolStripeAccountFilter>>;
  OR?: Maybe<Array<SchoolStripeAccountFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  account?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  school?: Maybe<SchoolFilter>;
  status?: Maybe<StringPredicate>;
  type?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type SchoolStripeAccountGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: SchoolStripeAccountGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type SchoolStripeAccountGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  account?: Maybe<Array<GroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  id?: Maybe<Array<GroupByField>>;
  school?: Maybe<SchoolGroupByQuery>;
  status?: Maybe<Array<GroupByField>>;
  type?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

export type SchoolStripeAccountKeyFilter = {
  account?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
};

/** SchoolStripeAccountListResponse output */
export type SchoolStripeAccountListResponse = {
  __typename?: 'SchoolStripeAccountListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<SchoolStripeAccount>;
};

/** School relation input */
export type SchoolStripeAccountManyRelationInput = {
  connect?: Maybe<SchoolStripeAccountKeyFilter>;
};

/** SchoolStripeAccountManyResponse output */
export type SchoolStripeAccountManyResponse = {
  __typename?: 'SchoolStripeAccountManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<SchoolStripeAccount>;
};

/** No longer supported. Use `sort` instead. */
export enum SchoolStripeAccountOrderBy {
  AccountAsc = 'account_ASC',
  AccountDesc = 'account_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** SchoolStripeAccount subscription payload */
export type SchoolStripeAccountPayload = {
  __typename?: 'SchoolStripeAccountPayload';
  mutation: MutationType;
  node: Maybe<SchoolStripeAccount>;
  previousValues: Maybe<SchoolStripeAccount>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** School relation input */
export type SchoolStripeAccountRelationInput = {
  connect?: Maybe<SchoolStripeAccountKeyFilter>;
  create?: Maybe<School_SchoolStripeAccountCreateInput>;
};

/** SchoolStripeAccount relation input */
export type SchoolStripeAccountSchoolManyRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
};

/** SchoolStripeAccount relation input */
export type SchoolStripeAccountSchoolRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<StripeAccount_SchoolCreateInput>;
};

/** SchoolStripeAccount relation input */
export type SchoolStripeAccountSchoolUpdateRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<StripeAccount_SchoolCreateInput>;
  disconnect?: Maybe<SchoolKeyFilter>;
  reconnect?: Maybe<SchoolKeyFilter>;
  update?: Maybe<StripeAccount_SchoolUpdateInput>;
};

export type SchoolStripeAccountSort = {
  account?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  school?: Maybe<SchoolSort>;
  status?: Maybe<SortOrder>;
  type?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
};

/** SchoolStripeAccount subscription filter */
export type SchoolStripeAccountSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<SchoolStripeAccountFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** SchoolStripeAccount update input */
export type SchoolStripeAccountUpdateByFilterInput = {
  account?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  status?: Maybe<Array<Maybe<UpdateByFilterStringSwitchInput>>>;
  type?: Maybe<Array<Maybe<UpdateByFilterStringSwitchInput>>>;
};

/** SchoolStripeAccount update input */
export type SchoolStripeAccountUpdateInput = {
  account?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  school?: Maybe<SchoolStripeAccountSchoolUpdateRelationInput>;
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** School relation input */
export type SchoolStripeAccountUpdateRelationInput = {
  connect?: Maybe<SchoolStripeAccountKeyFilter>;
  create?: Maybe<School_SchoolStripeAccountCreateInput>;
  disconnect?: Maybe<SchoolStripeAccountKeyFilter>;
  reconnect?: Maybe<SchoolStripeAccountKeyFilter>;
  update?: Maybe<School_SchoolStripeAccountUpdateInput>;
};

export type SchoolStripeAccount_PermissionFilter = {
  AND?: Maybe<Array<SchoolStripeAccount_PermissionFilter>>;
  OR?: Maybe<Array<SchoolStripeAccount_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  account?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  school?: Maybe<School_PermissionFilter>;
  status?: Maybe<StringPredicate>;
  type?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

/** School subscription filter */
export type SchoolSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<SchoolFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

export type SchoolTeam = {
  __typename?: 'SchoolTeam';
  _description: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  idSchool: Maybe<School>;
  idTeam: Maybe<Team>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

/** SchoolTeam create input */
export type SchoolTeamCreateInput = {
  idSchool?: Maybe<SchoolTeamIdSchoolRelationInput>;
  idTeam?: Maybe<SchoolTeamIdTeamRelationInput>;
};

/** SchoolTeam create many input */
export type SchoolTeamCreateManyInput = {
  idSchool?: Maybe<SchoolTeamIdSchoolManyRelationInput>;
  idTeam?: Maybe<SchoolTeamIdTeamManyRelationInput>;
};

/** SchoolTeam delete input */
export type SchoolTeamDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** SchoolTeamFieldsPermissions create input */
export type SchoolTeamFieldsPermissions = {
  createdAt?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type SchoolTeamFilter = {
  AND?: Maybe<Array<SchoolTeamFilter>>;
  OR?: Maybe<Array<SchoolTeamFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  idSchool?: Maybe<SchoolFilter>;
  idTeam?: Maybe<TeamFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type SchoolTeamGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: SchoolTeamGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type SchoolTeamGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  id?: Maybe<Array<GroupByField>>;
  idSchool?: Maybe<SchoolGroupByQuery>;
  idTeam?: Maybe<TeamGroupByQuery>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

/** SchoolTeam relation input */
export type SchoolTeamIdSchoolManyRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
};

/** SchoolTeam relation input */
export type SchoolTeamIdSchoolRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<SchoolTeam_SchoolCreateInput>;
};

/** SchoolTeam relation input */
export type SchoolTeamIdSchoolUpdateRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<SchoolTeam_SchoolCreateInput>;
  disconnect?: Maybe<SchoolKeyFilter>;
  reconnect?: Maybe<SchoolKeyFilter>;
  update?: Maybe<SchoolTeam_SchoolUpdateInput>;
};

/** SchoolTeam relation input */
export type SchoolTeamIdTeamManyRelationInput = {
  connect?: Maybe<TeamKeyFilter>;
};

/** SchoolTeam relation input */
export type SchoolTeamIdTeamRelationInput = {
  connect?: Maybe<TeamKeyFilter>;
  create?: Maybe<TeamSchool_TeamCreateInput>;
};

/** SchoolTeam relation input */
export type SchoolTeamIdTeamUpdateRelationInput = {
  connect?: Maybe<TeamKeyFilter>;
  create?: Maybe<TeamSchool_TeamCreateInput>;
  disconnect?: Maybe<TeamKeyFilter>;
  reconnect?: Maybe<TeamKeyFilter>;
  update?: Maybe<TeamSchool_TeamUpdateInput>;
};

export type SchoolTeamKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** SchoolTeamListResponse output */
export type SchoolTeamListResponse = {
  __typename?: 'SchoolTeamListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<SchoolTeam>;
};

/** SchoolTeamManyResponse output */
export type SchoolTeamManyResponse = {
  __typename?: 'SchoolTeamManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<SchoolTeam>;
};

/** No longer supported. Use `sort` instead. */
export enum SchoolTeamOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** SchoolTeam subscription payload */
export type SchoolTeamPayload = {
  __typename?: 'SchoolTeamPayload';
  mutation: MutationType;
  node: Maybe<SchoolTeam>;
  previousValues: Maybe<SchoolTeam>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type SchoolTeamRelationFilter = {
  every?: Maybe<SchoolTeamFilter>;
  none?: Maybe<SchoolTeamFilter>;
  some?: Maybe<SchoolTeamFilter>;
};

export type SchoolTeamSort = {
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  idSchool?: Maybe<SchoolSort>;
  idTeam?: Maybe<TeamSort>;
  updatedAt?: Maybe<SortOrder>;
};

/** SchoolTeam subscription filter */
export type SchoolTeamSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<SchoolTeamFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** SchoolTeam update input */
export type SchoolTeamUpdateInput = {
  id?: Maybe<Scalars['ID']>;
  idSchool?: Maybe<SchoolTeamIdSchoolUpdateRelationInput>;
  idTeam?: Maybe<SchoolTeamIdTeamUpdateRelationInput>;
};

export type SchoolTeam_PermissionFilter = {
  AND?: Maybe<Array<SchoolTeam_PermissionFilter>>;
  OR?: Maybe<Array<SchoolTeam_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  idSchool?: Maybe<School_PermissionFilter>;
  idTeam?: Maybe<Team_PermissionFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type SchoolTeam_PermissionRelationFilter = {
  every?: Maybe<SchoolTeam_PermissionFilter>;
  none?: Maybe<SchoolTeam_PermissionFilter>;
  some?: Maybe<SchoolTeam_PermissionFilter>;
};

/** School create input from schoolTeam */
export type SchoolTeam_SchoolCreateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountRelationInput>;
  user?: Maybe<SchoolUserRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

/** School update input from schoolTeam */
export type SchoolTeam_SchoolUpdateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationUpdateRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolUpdateRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolUpdateRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolUpdateRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerUpdateRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoUpdateRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsUpdateRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationUpdateRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationUpdateRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationUpdateRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileUpdateRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationUpdateRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamUpdateRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountUpdateRelationInput>;
  user?: Maybe<SchoolUserUpdateRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

/** School update input */
export type SchoolUpdateByFilterInput = {
  address1?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  address2?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  airtableId?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  city?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  country?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  email?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  facebook?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  founded?: Maybe<Array<Maybe<UpdateByFilterIntInput>>>;
  founders?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  fullAddress?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  geo?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  instagram?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  lastModifiedTime?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  latitud?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  location?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  longitud?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  neighborhood?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  phone?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  phoneType?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  schoolName?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  schoolPhoneType?: Maybe<Array<Maybe<UpdateByFilterStringSwitchInput>>>;
  slug?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  state?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  verified?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  website?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  youtube?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  zip?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** School update input */
export type SchoolUpdateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationUpdateRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassUpdateRelationInput>;
  id?: Maybe<Scalars['ID']>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolUpdateRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolUpdateRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolUpdateRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerUpdateRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoUpdateRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsUpdateRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationUpdateRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationUpdateRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationUpdateRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileUpdateRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationUpdateRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamUpdateRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountUpdateRelationInput>;
  user?: Maybe<SchoolUserUpdateRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

/** School relation input */
export type SchoolUserManyRelationInput = {
  connect?: Maybe<Array<UserSchoolKeyFilter>>;
};

/** School relation input */
export type SchoolUserRelationInput = {
  connect?: Maybe<Array<UserSchoolKeyFilter>>;
  create?: Maybe<Array<Maybe<IdSchool_UserSchoolCreateInput>>>;
};

/** School relation input */
export type SchoolUserUpdateRelationInput = {
  connect?: Maybe<Array<UserSchoolKeyFilter>>;
  create?: Maybe<Array<Maybe<IdSchool_UserSchoolCreateInput>>>;
  disconnect?: Maybe<Array<UserSchoolKeyFilter>>;
  reconnect?: Maybe<Array<UserSchoolKeyFilter>>;
  update?: Maybe<Array<Maybe<IdSchool_UserSchoolUpdateInput>>>;
};

/** GroupalClass create input from school */
export type School_GroupalClassCreateInput = {
  days?: Maybe<Scalars['String']>;
  duration?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  profile?: Maybe<GroupalClassProfileRelationInput>;
  school?: Maybe<GroupalClassSchoolRelationInput>;
  startTime?: Maybe<Scalars['DateTime']>;
};

/** GroupalClass update input from school */
export type School_GroupalClassUpdateInput = {
  data: GroupalClassUpdateInput;
  filter?: Maybe<GroupalClassKeyFilter>;
};

export type School_PermissionFilter = {
  AND?: Maybe<Array<School_PermissionFilter>>;
  OR?: Maybe<Array<School_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  address1?: Maybe<StringPredicate>;
  address2?: Maybe<StringPredicate>;
  airtableId?: Maybe<StringPredicate>;
  city?: Maybe<StringPredicate>;
  country?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  customersSchoolRelation?: Maybe<XCustomer_PermissionRelationFilter>;
  deletedAt?: Maybe<IntPredicate>;
  email?: Maybe<StringPredicate>;
  facebook?: Maybe<StringPredicate>;
  founded?: Maybe<IntPredicate>;
  founders?: Maybe<StringPredicate>;
  fullAddress?: Maybe<StringPredicate>;
  geo?: Maybe<StringPredicate>;
  groupalClass?: Maybe<GroupalClass_PermissionRelationFilter>;
  id?: Maybe<IdPredicate>;
  instagram?: Maybe<StringPredicate>;
  lastModifiedTime?: Maybe<StringPredicate>;
  latitud?: Maybe<StringPredicate>;
  location?: Maybe<StringPredicate>;
  longitud?: Maybe<StringPredicate>;
  neighborhood?: Maybe<StringPredicate>;
  phone?: Maybe<StringPredicate>;
  phoneType?: Maybe<StringPredicate>;
  planSchool?: Maybe<Plan_PermissionRelationFilter>;
  rankIssuedSchool?: Maybe<RankIssued_PermissionRelationFilter>;
  scheduleSchool?: Maybe<Schedule_PermissionRelationFilter>;
  schoolCustomer?: Maybe<XSchoolCustomer_PermissionRelationFilter>;
  schoolLogo?: Maybe<File_PermissionFilter>;
  schoolMartialArts?: Maybe<SchoolMartialArt_PermissionRelationFilter>;
  schoolName?: Maybe<StringPredicate>;
  schoolPhoneType?: Maybe<StringPredicate>;
  schoolPreSignupRelation?: Maybe<PreSignup_PermissionRelationFilter>;
  schoolPrivateClassesRelation?: Maybe<PrivateClass_PermissionRelationFilter>;
  schoolProductRelation?: Maybe<Product_PermissionRelationFilter>;
  schoolProfile?: Maybe<SchoolProfile_PermissionRelationFilter>;
  schoolShortUrlRelation?: Maybe<ShortUrl_PermissionRelationFilter>;
  schoolTeam?: Maybe<SchoolTeam_PermissionRelationFilter>;
  slug?: Maybe<StringPredicate>;
  state?: Maybe<StringPredicate>;
  stripeAccount?: Maybe<SchoolStripeAccount_PermissionFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
  user?: Maybe<UserSchool_PermissionRelationFilter>;
  verified?: Maybe<StringPredicate>;
  website?: Maybe<StringPredicate>;
  youtube?: Maybe<StringPredicate>;
  zip?: Maybe<StringPredicate>;
};

export type School_PermissionRelationFilter = {
  every?: Maybe<School_PermissionFilter>;
  none?: Maybe<School_PermissionFilter>;
  some?: Maybe<School_PermissionFilter>;
};

/** Plan create input from school */
export type School_PlanCreateInput = {
  categoryPlan?: Maybe<PlanCategoryPlanRelationInput>;
  description?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  school?: Maybe<PlanSchoolRelationInput>;
  type?: Maybe<Scalars['String']>;
};

/** Plan update input from school */
export type School_PlanUpdateInput = {
  data: PlanUpdateInput;
  filter?: Maybe<PlanKeyFilter>;
};

/** PreSignup create input from school */
export type School_PreSignupCreateInput = {
  additionalInformation?: Maybe<Scalars['String']>;
  email: Scalars['String'];
  fullname: Scalars['String'];
  phone: Scalars['String'];
  school?: Maybe<PreSignupSchoolRelationInput>;
};

/** PreSignup update input from school */
export type School_PreSignupUpdateInput = {
  data: PreSignupUpdateInput;
  filter?: Maybe<PreSignupKeyFilter>;
};

/** PrivateClasses create input from school */
export type School_PrivateClassCreateInput = {
  amount: Scalars['Int'];
  classPrivateClassPurchaseRelation?: Maybe<PrivateClassesClassPrivateClassPurchaseRelationRelationInput>;
  currency?: Maybe<Scalars['String']>;
  days?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  /** Duration saved in minutes */
  duration?: Maybe<Scalars['Int']>;
  endTime?: Maybe<Scalars['DateTime']>;
  instructor?: Maybe<PrivateClassesInstructorRelationInput>;
  isActive?: Maybe<Scalars['Boolean']>;
  lookupKey?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  school?: Maybe<PrivateClassesSchoolRelationInput>;
  startTime?: Maybe<Scalars['DateTime']>;
  stripeProductId: Scalars['String'];
};

/** PrivateClasses update input from school */
export type School_PrivateClassUpdateInput = {
  data: PrivateClassUpdateInput;
  filter?: Maybe<PrivateClassKeyFilter>;
};

/** Product create input from school */
export type School_ProductCreateInput = {
  amount: Scalars['Int'];
  category?: Maybe<ProductCategoryRelationInput>;
  currency?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  feesAmount?: Maybe<Scalars['Int']>;
  feesLookupKey?: Maybe<Scalars['String']>;
  interval: Scalars['String'];
  isActive?: Maybe<Scalars['Boolean']>;
  lookupKey?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  productSubscriptionsRelation?: Maybe<ProductProductSubscriptionsRelationRelationInput>;
  school?: Maybe<ProductSchoolRelationInput>;
  stripeProductId?: Maybe<Scalars['String']>;
};

/** Product update input from school */
export type School_ProductUpdateInput = {
  data: ProductUpdateInput;
  filter?: Maybe<ProductKeyFilter>;
};

/** RankIssued create input from school */
export type School_RankIssuedCreateInput = {
  displayName?: Maybe<RankIssuedDisplayNameRelationInput>;
  graduated?: Maybe<Scalars['Date']>;
  master?: Maybe<RankIssuedMasterRelationInput>;
  masterPhoto?: Maybe<RankIssuedMasterPhotoRelationInput>;
  rank?: Maybe<RankIssuedRankRelationInput>;
  school?: Maybe<RankIssuedSchoolRelationInput>;
  verified?: Maybe<Scalars['Boolean']>;
};

/** RankIssued update input from school */
export type School_RankIssuedUpdateInput = {
  data: RankIssuedUpdateInput;
  filter?: Maybe<RankIssuedKeyFilter>;
};

/** SchoolStripeAccount create input from school */
export type School_SchoolStripeAccountCreateInput = {
  account: Scalars['String'];
  school?: Maybe<SchoolStripeAccountSchoolRelationInput>;
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** SchoolStripeAccount update input from school */
export type School_SchoolStripeAccountUpdateInput = {
  account?: Maybe<Scalars['String']>;
  school?: Maybe<SchoolStripeAccountSchoolUpdateRelationInput>;
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** ShortUrl create input from school */
export type School_ShortUrlCreateInput = {
  profile?: Maybe<ShortUrlProfileRelationInput>;
  school?: Maybe<ShortUrlSchoolRelationInput>;
  slug: Scalars['String'];
  url?: Maybe<Scalars['String']>;
};

/** ShortUrl update input from school */
export type School_ShortUrlUpdateInput = {
  data: ShortUrlUpdateInput;
  filter?: Maybe<ShortUrlKeyFilter>;
};

/** Users create input from schools */
export type Schools_UserCreateInput = {
  avatar?: Maybe<UsersAvatarRelationInput>;
  email: Scalars['String'];
  firstName?: Maybe<Scalars['String']>;
  idUser?: Maybe<UsersIdUserRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  roles?: Maybe<UsersRolesRelationInput>;
  schools?: Maybe<UsersSchoolsRelationInput>;
  status?: Maybe<Scalars['String']>;
  timezone?: Maybe<Scalars['String']>;
};

/** Users update input from schools */
export type Schools_UserUpdateInput = {
  avatar?: Maybe<UsersAvatarUpdateRelationInput>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  idUser?: Maybe<UsersIdUserUpdateRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  roles?: Maybe<UsersRolesUpdateRelationInput>;
  schools?: Maybe<UsersSchoolsUpdateRelationInput>;
  status?: Maybe<Scalars['String']>;
  timezone?: Maybe<Scalars['String']>;
};

/** XCustomer create input from schools */
export type Schools_XCustomerCreateInput = {
  customerAirtableId?: Maybe<Scalars['String']>;
  customerSchool?: Maybe<XCustomerCustomerSchoolRelationInput>;
  email?: Maybe<Scalars['String']>;
  interest?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  schools?: Maybe<XCustomerSchoolsRelationInput>;
};

/** XCustomer update input from schools */
export type Schools_XCustomerUpdateInput = {
  data: XCustomerUpdateInput;
  filter?: Maybe<XCustomerKeyFilter>;
};

/** Files create input from schools_schoolLogo */
export type Schools_SchoolLogo_FileCreateInput = {
  brand_logo?: Maybe<FilesBrand_LogoRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8RelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24RelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8RelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8RelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24RelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailRelationInput>;
  video_video?: Maybe<FilesVideo_VideoRelationInput>;
};

/** Files update input from schools_schoolLogo */
export type Schools_SchoolLogo_FileUpdateInput = {
  brand_logo?: Maybe<FilesBrand_LogoUpdateRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverUpdateRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsUpdateRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsUpdateRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoUpdateRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallUpdateRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8UpdateRelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24UpdateRelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoUpdateRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8UpdateRelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8UpdateRelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24UpdateRelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoUpdateRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarUpdateRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoUpdateRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarUpdateRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewUpdateRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailUpdateRelationInput>;
  video_video?: Maybe<FilesVideo_VideoUpdateRelationInput>;
};

export type Setting = {
  __typename?: 'Setting';
  _description: Maybe<Scalars['String']>;
  bgColor: Maybe<Scalars['String']>;
  buttonLinkColor: Maybe<Scalars['String']>;
  containerColor: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  currency: Maybe<Scalars['String']>;
  dateFormat: Maybe<Scalars['String']>;
  landingPageImage: Maybe<File>;
  language: Maybe<Scalars['String']>;
  leftNavColor: Maybe<Scalars['String']>;
  menuBarBGColor: Maybe<Scalars['String']>;
  menuBarIconsColor: Maybe<Scalars['String']>;
  menuBarLogo: Maybe<File>;
  passwordMinLength: Maybe<Scalars['Int']>;
  passwordRequireLowercase: Maybe<Scalars['Boolean']>;
  passwordRequireNumbers: Maybe<Scalars['Boolean']>;
  passwordRequireSpecial: Maybe<Scalars['Boolean']>;
  passwordRequireUppercase: Maybe<Scalars['Boolean']>;
  passwordUpdateInterval: Maybe<Scalars['Int']>;
  rememberDevice: Maybe<Scalars['String']>;
  timezone: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
  userInterfaceStyle: Maybe<Scalars['String']>;
  vanityUrl: Maybe<Scalars['String']>;
};

export type SettingFilter = {
  AND?: Maybe<Array<SettingFilter>>;
  OR?: Maybe<Array<SettingFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  bgColor?: Maybe<StringPredicate>;
  buttonLinkColor?: Maybe<StringPredicate>;
  containerColor?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  currency?: Maybe<StringPredicate>;
  dateFormat?: Maybe<StringPredicate>;
  deletedAt?: Maybe<IntPredicate>;
  landingPageImage?: Maybe<FileFilter>;
  language?: Maybe<StringPredicate>;
  leftNavColor?: Maybe<StringPredicate>;
  menuBarBGColor?: Maybe<StringPredicate>;
  menuBarIconsColor?: Maybe<StringPredicate>;
  menuBarLogo?: Maybe<FileFilter>;
  passwordMinLength?: Maybe<IntPredicate>;
  passwordRequireLowercase?: Maybe<BoolPredicate>;
  passwordRequireNumbers?: Maybe<BoolPredicate>;
  passwordRequireSpecial?: Maybe<BoolPredicate>;
  passwordRequireUppercase?: Maybe<BoolPredicate>;
  passwordUpdateInterval?: Maybe<IntPredicate>;
  rememberDevice?: Maybe<StringPredicate>;
  timezone?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
  userInterfaceStyle?: Maybe<StringPredicate>;
  vanityUrl?: Maybe<StringPredicate>;
};

export type SettingGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: SettingGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type SettingGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  bgColor?: Maybe<Array<GroupByField>>;
  buttonLinkColor?: Maybe<Array<GroupByField>>;
  containerColor?: Maybe<Array<GroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  currency?: Maybe<Array<GroupByField>>;
  dateFormat?: Maybe<Array<GroupByField>>;
  landingPageImage?: Maybe<FileGroupByQuery>;
  language?: Maybe<Array<GroupByField>>;
  leftNavColor?: Maybe<Array<GroupByField>>;
  menuBarBGColor?: Maybe<Array<GroupByField>>;
  menuBarIconsColor?: Maybe<Array<GroupByField>>;
  menuBarLogo?: Maybe<FileGroupByQuery>;
  passwordMinLength?: Maybe<Array<GroupByField>>;
  passwordRequireLowercase?: Maybe<Array<GroupByField>>;
  passwordRequireNumbers?: Maybe<Array<GroupByField>>;
  passwordRequireSpecial?: Maybe<Array<GroupByField>>;
  passwordRequireUppercase?: Maybe<Array<GroupByField>>;
  passwordUpdateInterval?: Maybe<Array<GroupByField>>;
  rememberDevice?: Maybe<Array<GroupByField>>;
  timezone?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
  userInterfaceStyle?: Maybe<Array<GroupByField>>;
  vanityUrl?: Maybe<Array<GroupByField>>;
};

/** SettingListResponse output */
export type SettingListResponse = {
  __typename?: 'SettingListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<Setting>;
};

/** No longer supported. Use `sort` instead. */
export enum SettingOrderBy {
  BgColorAsc = 'bgColor_ASC',
  BgColorDesc = 'bgColor_DESC',
  ButtonLinkColorAsc = 'buttonLinkColor_ASC',
  ButtonLinkColorDesc = 'buttonLinkColor_DESC',
  ContainerColorAsc = 'containerColor_ASC',
  ContainerColorDesc = 'containerColor_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CurrencyAsc = 'currency_ASC',
  CurrencyDesc = 'currency_DESC',
  DateFormatAsc = 'dateFormat_ASC',
  DateFormatDesc = 'dateFormat_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LanguageAsc = 'language_ASC',
  LanguageDesc = 'language_DESC',
  LeftNavColorAsc = 'leftNavColor_ASC',
  LeftNavColorDesc = 'leftNavColor_DESC',
  MenuBarBgColorAsc = 'menuBarBGColor_ASC',
  MenuBarBgColorDesc = 'menuBarBGColor_DESC',
  MenuBarIconsColorAsc = 'menuBarIconsColor_ASC',
  MenuBarIconsColorDesc = 'menuBarIconsColor_DESC',
  PasswordMinLengthAsc = 'passwordMinLength_ASC',
  PasswordMinLengthDesc = 'passwordMinLength_DESC',
  PasswordRequireLowercaseAsc = 'passwordRequireLowercase_ASC',
  PasswordRequireLowercaseDesc = 'passwordRequireLowercase_DESC',
  PasswordRequireNumbersAsc = 'passwordRequireNumbers_ASC',
  PasswordRequireNumbersDesc = 'passwordRequireNumbers_DESC',
  PasswordRequireSpecialAsc = 'passwordRequireSpecial_ASC',
  PasswordRequireSpecialDesc = 'passwordRequireSpecial_DESC',
  PasswordRequireUppercaseAsc = 'passwordRequireUppercase_ASC',
  PasswordRequireUppercaseDesc = 'passwordRequireUppercase_DESC',
  PasswordUpdateIntervalAsc = 'passwordUpdateInterval_ASC',
  PasswordUpdateIntervalDesc = 'passwordUpdateInterval_DESC',
  RememberDeviceAsc = 'rememberDevice_ASC',
  RememberDeviceDesc = 'rememberDevice_DESC',
  TimezoneAsc = 'timezone_ASC',
  TimezoneDesc = 'timezone_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  UserInterfaceStyleAsc = 'userInterfaceStyle_ASC',
  UserInterfaceStyleDesc = 'userInterfaceStyle_DESC',
  VanityUrlAsc = 'vanityUrl_ASC',
  VanityUrlDesc = 'vanityUrl_DESC',
}

/** Settings subscription payload */
export type SettingPayload = {
  __typename?: 'SettingPayload';
  mutation: MutationType;
  node: Maybe<Setting>;
  previousValues: Maybe<Setting>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type SettingRelationFilter = {
  every?: Maybe<SettingFilter>;
  none?: Maybe<SettingFilter>;
  some?: Maybe<SettingFilter>;
};

export type SettingSort = {
  bgColor?: Maybe<SortOrder>;
  buttonLinkColor?: Maybe<SortOrder>;
  containerColor?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  currency?: Maybe<SortOrder>;
  dateFormat?: Maybe<SortOrder>;
  deletedAt?: Maybe<SortOrder>;
  landingPageImage?: Maybe<FileSort>;
  language?: Maybe<SortOrder>;
  leftNavColor?: Maybe<SortOrder>;
  menuBarBGColor?: Maybe<SortOrder>;
  menuBarIconsColor?: Maybe<SortOrder>;
  menuBarLogo?: Maybe<FileSort>;
  passwordMinLength?: Maybe<SortOrder>;
  passwordRequireLowercase?: Maybe<SortOrder>;
  passwordRequireNumbers?: Maybe<SortOrder>;
  passwordRequireSpecial?: Maybe<SortOrder>;
  passwordRequireUppercase?: Maybe<SortOrder>;
  passwordUpdateInterval?: Maybe<SortOrder>;
  rememberDevice?: Maybe<SortOrder>;
  timezone?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  userInterfaceStyle?: Maybe<SortOrder>;
  vanityUrl?: Maybe<SortOrder>;
};

/** Settings subscription filter */
export type SettingSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<SettingFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** Settings update input */
export type SettingUpdateInput = {
  bgColor?: Maybe<Scalars['String']>;
  buttonLinkColor?: Maybe<Scalars['String']>;
  containerColor?: Maybe<Scalars['String']>;
  currency?: Maybe<Scalars['String']>;
  dateFormat?: Maybe<Scalars['String']>;
  language?: Maybe<Scalars['String']>;
  leftNavColor?: Maybe<Scalars['String']>;
  menuBarBGColor?: Maybe<Scalars['String']>;
  menuBarIconsColor?: Maybe<Scalars['String']>;
  passwordMinLength?: Maybe<Scalars['Int']>;
  passwordRequireLowercase?: Maybe<Scalars['Boolean']>;
  passwordRequireNumbers?: Maybe<Scalars['Boolean']>;
  passwordRequireSpecial?: Maybe<Scalars['Boolean']>;
  passwordRequireUppercase?: Maybe<Scalars['Boolean']>;
  passwordUpdateInterval?: Maybe<Scalars['Int']>;
  rememberDevice?: Maybe<Scalars['String']>;
  timezone?: Maybe<Scalars['String']>;
  userInterfaceStyle?: Maybe<Scalars['String']>;
  vanityUrl?: Maybe<Scalars['String']>;
};

export type Setting_PermissionFilter = {
  AND?: Maybe<Array<Setting_PermissionFilter>>;
  OR?: Maybe<Array<Setting_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  bgColor?: Maybe<StringPredicate>;
  buttonLinkColor?: Maybe<StringPredicate>;
  containerColor?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  currency?: Maybe<StringPredicate>;
  dateFormat?: Maybe<StringPredicate>;
  deletedAt?: Maybe<IntPredicate>;
  landingPageImage?: Maybe<File_PermissionFilter>;
  language?: Maybe<StringPredicate>;
  leftNavColor?: Maybe<StringPredicate>;
  menuBarBGColor?: Maybe<StringPredicate>;
  menuBarIconsColor?: Maybe<StringPredicate>;
  menuBarLogo?: Maybe<File_PermissionFilter>;
  passwordMinLength?: Maybe<IntPredicate>;
  passwordRequireLowercase?: Maybe<BoolPredicate>;
  passwordRequireNumbers?: Maybe<BoolPredicate>;
  passwordRequireSpecial?: Maybe<BoolPredicate>;
  passwordRequireUppercase?: Maybe<BoolPredicate>;
  passwordUpdateInterval?: Maybe<IntPredicate>;
  rememberDevice?: Maybe<StringPredicate>;
  timezone?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
  userInterfaceStyle?: Maybe<StringPredicate>;
  vanityUrl?: Maybe<StringPredicate>;
};

export type Setting_PermissionRelationFilter = {
  every?: Maybe<Setting_PermissionFilter>;
  none?: Maybe<Setting_PermissionFilter>;
  some?: Maybe<Setting_PermissionFilter>;
};

export type ShortLink = {
  __typename?: 'ShortLink';
  _description: Maybe<Scalars['String']>;
  airtableId: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  description: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  resolvedUri: Maybe<Scalars['String']>;
  slug: Maybe<Scalars['String']>;
  target: Maybe<Scalars['String']>;
  type: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
  url: Maybe<Scalars['String']>;
};

/** ShortLink create input */
export type ShortLinkCreateInput = {
  airtableId?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  resolvedUri?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  target?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

/** ShortLink create many input */
export type ShortLinkCreateManyInput = {
  airtableId?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  resolvedUri?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  target?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

/** ShortLink delete input */
export type ShortLinkDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** ShortLinkFieldsPermissions create input */
export type ShortLinkFieldsPermissions = {
  airtableId?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['Boolean']>;
  description?: Maybe<Scalars['Boolean']>;
  resolvedUri?: Maybe<Scalars['Boolean']>;
  slug?: Maybe<Scalars['Boolean']>;
  target?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
  url?: Maybe<Scalars['Boolean']>;
};

export type ShortLinkFilter = {
  AND?: Maybe<Array<ShortLinkFilter>>;
  OR?: Maybe<Array<ShortLinkFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  airtableId?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  description?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  resolvedUri?: Maybe<StringPredicate>;
  slug?: Maybe<StringPredicate>;
  target?: Maybe<StringPredicate>;
  type?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
  url?: Maybe<StringPredicate>;
};

export type ShortLinkGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: ShortLinkGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type ShortLinkGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  airtableId?: Maybe<Array<GroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  description?: Maybe<Array<GroupByField>>;
  id?: Maybe<Array<GroupByField>>;
  resolvedUri?: Maybe<Array<GroupByField>>;
  slug?: Maybe<Array<GroupByField>>;
  target?: Maybe<Array<GroupByField>>;
  type?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
  url?: Maybe<Array<GroupByField>>;
};

export type ShortLinkKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** ShortLinkListResponse output */
export type ShortLinkListResponse = {
  __typename?: 'ShortLinkListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<ShortLink>;
};

/** ShortLinkManyResponse output */
export type ShortLinkManyResponse = {
  __typename?: 'ShortLinkManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<ShortLink>;
};

/** No longer supported. Use `sort` instead. */
export enum ShortLinkOrderBy {
  AirtableIdAsc = 'airtableId_ASC',
  AirtableIdDesc = 'airtableId_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  ResolvedUriAsc = 'resolvedUri_ASC',
  ResolvedUriDesc = 'resolvedUri_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  TargetAsc = 'target_ASC',
  TargetDesc = 'target_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC',
}

/** ShortLink subscription payload */
export type ShortLinkPayload = {
  __typename?: 'ShortLinkPayload';
  mutation: MutationType;
  node: Maybe<ShortLink>;
  previousValues: Maybe<ShortLink>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type ShortLinkSort = {
  airtableId?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  description?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  resolvedUri?: Maybe<SortOrder>;
  slug?: Maybe<SortOrder>;
  target?: Maybe<SortOrder>;
  type?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  url?: Maybe<SortOrder>;
};

/** ShortLink subscription filter */
export type ShortLinkSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<ShortLinkFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** ShortLink update input */
export type ShortLinkUpdateByFilterInput = {
  airtableId?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  description?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  resolvedUri?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  slug?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  target?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  type?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  url?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** ShortLink update input */
export type ShortLinkUpdateInput = {
  airtableId?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  resolvedUri?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  target?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

export type ShortLink_PermissionFilter = {
  AND?: Maybe<Array<ShortLink_PermissionFilter>>;
  OR?: Maybe<Array<ShortLink_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  airtableId?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  description?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  resolvedUri?: Maybe<StringPredicate>;
  slug?: Maybe<StringPredicate>;
  target?: Maybe<StringPredicate>;
  type?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
  url?: Maybe<StringPredicate>;
};

export type ShortUrl = {
  __typename?: 'ShortUrl';
  _description: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  index: Maybe<Scalars['Int']>;
  profile: Maybe<Profile>;
  school: Maybe<School>;
  slug: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
  url: Maybe<Scalars['String']>;
};

/** ShortUrl create input */
export type ShortUrlCreateInput = {
  profile?: Maybe<ShortUrlProfileRelationInput>;
  school?: Maybe<ShortUrlSchoolRelationInput>;
  slug: Scalars['String'];
  url?: Maybe<Scalars['String']>;
};

/** ShortUrl create many input */
export type ShortUrlCreateManyInput = {
  profile?: Maybe<ShortUrlProfileManyRelationInput>;
  school?: Maybe<ShortUrlSchoolManyRelationInput>;
  slug: Scalars['String'];
  url?: Maybe<Scalars['String']>;
};

/** ShortUrl delete input */
export type ShortUrlDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** ShortUrlFieldsPermissions create input */
export type ShortUrlFieldsPermissions = {
  createdAt?: Maybe<Scalars['Boolean']>;
  index?: Maybe<Scalars['Boolean']>;
  slug?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
  url?: Maybe<Scalars['Boolean']>;
};

export type ShortUrlFilter = {
  AND?: Maybe<Array<ShortUrlFilter>>;
  OR?: Maybe<Array<ShortUrlFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  index?: Maybe<IntPredicate>;
  profile?: Maybe<ProfileFilter>;
  school?: Maybe<SchoolFilter>;
  slug?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
  url?: Maybe<StringPredicate>;
};

export type ShortUrlGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: ShortUrlGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type ShortUrlGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  id?: Maybe<Array<GroupByField>>;
  index?: Maybe<Array<GroupByField>>;
  profile?: Maybe<ProfileGroupByQuery>;
  school?: Maybe<SchoolGroupByQuery>;
  slug?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
  url?: Maybe<Array<GroupByField>>;
};

export type ShortUrlKeyFilter = {
  id?: Maybe<Scalars['ID']>;
  index?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
};

/** ShortUrlListResponse output */
export type ShortUrlListResponse = {
  __typename?: 'ShortUrlListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<ShortUrl>;
};

/** ShortUrlManyResponse output */
export type ShortUrlManyResponse = {
  __typename?: 'ShortUrlManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<ShortUrl>;
};

/** No longer supported. Use `sort` instead. */
export enum ShortUrlOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IndexAsc = 'index_ASC',
  IndexDesc = 'index_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC',
}

/** ShortUrl subscription payload */
export type ShortUrlPayload = {
  __typename?: 'ShortUrlPayload';
  mutation: MutationType;
  node: Maybe<ShortUrl>;
  previousValues: Maybe<ShortUrl>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** ShortUrl relation input */
export type ShortUrlProfileManyRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
};

/** ShortUrl relation input */
export type ShortUrlProfileRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
  create?: Maybe<ProfileShortUrlRelation_ProfileCreateInput>;
};

/** ShortUrl relation input */
export type ShortUrlProfileUpdateRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
  create?: Maybe<ProfileShortUrlRelation_ProfileCreateInput>;
  disconnect?: Maybe<ProfileKeyFilter>;
  reconnect?: Maybe<ProfileKeyFilter>;
  update?: Maybe<ProfileShortUrlRelation_ProfileUpdateInput>;
};

export type ShortUrlRelationFilter = {
  every?: Maybe<ShortUrlFilter>;
  none?: Maybe<ShortUrlFilter>;
  some?: Maybe<ShortUrlFilter>;
};

/** ShortUrl relation input */
export type ShortUrlSchoolManyRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
};

/** ShortUrl relation input */
export type ShortUrlSchoolRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<SchoolShortUrlRelation_SchoolCreateInput>;
};

/** ShortUrl relation input */
export type ShortUrlSchoolUpdateRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<SchoolShortUrlRelation_SchoolCreateInput>;
  disconnect?: Maybe<SchoolKeyFilter>;
  reconnect?: Maybe<SchoolKeyFilter>;
  update?: Maybe<SchoolShortUrlRelation_SchoolUpdateInput>;
};

export type ShortUrlSort = {
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  index?: Maybe<SortOrder>;
  profile?: Maybe<ProfileSort>;
  school?: Maybe<SchoolSort>;
  slug?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  url?: Maybe<SortOrder>;
};

/** ShortUrl subscription filter */
export type ShortUrlSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<ShortUrlFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** ShortUrl update input */
export type ShortUrlUpdateByFilterInput = {
  index?: Maybe<Array<Maybe<UpdateByFilterIntInput>>>;
  slug?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  url?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** ShortUrl update input */
export type ShortUrlUpdateInput = {
  id?: Maybe<Scalars['ID']>;
  profile?: Maybe<ShortUrlProfileUpdateRelationInput>;
  school?: Maybe<ShortUrlSchoolUpdateRelationInput>;
  slug?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

export type ShortUrl_PermissionFilter = {
  AND?: Maybe<Array<ShortUrl_PermissionFilter>>;
  OR?: Maybe<Array<ShortUrl_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  index?: Maybe<IntPredicate>;
  profile?: Maybe<Profile_PermissionFilter>;
  school?: Maybe<School_PermissionFilter>;
  slug?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
  url?: Maybe<StringPredicate>;
};

export type ShortUrl_PermissionRelationFilter = {
  every?: Maybe<ShortUrl_PermissionFilter>;
  none?: Maybe<ShortUrl_PermissionFilter>;
  some?: Maybe<ShortUrl_PermissionFilter>;
};

export type SignUp = {
  __typename?: 'SignUp';
  _description: Maybe<Scalars['String']>;
  additionalInformation: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  email: Maybe<Scalars['String']>;
  fullName: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  phone: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

/** SignUp create input */
export type SignUpCreateInput = {
  additionalInformation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
};

/** SignUp create many input */
export type SignUpCreateManyInput = {
  additionalInformation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
};

/** SignUp delete input */
export type SignUpDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** SignUpFieldsPermissions create input */
export type SignUpFieldsPermissions = {
  additionalInformation?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['Boolean']>;
  email?: Maybe<Scalars['Boolean']>;
  fullName?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type SignUpFilter = {
  AND?: Maybe<Array<SignUpFilter>>;
  OR?: Maybe<Array<SignUpFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  additionalInformation?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  email?: Maybe<StringPredicate>;
  fullName?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  phone?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type SignUpGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: SignUpGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type SignUpGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  additionalInformation?: Maybe<Array<GroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  email?: Maybe<Array<GroupByField>>;
  fullName?: Maybe<Array<GroupByField>>;
  id?: Maybe<Array<GroupByField>>;
  phone?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

export type SignUpKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** SignUpListResponse output */
export type SignUpListResponse = {
  __typename?: 'SignUpListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<SignUp>;
};

/** SignUpManyResponse output */
export type SignUpManyResponse = {
  __typename?: 'SignUpManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<SignUp>;
};

/** No longer supported. Use `sort` instead. */
export enum SignUpOrderBy {
  AdditionalInformationAsc = 'additionalInformation_ASC',
  AdditionalInformationDesc = 'additionalInformation_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  EmailAsc = 'email_ASC',
  EmailDesc = 'email_DESC',
  FullNameAsc = 'fullName_ASC',
  FullNameDesc = 'fullName_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PhoneAsc = 'phone_ASC',
  PhoneDesc = 'phone_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** SignUp subscription payload */
export type SignUpPayload = {
  __typename?: 'SignUpPayload';
  mutation: MutationType;
  node: Maybe<SignUp>;
  previousValues: Maybe<SignUp>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** SignUpResendInput */
export type SignUpResendInput = {
  email: Scalars['String'];
};

export type SignUpSort = {
  additionalInformation?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  email?: Maybe<SortOrder>;
  fullName?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  phone?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
};

/** SignUp subscription filter */
export type SignUpSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<SignUpFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** SignUp update input */
export type SignUpUpdateByFilterInput = {
  additionalInformation?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  email?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  fullName?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  phone?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** SignUp update input */
export type SignUpUpdateInput = {
  additionalInformation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  phone?: Maybe<Scalars['String']>;
};

export type SignUp_PermissionFilter = {
  AND?: Maybe<Array<SignUp_PermissionFilter>>;
  OR?: Maybe<Array<SignUp_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  additionalInformation?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  email?: Maybe<StringPredicate>;
  fullName?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  phone?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

/** Smart Field Attributes */
export type SmartFieldTypeAttributes = {
  __typename?: 'SmartFieldTypeAttributes';
  format: Scalars['String'];
  innerFields: Maybe<Array<Maybe<CustomTableField>>>;
};

/** Smart Type Format Enum */
export enum SmartTypeFormatEnum {
  Address = 'ADDRESS',
  Phone = 'PHONE',
}

/** SortOrder */
export enum SortOrder {
  Asc = 'ASC',
  Desc = 'DESC',
}

export type StringPadFunctionArguments = {
  len: Scalars['Int'];
  str: Scalars['String'];
};

export type StringPredicate = {
  contains?: Maybe<Scalars['String']>;
  ends_with?: Maybe<Scalars['String']>;
  equals?: Maybe<Scalars['String']>;
  in?: Maybe<Array<Scalars['String']>>;
  is_empty?: Maybe<Scalars['Boolean']>;
  is_not_empty?: Maybe<Scalars['Boolean']>;
  not_contains?: Maybe<Scalars['String']>;
  not_ends_with?: Maybe<Scalars['String']>;
  not_equals?: Maybe<Scalars['String']>;
  not_in?: Maybe<Array<Scalars['String']>>;
  not_starts_with?: Maybe<Scalars['String']>;
  starts_with?: Maybe<Scalars['String']>;
};

export type StringPredicateHaving = {
  AND?: Maybe<Array<StringPredicateHaving>>;
  OR?: Maybe<Array<StringPredicateHaving>>;
  contains?: Maybe<Scalars['String']>;
  ends_with?: Maybe<Scalars['String']>;
  equals?: Maybe<Scalars['String']>;
  in?: Maybe<Array<Scalars['String']>>;
  is_empty?: Maybe<Scalars['Boolean']>;
  is_not_empty?: Maybe<Scalars['Boolean']>;
  not_contains?: Maybe<Scalars['String']>;
  not_ends_with?: Maybe<Scalars['String']>;
  not_equals?: Maybe<Scalars['String']>;
  not_in?: Maybe<Array<Scalars['String']>>;
  not_starts_with?: Maybe<Scalars['String']>;
  starts_with?: Maybe<Scalars['String']>;
};

export enum StringTrimMode {
  Both = 'BOTH',
  Leading = 'LEADING',
  Trailing = 'TRAILING',
}

export type StripeAccount = {
  __typename?: 'StripeAccount';
  _description: Maybe<Scalars['String']>;
  account: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  profile: Maybe<Profile>;
  status: Maybe<Scalars['String']>;
  type: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

/** StripeAccount create input */
export type StripeAccountCreateInput = {
  account: Scalars['String'];
  profile?: Maybe<StripeAccountProfileRelationInput>;
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** StripeAccount create many input */
export type StripeAccountCreateManyInput = {
  account: Scalars['String'];
  profile: StripeAccountProfileManyRelationInput;
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** StripeAccount delete input */
export type StripeAccountDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** StripeAccountFieldsPermissions create input */
export type StripeAccountFieldsPermissions = {
  account?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['Boolean']>;
  status?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type StripeAccountFilter = {
  AND?: Maybe<Array<StripeAccountFilter>>;
  OR?: Maybe<Array<StripeAccountFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  account?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  profile?: Maybe<ProfileFilter>;
  status?: Maybe<StringPredicate>;
  type?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type StripeAccountGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: StripeAccountGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type StripeAccountGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  account?: Maybe<Array<GroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  id?: Maybe<Array<GroupByField>>;
  profile?: Maybe<ProfileGroupByQuery>;
  status?: Maybe<Array<GroupByField>>;
  type?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

export type StripeAccountKeyFilter = {
  account?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
};

/** StripeAccountListResponse output */
export type StripeAccountListResponse = {
  __typename?: 'StripeAccountListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<StripeAccount>;
};

/** StripeAccountManyResponse output */
export type StripeAccountManyResponse = {
  __typename?: 'StripeAccountManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<StripeAccount>;
};

/** No longer supported. Use `sort` instead. */
export enum StripeAccountOrderBy {
  AccountAsc = 'account_ASC',
  AccountDesc = 'account_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** StripeAccount subscription payload */
export type StripeAccountPayload = {
  __typename?: 'StripeAccountPayload';
  mutation: MutationType;
  node: Maybe<StripeAccount>;
  previousValues: Maybe<StripeAccount>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** StripeAccount relation input */
export type StripeAccountProfileManyRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
};

/** StripeAccount relation input */
export type StripeAccountProfileRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
  create?: Maybe<StripeAccount_ProfileCreateInput>;
};

/** StripeAccount relation input */
export type StripeAccountProfileUpdateRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
  create?: Maybe<StripeAccount_ProfileCreateInput>;
  disconnect?: Maybe<ProfileKeyFilter>;
  reconnect?: Maybe<ProfileKeyFilter>;
  update?: Maybe<StripeAccount_ProfileUpdateInput>;
};

export type StripeAccountSort = {
  account?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  profile?: Maybe<ProfileSort>;
  status?: Maybe<SortOrder>;
  type?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
};

/** StripeAccount subscription filter */
export type StripeAccountSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<StripeAccountFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** StripeAccount update input */
export type StripeAccountUpdateByFilterInput = {
  account?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  status?: Maybe<Array<Maybe<UpdateByFilterStringSwitchInput>>>;
  type?: Maybe<Array<Maybe<UpdateByFilterStringSwitchInput>>>;
};

/** StripeAccount update input */
export type StripeAccountUpdateInput = {
  account?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  profile?: Maybe<StripeAccountProfileUpdateRelationInput>;
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type StripeAccount_PermissionFilter = {
  AND?: Maybe<Array<StripeAccount_PermissionFilter>>;
  OR?: Maybe<Array<StripeAccount_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  account?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  profile?: Maybe<Profile_PermissionFilter>;
  status?: Maybe<StringPredicate>;
  type?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

/** Profile create input from stripeAccount */
export type StripeAccount_ProfileCreateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8RelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24RelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Profile update input from stripeAccount */
export type StripeAccount_ProfileUpdateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsUpdateRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinUpdateRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassUpdateRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationUpdateRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileUpdateRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoUpdateRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolUpdateRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationUpdateRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamUpdateRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileUpdateRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallUpdateRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8UpdateRelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24UpdateRelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileUpdateRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountUpdateRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkUpdateRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationUpdateRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** School create input from stripeAccount */
export type StripeAccount_SchoolCreateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountRelationInput>;
  user?: Maybe<SchoolUserRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

/** School update input from stripeAccount */
export type StripeAccount_SchoolUpdateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationUpdateRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolUpdateRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolUpdateRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolUpdateRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerUpdateRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoUpdateRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsUpdateRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationUpdateRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationUpdateRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationUpdateRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileUpdateRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationUpdateRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamUpdateRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountUpdateRelationInput>;
  user?: Maybe<SchoolUserUpdateRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

export type Subscription = {
  __typename?: 'Subscription';
  Achievements: Maybe<AchievementPayload>;
  ApiTokens: Maybe<ApiTokenPayload>;
  AuthenticationProfiles: Maybe<AuthenticationProfilePayload>;
  AuthenticationSettings: Maybe<AuthenticationSettingPayload>;
  Brand: Maybe<BrandPayload>;
  Checkin: Maybe<CheckinPayload>;
  CiCdMigrations: Maybe<CiCdMigrationPayload>;
  Competition: Maybe<CompetitionPayload>;
  Countries: Maybe<CountryPayload>;
  Customer: Maybe<CustomerPayload>;
  Discount: Maybe<DiscountPayload>;
  EmailTemplate: Maybe<EmailTemplatePayload>;
  EnvironmentVariables: Maybe<EnvironmentVariablePayload>;
  Files: Maybe<FilePayload>;
  GroupalClass: Maybe<GroupalClassPayload>;
  LanguageCountry: Maybe<LanguageCountryPayload>;
  Languages: Maybe<LanguagePayload>;
  MartialArt: Maybe<MartialArtPayload>;
  Permissions: Maybe<PermissionPayload>;
  Plan: Maybe<PlanPayload>;
  PlanCategory: Maybe<PlanCategoryPayload>;
  PreSignup: Maybe<PreSignupPayload>;
  PrivateClassPurchase: Maybe<PrivateClassPurchasePayload>;
  PrivateClasses: Maybe<PrivateClassPayload>;
  Product: Maybe<ProductPayload>;
  ProductCategory: Maybe<ProductCategoryPayload>;
  ProductSubscription: Maybe<ProductSubscriptionPayload>;
  Profile: Maybe<ProfilePayload>;
  Rank: Maybe<RankPayload>;
  RankIssued: Maybe<RankIssuedPayload>;
  Roles: Maybe<RolePayload>;
  Schedule: Maybe<SchedulePayload>;
  School: Maybe<SchoolPayload>;
  SchoolMartialArt: Maybe<SchoolMartialArtPayload>;
  SchoolProfile: Maybe<SchoolProfilePayload>;
  SchoolStripeAccount: Maybe<SchoolStripeAccountPayload>;
  SchoolTeam: Maybe<SchoolTeamPayload>;
  Settings: Maybe<SettingPayload>;
  ShortLink: Maybe<ShortLinkPayload>;
  ShortUrl: Maybe<ShortUrlPayload>;
  SignUp: Maybe<SignUpPayload>;
  StripeAccount: Maybe<StripeAccountPayload>;
  Team: Maybe<TeamPayload>;
  TeamMembers: Maybe<TeamMemberPayload>;
  TeamProfile: Maybe<TeamProfilePayload>;
  Text: Maybe<TextPayload>;
  Unknow: Maybe<UnknowPayload>;
  UserProfile: Maybe<UserProfilePayload>;
  UserSchool: Maybe<UserSchoolPayload>;
  Users: Maybe<UserPayload>;
  Video: Maybe<VideoPayload>;
  VideoLink: Maybe<VideoLinkPayload>;
  WaitingList: Maybe<WaitingListPayload>;
  XCustomer: Maybe<XCustomerPayload>;
  XSchoolCustomer: Maybe<XSchoolCustomerPayload>;
};

export type SubscriptionAchievementsArgs = {
  filter?: Maybe<AchievementSubscriptionFilter>;
};

export type SubscriptionApiTokensArgs = {
  filter?: Maybe<ApiTokenSubscriptionFilter>;
};

export type SubscriptionAuthenticationProfilesArgs = {
  filter?: Maybe<AuthenticationProfileSubscriptionFilter>;
};

export type SubscriptionAuthenticationSettingsArgs = {
  filter?: Maybe<AuthenticationSettingSubscriptionFilter>;
};

export type SubscriptionBrandArgs = {
  filter?: Maybe<BrandSubscriptionFilter>;
};

export type SubscriptionCheckinArgs = {
  filter?: Maybe<CheckinSubscriptionFilter>;
};

export type SubscriptionCiCdMigrationsArgs = {
  filter?: Maybe<CiCdMigrationSubscriptionFilter>;
};

export type SubscriptionCompetitionArgs = {
  filter?: Maybe<CompetitionSubscriptionFilter>;
};

export type SubscriptionCountriesArgs = {
  filter?: Maybe<CountrySubscriptionFilter>;
};

export type SubscriptionCustomerArgs = {
  filter?: Maybe<CustomerSubscriptionFilter>;
};

export type SubscriptionDiscountArgs = {
  filter?: Maybe<DiscountSubscriptionFilter>;
};

export type SubscriptionEmailTemplateArgs = {
  filter?: Maybe<EmailTemplateSubscriptionFilter>;
};

export type SubscriptionEnvironmentVariablesArgs = {
  filter?: Maybe<EnvironmentVariableSubscriptionFilter>;
};

export type SubscriptionFilesArgs = {
  filter?: Maybe<FileSubscriptionFilter>;
};

export type SubscriptionGroupalClassArgs = {
  filter?: Maybe<GroupalClassSubscriptionFilter>;
};

export type SubscriptionLanguageCountryArgs = {
  filter?: Maybe<LanguageCountrySubscriptionFilter>;
};

export type SubscriptionLanguagesArgs = {
  filter?: Maybe<LanguageSubscriptionFilter>;
};

export type SubscriptionMartialArtArgs = {
  filter?: Maybe<MartialArtSubscriptionFilter>;
};

export type SubscriptionPermissionsArgs = {
  filter?: Maybe<PermissionSubscriptionFilter>;
};

export type SubscriptionPlanArgs = {
  filter?: Maybe<PlanSubscriptionFilter>;
};

export type SubscriptionPlanCategoryArgs = {
  filter?: Maybe<PlanCategorySubscriptionFilter>;
};

export type SubscriptionPreSignupArgs = {
  filter?: Maybe<PreSignupSubscriptionFilter>;
};

export type SubscriptionPrivateClassPurchaseArgs = {
  filter?: Maybe<PrivateClassPurchaseSubscriptionFilter>;
};

export type SubscriptionPrivateClassesArgs = {
  filter?: Maybe<PrivateClassSubscriptionFilter>;
};

export type SubscriptionProductArgs = {
  filter?: Maybe<ProductSubscriptionFilter>;
};

export type SubscriptionProductCategoryArgs = {
  filter?: Maybe<ProductCategorySubscriptionFilter>;
};

export type SubscriptionProductSubscriptionArgs = {
  filter?: Maybe<ProductSubscriptionSubscriptionFilter>;
};

export type SubscriptionProfileArgs = {
  filter?: Maybe<ProfileSubscriptionFilter>;
};

export type SubscriptionRankArgs = {
  filter?: Maybe<RankSubscriptionFilter>;
};

export type SubscriptionRankIssuedArgs = {
  filter?: Maybe<RankIssuedSubscriptionFilter>;
};

export type SubscriptionRolesArgs = {
  filter?: Maybe<RoleSubscriptionFilter>;
};

export type SubscriptionScheduleArgs = {
  filter?: Maybe<ScheduleSubscriptionFilter>;
};

export type SubscriptionSchoolArgs = {
  filter?: Maybe<SchoolSubscriptionFilter>;
};

export type SubscriptionSchoolMartialArtArgs = {
  filter?: Maybe<SchoolMartialArtSubscriptionFilter>;
};

export type SubscriptionSchoolProfileArgs = {
  filter?: Maybe<SchoolProfileSubscriptionFilter>;
};

export type SubscriptionSchoolStripeAccountArgs = {
  filter?: Maybe<SchoolStripeAccountSubscriptionFilter>;
};

export type SubscriptionSchoolTeamArgs = {
  filter?: Maybe<SchoolTeamSubscriptionFilter>;
};

export type SubscriptionSettingsArgs = {
  filter?: Maybe<SettingSubscriptionFilter>;
};

export type SubscriptionShortLinkArgs = {
  filter?: Maybe<ShortLinkSubscriptionFilter>;
};

export type SubscriptionShortUrlArgs = {
  filter?: Maybe<ShortUrlSubscriptionFilter>;
};

export type SubscriptionSignUpArgs = {
  filter?: Maybe<SignUpSubscriptionFilter>;
};

export type SubscriptionStripeAccountArgs = {
  filter?: Maybe<StripeAccountSubscriptionFilter>;
};

export type SubscriptionTeamArgs = {
  filter?: Maybe<TeamSubscriptionFilter>;
};

export type SubscriptionTeamMembersArgs = {
  filter?: Maybe<TeamMemberSubscriptionFilter>;
};

export type SubscriptionTeamProfileArgs = {
  filter?: Maybe<TeamProfileSubscriptionFilter>;
};

export type SubscriptionTextArgs = {
  filter?: Maybe<TextSubscriptionFilter>;
};

export type SubscriptionUnknowArgs = {
  filter?: Maybe<UnknowSubscriptionFilter>;
};

export type SubscriptionUserProfileArgs = {
  filter?: Maybe<UserProfileSubscriptionFilter>;
};

export type SubscriptionUserSchoolArgs = {
  filter?: Maybe<UserSchoolSubscriptionFilter>;
};

export type SubscriptionUsersArgs = {
  filter?: Maybe<UserSubscriptionFilter>;
};

export type SubscriptionVideoArgs = {
  filter?: Maybe<VideoSubscriptionFilter>;
};

export type SubscriptionVideoLinkArgs = {
  filter?: Maybe<VideoLinkSubscriptionFilter>;
};

export type SubscriptionWaitingListArgs = {
  filter?: Maybe<WaitingListSubscriptionFilter>;
};

export type SubscriptionXCustomerArgs = {
  filter?: Maybe<XCustomerSubscriptionFilter>;
};

export type SubscriptionXSchoolCustomerArgs = {
  filter?: Maybe<XSchoolCustomerSubscriptionFilter>;
};

export type SubstringFunctionArguments = {
  len?: Maybe<Scalars['Int']>;
  pos: Scalars['Int'];
};

export type SuccessResponse = {
  __typename?: 'SuccessResponse';
  success: Maybe<Scalars['Boolean']>;
};

/** Switch Field Attributes */
export type SwitchFieldTypeAttributes = {
  __typename?: 'SwitchFieldTypeAttributes';
  format: Scalars['String'];
  listOptions: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** Switch Type Format Enum */
export enum SwitchTypeFormatEnum {
  ActiveInactive = 'ACTIVE_INACTIVE',
  Custom = 'CUSTOM',
  HighLow = 'HIGH_LOW',
  OnOff = 'ON_OFF',
  TrueFalse = 'TRUE_FALSE',
  YesNo = 'YES_NO',
}

/** Application */
export type SystemApplication = {
  __typename?: 'SystemApplication';
  appType: Scalars['String'];
  createdAt: Scalars['DateTime'];
  description: Maybe<Scalars['String']>;
  displayName: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  status: SystemApplicationStatusEnum;
};

/** ApplicationDeleteMutationInput */
export type SystemApplicationDeleteMutationInput = {
  force?: Maybe<Scalars['Boolean']>;
  id: Scalars['String'];
};

/** Application install input */
export type SystemApplicationInstallInput = {
  appType: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  status?: Maybe<SystemApplicationStatusEnum>;
};

/** SystemApplicationListResponse output */
export type SystemApplicationListResponse = {
  __typename?: 'SystemApplicationListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<SystemApplication>;
};

/** Application Status Enum */
export enum SystemApplicationStatusEnum {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
}

/** Application update input */
export type SystemApplicationUpdateInput = {
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  status?: Maybe<SystemApplicationStatusEnum>;
};

export type SystemBillingCurrentPlanResponse = {
  __typename?: 'SystemBillingCurrentPlanResponse';
  displayName: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
  nextPlan: Maybe<SystemBillingNextPlanResponse>;
  price: Maybe<Scalars['Int']>;
  status: Maybe<SystemWorkspaceStatus>;
  trialEnd: Maybe<Scalars['DateTime']>;
};

export type SystemBillingDetailsResponse = {
  __typename?: 'SystemBillingDetailsResponse';
  brand: Maybe<Scalars['String']>;
  expMonth: Maybe<Scalars['Int']>;
  expYear: Maybe<Scalars['Int']>;
  last4: Maybe<Scalars['String']>;
};

/** BillingDetailsUpdateMutationInput */
export type SystemBillingDetailsUpdateMutationInput = {
  cardToken: Scalars['String'];
};

export type SystemBillingInvoiceItem = {
  __typename?: 'SystemBillingInvoiceItem';
  amountDue: Maybe<Scalars['Float']>;
  amountPaid: Maybe<Scalars['Float']>;
  amountRemaining: Maybe<Scalars['Float']>;
  description: Maybe<Scalars['String']>;
  endingBalance: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  invoicePdf: Maybe<Scalars['String']>;
  number: Maybe<Scalars['String']>;
  organization: Maybe<SystemBillingInvoiceItemOrganizationInfo>;
  paid: Maybe<Scalars['Boolean']>;
  periodEnd: Maybe<Scalars['DateTime']>;
  periodStart: Maybe<Scalars['DateTime']>;
  plan: Maybe<SystemBillingInvoiceItemPlanInfo>;
  status: Maybe<Scalars['String']>;
  total: Maybe<Scalars['Float']>;
  workspace: Maybe<SystemBillingInvoiceItemWorkspaceInfo>;
};

export type SystemBillingInvoiceItemOrganizationInfo = {
  __typename?: 'SystemBillingInvoiceItemOrganizationInfo';
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
};

export type SystemBillingInvoiceItemPlanInfo = {
  __typename?: 'SystemBillingInvoiceItemPlanInfo';
  displayName: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
};

export type SystemBillingInvoiceItemWorkspaceInfo = {
  __typename?: 'SystemBillingInvoiceItemWorkspaceInfo';
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
};

export enum SystemBillingInvoicesListFilterType {
  Customer = 'CUSTOMER',
  Workspace = 'WORKSPACE',
}

/** SystemBillingInvoicesListResponse output */
export type SystemBillingInvoicesListResponse = {
  __typename?: 'SystemBillingInvoicesListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<SystemBillingInvoiceItem>;
};

export type SystemBillingLimitMetricItem = {
  __typename?: 'SystemBillingLimitMetricItem';
  displayName: Maybe<Scalars['String']>;
  name: Maybe<Scalars['String']>;
  showPriority: Maybe<Scalars['Int']>;
  unit: Maybe<Scalars['String']>;
};

export type SystemBillingMetricUsageItem = {
  __typename?: 'SystemBillingMetricUsageItem';
  limitMetric: Maybe<SystemBillingLimitMetricItem>;
  value: Maybe<Scalars['Float']>;
};

export type SystemBillingMetricUsageQuotaItem = {
  __typename?: 'SystemBillingMetricUsageQuotaItem';
  limitMetric: Maybe<SystemBillingLimitMetricItem>;
  value: Maybe<Scalars['Float']>;
};

/** SystemBillingMetricUsageQuotasListResponse output */
export type SystemBillingMetricUsageQuotasListResponse = {
  __typename?: 'SystemBillingMetricUsageQuotasListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<SystemBillingMetricUsageQuotaItem>;
};

export type SystemBillingMetricUsagesListFilter = {
  entryDate: DateTimePredicate;
};

/** SystemBillingMetricUsagesListResponse output */
export type SystemBillingMetricUsagesListResponse = {
  __typename?: 'SystemBillingMetricUsagesListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<SystemBillingMetricUsageItem>;
};

export type SystemBillingNextPlanResponse = {
  __typename?: 'SystemBillingNextPlanResponse';
  displayName: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
  price: Maybe<Scalars['Int']>;
};

export type SystemBillingPlanBaseInfo = {
  __typename?: 'SystemBillingPlanBaseInfo';
  description: Maybe<Scalars['String']>;
  displayName: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  isCustom: Maybe<Scalars['Boolean']>;
  isLegacy: Maybe<Scalars['Boolean']>;
  limitMetrics: Maybe<Array<Maybe<SystemBillingPlanLimitMetricItem>>>;
  name: Maybe<Scalars['String']>;
  price: Maybe<Scalars['Int']>;
};

export type SystemBillingPlanBaseScalarInfo = {
  __typename?: 'SystemBillingPlanBaseScalarInfo';
  description: Maybe<Scalars['String']>;
  displayName: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  name: Maybe<Scalars['String']>;
  price: Maybe<Scalars['Int']>;
};

export type SystemBillingPlanLimitMetricItem = {
  __typename?: 'SystemBillingPlanLimitMetricItem';
  displayName: Maybe<Scalars['String']>;
  hardLimit: Maybe<Scalars['Float']>;
  name: Maybe<Scalars['String']>;
  overagePrice: Maybe<Scalars['Int']>;
  softLimit: Maybe<Scalars['Float']>;
};

/** BillingPlanUpdateMutationInput */
export type SystemBillingPlanUpdateMutationInput = {
  planId: Scalars['ID'];
};

export enum SystemBranchEnvironmentMode {
  Full = 'FULL',
  System = 'SYSTEM',
}

/** Ci Commit Mode */
export enum SystemCiCommitMode {
  Full = 'FULL',
  OnlyMigrations = 'ONLY_MIGRATIONS',
  OnlyProject = 'ONLY_PROJECT',
}

/** Ci Status */
export type SystemCiStatusOutput = {
  __typename?: 'SystemCiStatusOutput';
  migrations: Maybe<Array<Maybe<Scalars['String']>>>;
  status: Scalars['String'];
};

/** Computed field mode */
export enum SystemComputedFieldMode {
  Stored = 'STORED',
  Virtual = 'VIRTUAL',
}

/** Custom Table Field Type */
export type SystemCustomTableField = {
  __typename?: 'SystemCustomTableField';
  computedMode: Maybe<SystemComputedFieldMode>;
  defaultValue: Maybe<Scalars['String']>;
  description: Maybe<Scalars['String']>;
  displayName: Maybe<Scalars['String']>;
  expression: Maybe<Scalars['String']>;
  fieldType: Maybe<SystemFieldType>;
  fieldTypeAttributes: Maybe<SystemFieldTypeAttributes>;
  isList: Scalars['Boolean'];
  isRequired: Scalars['Boolean'];
  isUnique: Maybe<Scalars['Boolean']>;
  name: Maybe<Scalars['String']>;
};

/** Date Field Attributes */
export type SystemDateFieldTypeAttributes = {
  __typename?: 'SystemDateFieldTypeAttributes';
  format: Scalars['String'];
};

/** Date Type Format Enum */
export enum SystemDateTypeFormatEnum {
  Date = 'DATE',
  Datetime = 'DATETIME',
}

/** DeployDataResponse */
export type SystemDeployDataResponse = {
  __typename?: 'SystemDeployDataResponse';
  buildName: Scalars['String'];
  uploadBuildUrl: Scalars['String'];
  uploadMetaDataUrl: Scalars['String'];
};

export enum SystemDeployModeEnum {
  Full = 'FULL',
  Functions = 'FUNCTIONS',
  Migrations = 'MIGRATIONS',
  OnlyPlugins = 'ONLY_PLUGINS',
  OnlyProject = 'ONLY_PROJECT',
}

/** DeployOptions */
export type SystemDeployOptions = {
  extensionNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  mode?: Maybe<SystemDeployModeEnum>;
  pluginNames?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export enum SystemDeployStatusEnum {
  Compiling = 'compiling',
  CompleteError = 'complete_error',
  CompleteSuccess = 'complete_success',
  Deploying = 'deploying',
  Initialize = 'initialize',
  Preparing = 'preparing',
}

/** SystemDeployStatusResult */
export type SystemDeployStatusResult = {
  __typename?: 'SystemDeployStatusResult';
  message: Maybe<Scalars['String']>;
  status: SystemDeployStatusEnum;
};

/** DeployingBuildInput */
export type SystemDeployingBuildInput = {
  buildName: Scalars['String'];
  options?: Maybe<SystemDeployOptions>;
};

/** SystemEnvironmentBackupListResponse output */
export type SystemEnvironmentBackupListResponse = {
  __typename?: 'SystemEnvironmentBackupListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<EnvironmentBackupItem>;
};

export type SystemEnvironmentMember = {
  __typename?: 'SystemEnvironmentMember';
  avatar: Maybe<SystemEnvironmentMemberAvatar>;
  createdAt: Maybe<Scalars['DateTime']>;
  email: Scalars['String'];
  firstName: Maybe<Scalars['String']>;
  lastName: Maybe<Scalars['String']>;
  permissions: Maybe<SystemEnvironmentMemberPermissionsList>;
  roles: Maybe<SystemEnvironmentMemberRolesList>;
  status: Scalars['String'];
};

export type SystemEnvironmentMemberAvatar = {
  __typename?: 'SystemEnvironmentMemberAvatar';
  downloadUrl: Maybe<Scalars['String']>;
  id: Maybe<Scalars['String']>;
};

export type SystemEnvironmentMemberFilter = {
  email: Scalars['String'];
};

export type SystemEnvironmentMemberPermission = {
  __typename?: 'SystemEnvironmentMemberPermission';
  permission: Maybe<Scalars['JSON']>;
  resource: Maybe<Scalars['String']>;
  resourceType: Maybe<Scalars['String']>;
};

export type SystemEnvironmentMemberPermissionsList = {
  __typename?: 'SystemEnvironmentMemberPermissionsList';
  count: Scalars['Int'];
  items: Maybe<Array<SystemEnvironmentMemberPermission>>;
};

export type SystemEnvironmentMemberRole = {
  __typename?: 'SystemEnvironmentMemberRole';
  id: Scalars['String'];
  name: Scalars['String'];
};

export type SystemEnvironmentMemberRoleIdFilterPredicate = {
  equals?: Maybe<Scalars['ID']>;
  not_equals?: Maybe<Scalars['ID']>;
};

export type SystemEnvironmentMemberRolesList = {
  __typename?: 'SystemEnvironmentMemberRolesList';
  count: Scalars['Int'];
  items: Maybe<Array<SystemEnvironmentMemberRole>>;
};

export type SystemEnvironmentMemberUpdateData = {
  roles?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type SystemEnvironmentMembersFilter = {
  email: Scalars['String'];
};

export type SystemEnvironmentMembersListFilter = {
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  roleId?: Maybe<SystemEnvironmentMemberRoleIdFilterPredicate>;
};

/** SystemEnvironmentMembersListResponse output */
export type SystemEnvironmentMembersListResponse = {
  __typename?: 'SystemEnvironmentMembersListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<SystemEnvironmentMember>;
};

export type SystemEnvironmentMembersListSort = {
  email?: Maybe<SortOrder>;
  firstName?: Maybe<SortOrder>;
  isOwner?: Maybe<SortOrder>;
  lastName?: Maybe<SortOrder>;
  status?: Maybe<SortOrder>;
};

export type SystemEnvironmentRoleBaseInfo = {
  __typename?: 'SystemEnvironmentRoleBaseInfo';
  id: Scalars['String'];
  name: Scalars['String'];
};

export type SystemEnvironmentRoleList = {
  __typename?: 'SystemEnvironmentRoleList';
  environmentId: Scalars['String'];
  environmentName: Scalars['String'];
  exists: Maybe<Scalars['Boolean']>;
  roles: Maybe<Array<Maybe<SystemEnvironmentRoleBaseInfo>>>;
};

export type SystemEnvironmentSettings = {
  __typename?: 'SystemEnvironmentSettings';
  deleteLock: Maybe<Scalars['Boolean']>;
  fileManagementProvider: Maybe<Scalars['String']>;
};

/** SystemEnvironmentsListResponse output */
export type SystemEnvironmentsListResponse = {
  __typename?: 'SystemEnvironmentsListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<EnvironmentItem>;
};

/** Field Data Features */
export type SystemFieldDataFeatures = {
  __typename?: 'SystemFieldDataFeatures';
  create: Scalars['Boolean'];
  sort: Scalars['Boolean'];
  update: Scalars['Boolean'];
};

/** Field Schema Features */
export type SystemFieldSchemaFeatures = {
  __typename?: 'SystemFieldSchemaFeatures';
  delete: Scalars['Boolean'];
  update: Scalars['Boolean'];
};

/** Field types */
export enum SystemFieldType {
  Date = 'DATE',
  File = 'FILE',
  Geo = 'GEO',
  Id = 'ID',
  Json = 'JSON',
  MissingRelation = 'MISSING_RELATION',
  Number = 'NUMBER',
  OneWayRelation = 'ONE_WAY_RELATION',
  Relation = 'RELATION',
  Smart = 'SMART',
  Switch = 'SWITCH',
  Text = 'TEXT',
  Uuid = 'UUID',
}

/** Field Type Attributes */
export type SystemFieldTypeAttributes =
  | SystemDateFieldTypeAttributes
  | SystemFileFieldTypeAttributes
  | SystemGeoFieldTypeAttributes
  | SystemMissingRelationFieldTypeAttributes
  | SystemNumberFieldTypeAttributes
  | SystemSmartFieldTypeAttributes
  | SystemSwitchFieldTypeAttributes
  | SystemTextFieldTypeAttributes
  | SystemUuidFieldTypeAttributes;

/** Field Type Attributes Input */
export type SystemFieldTypeAttributesInput = {
  autoIncrement?: Maybe<Scalars['Boolean']>;
  currency?: Maybe<Scalars['String']>;
  expiration?: Maybe<Scalars['Int']>;
  fieldSize?: Maybe<Scalars['Int']>;
  format?: Maybe<Scalars['String']>;
  isBigInt?: Maybe<Scalars['Boolean']>;
  listOptions?: Maybe<Array<Scalars['String']>>;
  maxSize?: Maybe<Scalars['Int']>;
  maxValue?: Maybe<Scalars['Float']>;
  minValue?: Maybe<Scalars['Float']>;
  precision?: Maybe<Scalars['Int']>;
  srid?: Maybe<Scalars['Int']>;
  typeRestrictions?: Maybe<Array<Scalars['String']>>;
};

/** File Field Attributes */
export type SystemFileFieldTypeAttributes = {
  __typename?: 'SystemFileFieldTypeAttributes';
  expiration: Maybe<Scalars['Int']>;
  format: Scalars['String'];
  maxSize: Maybe<Scalars['Int']>;
  /** @deprecated Field is deprecated */
  showTitle: Maybe<Scalars['Boolean']>;
  /** @deprecated Field is deprecated */
  showUrl: Maybe<Scalars['Boolean']>;
  typeRestrictions: Maybe<Array<Scalars['String']>>;
};

/** File Type Format Enum */
export enum SystemFileTypeFormatEnum {
  File = 'FILE',
  Image = 'IMAGE',
}

export type SystemFrontendPlanIdItem = {
  __typename?: 'SystemFrontendPlanIdItem';
  id: Maybe<Scalars['ID']>;
};

/** FunctionInfo */
export type SystemFunctionInfo = {
  application: Maybe<SystemApplication>;
  description: Maybe<Scalars['String']>;
  functionType: SystemFunctionType;
  name: Scalars['String'];
};

/** FunctionInfoFilter */
export type SystemFunctionInfoFilter = {
  description?: Maybe<Scalars['String']>;
  functionType?: Maybe<SystemFunctionType>;
  name?: Maybe<Scalars['String']>;
};

/** FunctionInfoOrderBy */
export enum SystemFunctionInfoOrderBy {
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  FunctionTypeAsc = 'functionType_ASC',
  FunctionTypeDesc = 'functionType_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
}

/** SystemFunctionListResponse output */
export type SystemFunctionListResponse = {
  __typename?: 'SystemFunctionListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<SystemFunctionInfo>;
};

/** FunctionLogEntry */
export type SystemFunctionLogEntry = {
  __typename?: 'SystemFunctionLogEntry';
  message: Maybe<Scalars['String']>;
  timestamp: Maybe<Scalars['DateTime']>;
};

/** FunctionResolverInfo */
export type SystemFunctionResolverInfo = SystemFunctionInfo & {
  __typename?: 'SystemFunctionResolverInfo';
  application: Maybe<SystemApplication>;
  description: Maybe<Scalars['String']>;
  functionType: SystemFunctionType;
  gqlType: Scalars['String'];
  name: Scalars['String'];
};

/** FunctionTaskInfo */
export type SystemFunctionTaskInfo = SystemFunctionInfo & {
  __typename?: 'SystemFunctionTaskInfo';
  application: Maybe<SystemApplication>;
  description: Maybe<Scalars['String']>;
  functionType: SystemFunctionType;
  name: Scalars['String'];
  scheduleExpression: Maybe<Scalars['String']>;
};

/** FunctionTriggerInfo */
export type SystemFunctionTriggerInfo = SystemFunctionInfo & {
  __typename?: 'SystemFunctionTriggerInfo';
  application: Maybe<SystemApplication>;
  description: Maybe<Scalars['String']>;
  functionType: SystemFunctionType;
  name: Scalars['String'];
  operation: Scalars['String'];
  tableName: Scalars['String'];
  type: Scalars['String'];
};

/** FunctionType */
export enum SystemFunctionType {
  Resolver = 'resolver',
  Schedule = 'schedule',
  Task = 'task',
  Trigger = 'trigger',
  Webhook = 'webhook',
}

/** FunctionWebhookInfo */
export type SystemFunctionWebhookInfo = SystemFunctionInfo & {
  __typename?: 'SystemFunctionWebhookInfo';
  application: Maybe<SystemApplication>;
  description: Maybe<Scalars['String']>;
  functionType: SystemFunctionType;
  httpMethod: Scalars['String'];
  name: Scalars['String'];
  workspaceFullPath: Scalars['String'];
  workspaceRelativePath: Scalars['String'];
};

/** Diff Environment Input */
export type SystemGenerateEnvironmentOutput = {
  __typename?: 'SystemGenerateEnvironmentOutput';
  url: Maybe<Scalars['String']>;
};

/** Geo Field Attributes */
export type SystemGeoFieldTypeAttributes = {
  __typename?: 'SystemGeoFieldTypeAttributes';
  format: Scalars['String'];
  srid: Maybe<Scalars['Int']>;
};

export type SystemInboxEventDetailsUnion =
  | SystemInboxEventEnvironmentInvitationDetails
  | SystemInboxEventNotificationDetailsType
  | SystemInboxEventOrganizationInvitationDetails;

export type SystemInboxEventEnvironmentInvitationDetails = {
  __typename?: 'SystemInboxEventEnvironmentInvitationDetails';
  environmentName: Maybe<Scalars['String']>;
  invitedBy: Maybe<SystemInboxEventInvitedBy>;
  status: Maybe<SystemInboxEventStatusEnum>;
  uuid: Maybe<Scalars['String']>;
  workspace: Maybe<SystemInboxEventWorkspace>;
};

export type SystemInboxEventInvitedBy = {
  __typename?: 'SystemInboxEventInvitedBy';
  avatar: Maybe<GraphQlFileItemResponse>;
  email: Maybe<Scalars['String']>;
  firstName: Maybe<Scalars['String']>;
  lastName: Maybe<Scalars['String']>;
};

export type SystemInboxEventItem = {
  __typename?: 'SystemInboxEventItem';
  createdAt: Scalars['DateTime'];
  details: Maybe<SystemInboxEventDetailsUnion>;
  id: Scalars['ID'];
  isCompleted: Maybe<Scalars['Boolean']>;
  type: Maybe<SystemInboxEventTypeEnum>;
};

export type SystemInboxEventNotificationDetailsType = {
  __typename?: 'SystemInboxEventNotificationDetailsType';
  details: Maybe<Scalars['JSON']>;
  kind: Maybe<Scalars['String']>;
};

export type SystemInboxEventOrganization = {
  __typename?: 'SystemInboxEventOrganization';
  avatar: Maybe<GraphQlFileItemResponse>;
  id: Scalars['ID'];
  name: Maybe<Scalars['String']>;
};

export type SystemInboxEventOrganizationInvitationDetails = {
  __typename?: 'SystemInboxEventOrganizationInvitationDetails';
  invitedBy: Maybe<SystemInboxEventInvitedBy>;
  organization: Maybe<SystemInboxEventOrganization>;
  status: Maybe<SystemInboxEventStatusEnum>;
  uuid: Maybe<Scalars['String']>;
};

export enum SystemInboxEventStatusEnum {
  Accepted = 'accepted',
  Declined = 'declined',
  Sent = 'sent',
}

export enum SystemInboxEventTypeEnum {
  EnvironmentInvitation = 'EnvironmentInvitation',
  Notification = 'Notification',
  OrganizationInvitation = 'OrganizationInvitation',
}

export type SystemInboxEventWorkspace = {
  __typename?: 'SystemInboxEventWorkspace';
  apiHost: Maybe<Scalars['String']>;
  avatar: Maybe<GraphQlFileItemResponse>;
  id: Scalars['ID'];
  name: Maybe<Scalars['String']>;
};

/** SystemInboxEventsListResponse output */
export type SystemInboxEventsListResponse = {
  __typename?: 'SystemInboxEventsListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<SystemInboxEventItem>;
};

/** Table Create Index Input */
export type SystemIndexCreateInput = {
  columns: Array<SystemTableIndexColumnInput>;
  force?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  tableId: Scalars['ID'];
  type: TableIndexType;
};

/** Table Delete Index Input */
export type SystemIndexDeleteInput = {
  id: Scalars['ID'];
};

/** Table Update Index Input */
export type SystemIndexUpdateInput = {
  columns?: Maybe<Array<SystemTableIndexColumnInput>>;
  force?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  type?: Maybe<TableIndexType>;
};

/** Invite members input */
export type SystemInviteMembersInput = {
  recipients: Array<SystemInviteRecipientInput>;
};

/** Invite recipient input */
export type SystemInviteRecipientInput = {
  email: Scalars['String'];
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  roles?: Maybe<Array<Scalars['ID']>>;
};

/** Invited By Name */
export type SystemInvitedByName = {
  __typename?: 'SystemInvitedByName';
  email: Maybe<Scalars['String']>;
  firstName: Maybe<Scalars['String']>;
  lastName: Maybe<Scalars['String']>;
  workspaceName: Maybe<Scalars['String']>;
};

/** InvokeData */
export type SystemInvokeData = {
  functionName: Scalars['String'];
  inputArgs?: Maybe<Scalars['String']>;
};

/** InvokeFunctionResponse */
export type SystemInvokeFunctionResponse = {
  __typename?: 'SystemInvokeFunctionResponse';
  responseData: Scalars['String'];
};

export type SystemMemberAccountInfo = {
  __typename?: 'SystemMemberAccountInfo';
  aboutMe: Maybe<Scalars['String']>;
  addressLine1: Maybe<Scalars['String']>;
  addressLine2: Maybe<Scalars['String']>;
  avatar: Maybe<GraphQlFileItemResponse>;
  city: Maybe<Scalars['String']>;
  companyName: Maybe<Scalars['String']>;
  country: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  email: Scalars['String'];
  firstName: Maybe<Scalars['String']>;
  githubUsername: Maybe<Scalars['String']>;
  isDeveloper: Maybe<Scalars['Boolean']>;
  lastName: Maybe<Scalars['String']>;
  learningMode: Maybe<Scalars['Boolean']>;
  linkedInUsername: Maybe<Scalars['String']>;
  projectDescription: Maybe<Scalars['String']>;
  role: Maybe<Scalars['String']>;
  state: Maybe<Scalars['String']>;
  timezone: Maybe<Scalars['String']>;
  twitterUsername: Maybe<Scalars['String']>;
  type: Maybe<SystemUserType>;
  website: Maybe<Scalars['String']>;
  zipCode: Maybe<Scalars['String']>;
};

export type SystemMemberAccountUpsertDataInput = {
  aboutMe?: Maybe<Scalars['String']>;
  addressLine1?: Maybe<Scalars['String']>;
  addressLine2?: Maybe<Scalars['String']>;
  avatar?: Maybe<GraphQlCreateFileItemInput>;
  city?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  githubUsername?: Maybe<Scalars['String']>;
  isDeveloper?: Maybe<Scalars['Boolean']>;
  lastName?: Maybe<Scalars['String']>;
  learningMode?: Maybe<Scalars['Boolean']>;
  linkedInUsername?: Maybe<Scalars['String']>;
  projectDescription?: Maybe<Scalars['String']>;
  role?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  timezone?: Maybe<Scalars['String']>;
  twitterUsername?: Maybe<Scalars['String']>;
  type?: Maybe<SystemUserType>;
  website?: Maybe<Scalars['String']>;
  zipCode?: Maybe<Scalars['String']>;
};

/** Member Invitation */
export type SystemMemberInvitation = {
  __typename?: 'SystemMemberInvitation';
  accepted: Maybe<Scalars['Boolean']>;
  acceptedOn: Maybe<Scalars['DateTime']>;
  apiHost: Maybe<Scalars['String']>;
  email: Maybe<Scalars['String']>;
  firstName: Maybe<Scalars['String']>;
  id: Maybe<Scalars['String']>;
  invitedBy: Maybe<SystemInvitedByName>;
  isRegistered: Maybe<Scalars['Boolean']>;
  lastName: Maybe<Scalars['String']>;
  resentOn: Maybe<Scalars['DateTime']>;
};

/** Member invitation accept input */
export type SystemMemberInvitationAcceptInput = {
  accepted: Scalars['Boolean'];
  id: Scalars['String'];
};

/** Member Invitation Accept Response */
export type SystemMemberInvitationAcceptResponse = {
  __typename?: 'SystemMemberInvitationAcceptResponse';
  success: Scalars['Boolean'];
};

/** Cancel members invitations input */
export type SystemMemberInvitationCancelInput = {
  email: Scalars['String'];
};

/** Resend member invitation input */
export type SystemMemberInvitationResendInput = {
  email: Scalars['ID'];
};

export type SystemMemberInvitationsList = {
  __typename?: 'SystemMemberInvitationsList';
  count: Maybe<Scalars['Int']>;
  items: Maybe<Array<Maybe<SystemMemberInvitation>>>;
};

/** MemberPaymentDetailsUpdateMutationInput */
export type SystemMemberPaymentDetailsUpdateMutationInput = {
  cardToken: Scalars['String'];
};

/** MissingRelation Field Attributes */
export type SystemMissingRelationFieldTypeAttributes = {
  __typename?: 'SystemMissingRelationFieldTypeAttributes';
  missingTable: Scalars['String'];
};

export type SystemMutation = {
  __typename?: 'SystemMutation';
  applicationDelete: Maybe<SuccessResponse>;
  applicationInstall: Maybe<SystemApplication>;
  applicationUpdate: Maybe<SystemApplication>;
  /** @deprecated No longer supported. Use `system.memberPaymentDetailsUpdate, system.organizationPaymentDetailsUpdate or system.workspacePaymentDetailsUpdate` instead. */
  billingDetailsUpdate: Maybe<SystemBillingDetailsResponse>;
  billingPlanUpdate: Maybe<SystemBillingCurrentPlanResponse>;
  ciCommit: Maybe<AsyncSession>;
  ciInstall: Maybe<SuccessResponse>;
  deploy: Maybe<Scalars['Boolean']>;
  environmentBackup: Maybe<AsyncSession>;
  environmentBranch: Maybe<AsyncSession>;
  environmentDelete: Maybe<SuccessResponse>;
  environmentDeleteAsync: Maybe<AsyncSession>;
  environmentMemberDelete: SuccessResponse;
  environmentMemberUpdate: Maybe<SystemEnvironmentMember>;
  environmentRestore: Maybe<AsyncSession>;
  environmentSetup: Maybe<SuccessResponse>;
  fieldCreate: SystemTableField;
  fieldDelete: SuccessResponse;
  fieldUpdate: SystemTableField;
  fieldUpdatePosition: SuccessResponse;
  indexCreate: SystemTableIndex;
  indexDelete: Maybe<SuccessResponse>;
  indexUpdate: SystemTableIndex;
  inviteMembers: Array<Maybe<SystemTeamInvitationDetails>>;
  invoke: Maybe<SystemInvokeFunctionResponse>;
  memberAccountUpsert: Maybe<SystemMemberAccountInfo>;
  memberInvitationAccept: SystemMemberInvitationAcceptResponse;
  memberInvitationCancel: Maybe<SuccessResponse>;
  memberInvitationResend: Maybe<SuccessResponse>;
  memberPaymentDetailsUpdate: Maybe<SystemPaymentDetailsResponse>;
  notificationUpdate: Maybe<SuccessResponse>;
  organizationInviteUser: Maybe<OrganizationUserInvitationResponse>;
  organizationInviteUserAccept: Maybe<SuccessResponse>;
  organizationInviteUserCancel: Maybe<SuccessResponse>;
  organizationPaymentDetailsUpdate: Maybe<SystemPaymentDetailsResponse>;
  organizationUpdate: Maybe<SystemOrganizationItem>;
  organizationUserRemove: Maybe<SuccessResponse>;
  organizationWorkspaceAdd: Maybe<SuccessResponse>;
  organizationWorkspaceAddAccept: Maybe<SuccessResponse>;
  organizationWorkspaceAddCancel: Maybe<SuccessResponse>;
  organizationWorkspaceRemove: Maybe<SuccessResponse>;
  organizationWorkspaceUserRemove: Maybe<SuccessResponse>;
  organizationWorkspaceUserShare: Maybe<SuccessResponse>;
  prepareDeploy: SystemDeployDataResponse;
  tableCreate: SystemTable;
  tableDelete: SuccessResponse;
  tableUpdate: SystemTable;
  viewCreate: SystemTable;
  viewUpdate: SystemTable;
  workspaceCreate: Maybe<SystemWorkspaceCreateResponse>;
  workspaceCreateAsync: Maybe<SystemWorkspaceCreateResponse>;
  workspaceDelete: Maybe<SuccessResponse>;
  workspaceLeave: Maybe<SuccessResponse>;
  workspacePaymentDetailsUpdate: Maybe<SystemPaymentDetailsResponse>;
  workspaceTransferAccept: Maybe<SuccessResponse>;
  workspaceTransferCancel: Maybe<SuccessResponse>;
  workspaceTransferRegister: Maybe<SuccessResponse>;
  workspaceUpdate: Maybe<SystemWorkspaceUpdateResponse>;
};

export type SystemMutationApplicationDeleteArgs = {
  data: SystemApplicationDeleteMutationInput;
};

export type SystemMutationApplicationInstallArgs = {
  data: SystemApplicationInstallInput;
};

export type SystemMutationApplicationUpdateArgs = {
  data: SystemApplicationUpdateInput;
};

export type SystemMutationBillingDetailsUpdateArgs = {
  data: SystemBillingDetailsUpdateMutationInput;
};

export type SystemMutationBillingPlanUpdateArgs = {
  data: SystemBillingPlanUpdateMutationInput;
};

export type SystemMutationCiCommitArgs = {
  build?: Maybe<Scalars['String']>;
  migrationNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  mode?: Maybe<SystemCiCommitMode>;
};

export type SystemMutationDeployArgs = {
  data?: Maybe<SystemDeployingBuildInput>;
};

export type SystemMutationEnvironmentBackupArgs = {
  environmentName: Scalars['String'];
};

export type SystemMutationEnvironmentBranchArgs = {
  mode?: Maybe<SystemBranchEnvironmentMode>;
  name: Scalars['String'];
};

export type SystemMutationEnvironmentDeleteArgs = {
  environmentName: Scalars['String'];
};

export type SystemMutationEnvironmentDeleteAsyncArgs = {
  environmentName: Scalars['String'];
};

export type SystemMutationEnvironmentMemberDeleteArgs = {
  filter?: Maybe<SystemEnvironmentMembersFilter>;
};

export type SystemMutationEnvironmentMemberUpdateArgs = {
  data?: Maybe<SystemEnvironmentMemberUpdateData>;
  filter?: Maybe<SystemEnvironmentMembersFilter>;
};

export type SystemMutationEnvironmentRestoreArgs = {
  backup: Scalars['String'];
  environmentName: Scalars['String'];
};

export type SystemMutationEnvironmentSetupArgs = {
  data?: Maybe<EnvironmentSetupInput>;
};

export type SystemMutationFieldCreateArgs = {
  data: SystemTableFieldCreateInput;
};

export type SystemMutationFieldDeleteArgs = {
  data: SystemTableFieldDeleteInput;
};

export type SystemMutationFieldUpdateArgs = {
  data: SystemTableFieldUpdateInput;
};

export type SystemMutationFieldUpdatePositionArgs = {
  data: SystemTableFieldPositionUpdateInput;
};

export type SystemMutationIndexCreateArgs = {
  data: SystemIndexCreateInput;
};

export type SystemMutationIndexDeleteArgs = {
  data: SystemIndexDeleteInput;
};

export type SystemMutationIndexUpdateArgs = {
  data: SystemIndexUpdateInput;
};

export type SystemMutationInviteMembersArgs = {
  data: SystemInviteMembersInput;
  force?: Maybe<Scalars['Boolean']>;
};

export type SystemMutationInvokeArgs = {
  data?: Maybe<SystemInvokeData>;
};

export type SystemMutationMemberAccountUpsertArgs = {
  data?: Maybe<SystemMemberAccountUpsertDataInput>;
};

export type SystemMutationMemberInvitationAcceptArgs = {
  data: SystemMemberInvitationAcceptInput;
};

export type SystemMutationMemberInvitationCancelArgs = {
  data: SystemMemberInvitationCancelInput;
};

export type SystemMutationMemberInvitationResendArgs = {
  data: SystemMemberInvitationResendInput;
};

export type SystemMutationMemberPaymentDetailsUpdateArgs = {
  data: SystemMemberPaymentDetailsUpdateMutationInput;
};

export type SystemMutationNotificationUpdateArgs = {
  id: Scalars['String'];
  status: NotificationStatusType;
};

export type SystemMutationOrganizationInviteUserArgs = {
  email: Scalars['String'];
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  organizationId: Scalars['String'];
  role: Scalars['String'];
};

export type SystemMutationOrganizationInviteUserAcceptArgs = {
  invitationId: Scalars['String'];
};

export type SystemMutationOrganizationInviteUserCancelArgs = {
  invitationId: Scalars['String'];
};

export type SystemMutationOrganizationPaymentDetailsUpdateArgs = {
  data: SystemOrganizationPaymentDetailsUpdateMutationInput;
};

export type SystemMutationOrganizationUpdateArgs = {
  description?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  image?: Maybe<GraphQlCreateFileItemInput>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<SystemOrganizationTypeEnum>;
};

export type SystemMutationOrganizationUserRemoveArgs = {
  email: Scalars['String'];
  organizationId: Scalars['String'];
};

export type SystemMutationOrganizationWorkspaceAddArgs = {
  organizationId: Scalars['String'];
  workspaceId: Scalars['String'];
};

export type SystemMutationOrganizationWorkspaceAddAcceptArgs = {
  sessionId: Scalars['String'];
};

export type SystemMutationOrganizationWorkspaceAddCancelArgs = {
  sessionId: Scalars['String'];
};

export type SystemMutationOrganizationWorkspaceRemoveArgs = {
  organizationId: Scalars['String'];
  workspaceId: Scalars['String'];
};

export type SystemMutationOrganizationWorkspaceUserRemoveArgs = {
  email: Scalars['String'];
  organizationId: Scalars['String'];
  workspaceId: Scalars['String'];
};

export type SystemMutationOrganizationWorkspaceUserShareArgs = {
  email: Scalars['String'];
  environments?: Maybe<Array<Maybe<SystemOrganizationWorkspaceUserShareInfo>>>;
};

export type SystemMutationTableCreateArgs = {
  data: SystemTableCreateInput;
};

export type SystemMutationTableDeleteArgs = {
  data: SystemTableDeleteInput;
};

export type SystemMutationTableUpdateArgs = {
  data: SystemTableUpdateInput;
};

export type SystemMutationViewCreateArgs = {
  data: SystemViewCreateInput;
};

export type SystemMutationViewUpdateArgs = {
  data: SystemViewUpdateInput;
};

export type SystemMutationWorkspaceCreateArgs = {
  data: SystemWorkspaceCreateMutationInput;
};

export type SystemMutationWorkspaceCreateAsyncArgs = {
  data: SystemWorkspaceCreateMutationInput;
};

export type SystemMutationWorkspaceDeleteArgs = {
  data: SystemWorkspaceDeleteMutationInput;
};

export type SystemMutationWorkspaceLeaveArgs = {
  force?: Maybe<Scalars['Boolean']>;
};

export type SystemMutationWorkspacePaymentDetailsUpdateArgs = {
  data: SystemWorkspacePaymentDetailsUpdateMutationInput;
};

export type SystemMutationWorkspaceTransferAcceptArgs = {
  workspaceId: Scalars['String'];
};

export type SystemMutationWorkspaceTransferCancelArgs = {
  workspaceId: Scalars['String'];
};

export type SystemMutationWorkspaceTransferRegisterArgs = {
  owner: Scalars['String'];
  workspaceId: Scalars['String'];
};

export type SystemMutationWorkspaceUpdateArgs = {
  data: SystemWorkspaceUpdateMutationInput;
};

/** Number Field Attributes */
export type SystemNumberFieldTypeAttributes = {
  __typename?: 'SystemNumberFieldTypeAttributes';
  autoIncrement: Maybe<Scalars['Boolean']>;
  currency: Maybe<Scalars['String']>;
  format: Scalars['String'];
  isBigInt: Maybe<Scalars['Boolean']>;
  maxValue: Maybe<Scalars['Float']>;
  minValue: Maybe<Scalars['Float']>;
  precision: Maybe<Scalars['Int']>;
};

/** Number Type Format Enum */
export enum SystemNumberTypeFormatEnum {
  Currency = 'CURRENCY',
  Fraction = 'FRACTION',
  Number = 'NUMBER',
  Percentage = 'PERCENTAGE',
  Scientific = 'SCIENTIFIC',
}

export type SystemOrganizationBaseItem = {
  __typename?: 'SystemOrganizationBaseItem';
  description: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  type: Maybe<SystemOrganizationTypeEnum>;
};

export type SystemOrganizationInvitation = {
  __typename?: 'SystemOrganizationInvitation';
  accepted: Maybe<Scalars['Boolean']>;
  email: Scalars['String'];
  emailFrom: Scalars['String'];
  firstName: Maybe<Scalars['String']>;
  firstNameFrom: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  lastName: Maybe<Scalars['String']>;
  lastNameFrom: Maybe<Scalars['String']>;
  organization: SystemOrganizationBaseItem;
  role: Scalars['String'];
};

export type SystemOrganizationItem = {
  __typename?: 'SystemOrganizationItem';
  description: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  image: Maybe<SystemOrganizationItemImage>;
  name: Scalars['String'];
  predefinedPlans: Maybe<Array<Maybe<SystemBillingPlanBaseScalarInfo>>>;
  type: Maybe<SystemOrganizationTypeEnum>;
  users: Maybe<Array<Maybe<SystemOrganizationUserInfo>>>;
};

export type SystemOrganizationItemImage = {
  __typename?: 'SystemOrganizationItemImage';
  downloadUrl: Maybe<Scalars['String']>;
  id: Maybe<Scalars['String']>;
};

/** OrganizationPaymentDetailsUpdateMutationInput */
export type SystemOrganizationPaymentDetailsUpdateMutationInput = {
  cardToken: Scalars['String'];
  organizationId: Scalars['ID'];
};

export enum SystemOrganizationTypeEnum {
  Agency = 'agency',
  Community = 'community',
  Company = 'company',
}

export type SystemOrganizationUserBaseInfo = {
  __typename?: 'SystemOrganizationUserBaseInfo';
  email: Scalars['String'];
  firstName: Maybe<Scalars['String']>;
  id: Scalars['String'];
  lastName: Maybe<Scalars['String']>;
  role: Scalars['String'];
  status: Scalars['String'];
};

export type SystemOrganizationUserInfo = {
  __typename?: 'SystemOrganizationUserInfo';
  avatar: Maybe<GraphQlFileItemResponse>;
  email: Scalars['String'];
  firstName: Maybe<Scalars['String']>;
  id: Scalars['String'];
  lastName: Maybe<Scalars['String']>;
  role: Scalars['String'];
  status: Scalars['String'];
  workspaces: Maybe<Array<Maybe<SystemOrganizationWorkspaceItem>>>;
};

export type SystemOrganizationWorkspaceAddSession = {
  __typename?: 'SystemOrganizationWorkspaceAddSession';
  organization: SystemOrganizationBaseItem;
  status: Maybe<Scalars['String']>;
  user: Maybe<SystemOrganizationUserBaseInfo>;
  workspace: SystemOrganizationWorkspaceItem;
};

export type SystemOrganizationWorkspaceItem = {
  __typename?: 'SystemOrganizationWorkspaceItem';
  id: Scalars['ID'];
  name: Scalars['String'];
  organization: Maybe<SystemOrganizationBaseItem>;
};

export type SystemOrganizationWorkspaceUserShareInfo = {
  environmentId: Scalars['String'];
  roles?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** SystemOrganizationsListAllResponse output */
export type SystemOrganizationsListAllResponse = {
  __typename?: 'SystemOrganizationsListAllResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<SystemOrganizationItem>;
};

/** SystemOrganizationsListResponse output */
export type SystemOrganizationsListResponse = {
  __typename?: 'SystemOrganizationsListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<SystemOrganizationItem>;
};

export type SystemPaymentDetailsResponse = {
  __typename?: 'SystemPaymentDetailsResponse';
  brand: Maybe<Scalars['String']>;
  expMonth: Maybe<Scalars['Int']>;
  expYear: Maybe<Scalars['Int']>;
  last4: Maybe<Scalars['String']>;
};

/** Diff Environment Input */
export type SystemPlanEnvironmentOutput = {
  __typename?: 'SystemPlanEnvironmentOutput';
  url: Maybe<Scalars['String']>;
};

export type SystemQuery = {
  __typename?: 'SystemQuery';
  application: Maybe<SystemApplication>;
  applicationsList: Maybe<SystemApplicationListResponse>;
  billingCurrentPlan: Maybe<SystemBillingCurrentPlanResponse>;
  /** @deprecated No longer supported. Use `system.memberPaymentDetails, system.organizationPaymentDetails or system.workspacePaymentDetails` instead. */
  billingDetails: Maybe<SystemBillingDetailsResponse>;
  /** @deprecated No longer supported. Use `system.memberBillingHistory, system.organizationBillingHistory or system.workspaceBillingHistory` instead. */
  billingInvoicesList: SystemBillingInvoicesListResponse;
  billingMetricUsageQuotasList: SystemBillingMetricUsageQuotasListResponse;
  billingMetricUsagesList: SystemBillingMetricUsagesListResponse;
  ciGenerate: Maybe<SystemGenerateEnvironmentOutput>;
  /** @deprecated No longer supported. Use `ciGenerate` instead. */
  ciPlan: Maybe<SystemPlanEnvironmentOutput>;
  ciStatus: Maybe<SystemCiStatusOutput>;
  deployStatus: SystemDeployStatusResult;
  environmentBackupsList: Maybe<SystemEnvironmentBackupListResponse>;
  environmentMember: Maybe<SystemEnvironmentMember>;
  environmentMembersList: Maybe<SystemEnvironmentMembersListResponse>;
  environmentSettings: Maybe<SystemEnvironmentSettings>;
  environmentsList: Maybe<SystemEnvironmentsListResponse>;
  functionsList: Maybe<SystemFunctionListResponse>;
  getEnvironmentRoles: Maybe<Array<Maybe<SystemEnvironmentRoleList>>>;
  getFrontendPlanId: SystemFrontendPlanIdItem;
  getWorkspaceTransferInfo: Maybe<WorkspaceTransferItem>;
  inboxEventsList: Maybe<SystemInboxEventsListResponse>;
  introspection: Maybe<IntrospectionQueryResponse>;
  /** @deprecated No longer supported. Use `system.logsList` instead. */
  logs: Maybe<Array<Maybe<Scalars['String']>>>;
  logsList: Maybe<Array<Maybe<SystemFunctionLogEntry>>>;
  memberAccount: Maybe<SystemMemberAccountInfo>;
  memberBillingHistory: SystemBillingInvoicesListResponse;
  memberInvitation: Maybe<SystemMemberInvitation>;
  memberInvitationsList: Maybe<SystemMemberInvitationsList>;
  memberPaymentDetails: Maybe<SystemPaymentDetailsResponse>;
  organizationBillingHistory: SystemBillingInvoicesListResponse;
  organizationById: Maybe<SystemOrganizationItem>;
  organizationInvitationById: Maybe<SystemOrganizationInvitation>;
  organizationPaymentDetails: Maybe<SystemPaymentDetailsResponse>;
  organizationWorkspaceAddSession: Maybe<SystemOrganizationWorkspaceAddSession>;
  organizationsListAll: Maybe<SystemOrganizationsListAllResponse>;
  organizationsListByUser: Maybe<SystemOrganizationsListResponse>;
  table: Maybe<SystemTable>;
  tableField: Maybe<SystemTableField>;
  tablesList: SystemTableListResponse;
  userBillingConfiguration: SystemUserBillingConfigurationResponse;
  userInvitationsList: Maybe<SystemUserInvitationList>;
  workspaceBillingHistory: SystemBillingInvoicesListResponse;
  workspacePaymentDetails: Maybe<SystemPaymentDetailsResponse>;
  workspacesFrontendList: Maybe<SystemWorkspaceListResponse>;
  workspacesList: Maybe<SystemWorkspaceListResponse>;
};

export type SystemQueryApplicationArgs = {
  id: Scalars['String'];
};

export type SystemQueryBillingInvoicesListArgs = {
  after?: Maybe<Scalars['ID']>;
  before?: Maybe<Scalars['ID']>;
  by?: Maybe<SystemBillingInvoicesListFilterType>;
  limit?: Maybe<Scalars['Int']>;
};

export type SystemQueryBillingMetricUsagesListArgs = {
  filter?: Maybe<SystemBillingMetricUsagesListFilter>;
};

export type SystemQueryCiGenerateArgs = {
  sourceEnvironmentId?: Maybe<Scalars['String']>;
  tables?: Maybe<Array<Scalars['String']>>;
  targetEnvironmentId?: Maybe<Scalars['String']>;
};

export type SystemQueryCiPlanArgs = {
  sourceEnvironmentId?: Maybe<Scalars['String']>;
  tables?: Maybe<Array<Scalars['String']>>;
  targetEnvironmentId?: Maybe<Scalars['String']>;
};

export type SystemQueryDeployStatusArgs = {
  buildName: Scalars['String'];
};

export type SystemQueryEnvironmentBackupsListArgs = {
  environmentName?: Maybe<Scalars['String']>;
};

export type SystemQueryEnvironmentMemberArgs = {
  filter?: Maybe<SystemEnvironmentMemberFilter>;
};

export type SystemQueryEnvironmentMembersListArgs = {
  filter?: Maybe<SystemEnvironmentMembersListFilter>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<SystemEnvironmentMembersListSort>>;
};

export type SystemQueryFunctionsListArgs = {
  applicationId?: Maybe<Scalars['String']>;
  filter?: Maybe<SystemFunctionInfoFilter>;
  orderBy?: Maybe<Array<Maybe<SystemFunctionInfoOrderBy>>>;
};

export type SystemQueryGetEnvironmentRolesArgs = {
  email?: Maybe<Scalars['String']>;
  workspaceId: Scalars['String'];
};

export type SystemQueryGetWorkspaceTransferInfoArgs = {
  workspaceId: Scalars['String'];
};

export type SystemQueryInboxEventsListArgs = {
  filter?: Maybe<InboxEventsListFilter>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};

export type SystemQueryLogsArgs = {
  applicationId?: Maybe<Scalars['String']>;
  endTime?: Maybe<Scalars['DateTime']>;
  functionName: Scalars['String'];
  limit?: Maybe<Scalars['Int']>;
  startTime?: Maybe<Scalars['DateTime']>;
};

export type SystemQueryLogsListArgs = {
  applicationId?: Maybe<Scalars['String']>;
  endTime?: Maybe<Scalars['DateTime']>;
  functionName: Scalars['String'];
  limit?: Maybe<Scalars['Int']>;
  startTime?: Maybe<Scalars['DateTime']>;
};

export type SystemQueryMemberBillingHistoryArgs = {
  first?: Maybe<Scalars['Int']>;
  hideOrganizationInvoices?: Maybe<Scalars['Boolean']>;
  skip?: Maybe<Scalars['Int']>;
};

export type SystemQueryMemberInvitationArgs = {
  id: Scalars['String'];
};

export type SystemQueryOrganizationBillingHistoryArgs = {
  first?: Maybe<Scalars['Int']>;
  hideWorkspaceInvoices?: Maybe<Scalars['Boolean']>;
  organizationId: Scalars['ID'];
  skip?: Maybe<Scalars['Int']>;
};

export type SystemQueryOrganizationByIdArgs = {
  organizationId: Scalars['String'];
};

export type SystemQueryOrganizationInvitationByIdArgs = {
  invitationId: Scalars['String'];
};

export type SystemQueryOrganizationPaymentDetailsArgs = {
  organizationId: Scalars['ID'];
};

export type SystemQueryOrganizationWorkspaceAddSessionArgs = {
  sessionId: Scalars['String'];
};

export type SystemQueryTableArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
};

export type SystemQueryTableFieldArgs = {
  id: Scalars['ID'];
};

export type SystemQueryTablesListArgs = {
  filter?: Maybe<SystemTableListFilter>;
};

export type SystemQueryWorkspaceBillingHistoryArgs = {
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};

/** Relation */
export type SystemRelation = {
  __typename?: 'SystemRelation';
  refField: Maybe<SystemTableField>;
  refFieldDisplayName: Maybe<Scalars['String']>;
  refFieldIsList: Maybe<Scalars['Boolean']>;
  refFieldIsRequired: Maybe<Scalars['Boolean']>;
  refFieldName: Maybe<Scalars['String']>;
  refTable: SystemTable;
  relationFieldName: Maybe<Scalars['String']>;
  relationTableName: Maybe<Scalars['String']>;
};

/** Relation Create Input */
export type SystemRelationCreateInput = {
  refFieldDisplayName?: Maybe<Scalars['String']>;
  refFieldIsList: Scalars['Boolean'];
  refFieldIsRequired: Scalars['Boolean'];
  refFieldName?: Maybe<Scalars['String']>;
  refTableId: Scalars['ID'];
};

/** Relation Update Input */
export type SystemRelationUpdateInput = {
  refFieldDisplayName?: Maybe<Scalars['String']>;
  refFieldIsList?: Maybe<Scalars['Boolean']>;
  refFieldIsRequired?: Maybe<Scalars['Boolean']>;
  refFieldName?: Maybe<Scalars['String']>;
  refTableId?: Maybe<Scalars['ID']>;
};

/** Schema Origin */
export type SystemSchemaOrigin = {
  __typename?: 'SystemSchemaOrigin';
  provider: Maybe<Scalars['String']>;
  type: SystemSchemaOriginType;
};

/** Schema Origin Type Enum */
export enum SystemSchemaOriginType {
  Local = 'LOCAL',
  Remote = 'REMOTE',
  View = 'VIEW',
}

/** Smart Field Attributes */
export type SystemSmartFieldTypeAttributes = {
  __typename?: 'SystemSmartFieldTypeAttributes';
  format: Scalars['String'];
  innerFields: Maybe<Array<Maybe<SystemCustomTableField>>>;
};

/** Smart Type Format Enum */
export enum SystemSmartTypeFormatEnum {
  Address = 'ADDRESS',
  Phone = 'PHONE',
}

/** Switch Field Attributes */
export type SystemSwitchFieldTypeAttributes = {
  __typename?: 'SystemSwitchFieldTypeAttributes';
  format: Scalars['String'];
  listOptions: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** Switch Type Format Enum */
export enum SystemSwitchTypeFormatEnum {
  ActiveInactive = 'ACTIVE_INACTIVE',
  Custom = 'CUSTOM',
  HighLow = 'HIGH_LOW',
  OnOff = 'ON_OFF',
  TrueFalse = 'TRUE_FALSE',
  YesNo = 'YES_NO',
}

/** Table */
export type SystemTable = {
  __typename?: 'SystemTable';
  application: Maybe<SystemApplication>;
  attributes: Maybe<SystemTableAttributes>;
  dataFeatures: SystemTableDataFeatures;
  description: Maybe<Scalars['String']>;
  displayName: Maybe<Scalars['String']>;
  fields: Maybe<Array<SystemTableField>>;
  id: Scalars['ID'];
  indexes: Maybe<Array<SystemTableIndex>>;
  isSystem: Scalars['Boolean'];
  name: Scalars['String'];
  origin: SystemSchemaOrigin;
  schemaFeatures: SystemTableSchemaFeatures;
};

/** Table Attributes */
export type SystemTableAttributes = SystemViewAttributes;

/** Table Create Input */
export type SystemTableCreateInput = {
  applicationId?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  name: Scalars['String'];
};

/** Table Data Features */
export type SystemTableDataFeatures = {
  __typename?: 'SystemTableDataFeatures';
  create: Scalars['Boolean'];
  delete: Scalars['Boolean'];
  update: Scalars['Boolean'];
};

/** Table Delete Input */
export type SystemTableDeleteInput = {
  id: Scalars['ID'];
};

/** TableField */
export type SystemTableField = {
  __typename?: 'SystemTableField';
  computedMode: Maybe<SystemComputedFieldMode>;
  dataFeatures: SystemFieldDataFeatures;
  defaultValue: Maybe<Scalars['String']>;
  description: Maybe<Scalars['String']>;
  displayName: Maybe<Scalars['String']>;
  expression: Maybe<Scalars['String']>;
  fieldType: SystemFieldType;
  fieldTypeAttributes: Maybe<SystemFieldTypeAttributes>;
  id: Scalars['ID'];
  isList: Scalars['Boolean'];
  isMeta: Scalars['Boolean'];
  isRequired: Scalars['Boolean'];
  isSystem: Scalars['Boolean'];
  isUnique: Maybe<Scalars['Boolean']>;
  name: Scalars['String'];
  origin: SystemSchemaOrigin;
  relation: Maybe<SystemRelation>;
  schemaFeatures: SystemFieldSchemaFeatures;
  table: SystemTable;
};

/** Table Field Create Input */
export type SystemTableFieldCreateInput = {
  computedMode?: Maybe<SystemComputedFieldMode>;
  defaultValue?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  expression?: Maybe<Scalars['String']>;
  fieldType: SystemFieldType;
  fieldTypeAttributes?: Maybe<SystemFieldTypeAttributesInput>;
  force?: Maybe<Scalars['Boolean']>;
  initialValue?: Maybe<Scalars['String']>;
  isList: Scalars['Boolean'];
  isRequired: Scalars['Boolean'];
  isUnique?: Maybe<Scalars['Boolean']>;
  name: Scalars['String'];
  position?: Maybe<Scalars['Int']>;
  relation?: Maybe<SystemRelationCreateInput>;
  tableId: Scalars['ID'];
};

/** Table Field Delete Input */
export type SystemTableFieldDeleteInput = {
  id: Scalars['ID'];
};

/** Table Field Position Update Input */
export type SystemTableFieldPositionUpdateInput = {
  id: Scalars['ID'];
  newPosition: Scalars['Int'];
};

/** Table Field Update Input */
export type SystemTableFieldUpdateInput = {
  computedMode?: Maybe<SystemComputedFieldMode>;
  defaultValue?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  expression?: Maybe<Scalars['String']>;
  fieldType?: Maybe<SystemFieldType>;
  fieldTypeAttributes?: Maybe<SystemFieldTypeAttributesInput>;
  force?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  initialValue?: Maybe<Scalars['String']>;
  isList?: Maybe<Scalars['Boolean']>;
  isRequired?: Maybe<Scalars['Boolean']>;
  isUnique?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  position?: Maybe<Scalars['Int']>;
  relation?: Maybe<SystemRelationUpdateInput>;
};

/** Table Index */
export type SystemTableIndex = {
  __typename?: 'SystemTableIndex';
  columns: Maybe<Array<SystemTableIndexColumn>>;
  id: Scalars['ID'];
  isSystem: Scalars['Boolean'];
  name: Maybe<Scalars['String']>;
  table: SystemTable;
  type: Scalars['String'];
};

/** Table Index Column */
export type SystemTableIndexColumn = {
  __typename?: 'SystemTableIndexColumn';
  name: Scalars['String'];
};

/** Table Index Column Input */
export type SystemTableIndexColumnInput = {
  name: Scalars['String'];
};

/** Table List Application Filter */
export type SystemTableListApplicationFilter = {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** Table List Filter */
export type SystemTableListFilter = {
  applications?: Maybe<Array<Maybe<SystemTableListApplicationFilter>>>;
  onlyUserTables?: Maybe<Scalars['Boolean']>;
  tableNames?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** Table List Response */
export type SystemTableListResponse = {
  __typename?: 'SystemTableListResponse';
  count: Maybe<Scalars['Int']>;
  items: Maybe<Array<Maybe<SystemTable>>>;
};

/** Table Schema Create Features */
export type SystemTableSchemaCreateFeatures = {
  __typename?: 'SystemTableSchemaCreateFeatures';
  DATE: Scalars['Boolean'];
  FILE: Scalars['Boolean'];
  GEO: Scalars['Boolean'];
  ID: Scalars['Boolean'];
  JSON: Scalars['Boolean'];
  MISSING_RELATION: Scalars['Boolean'];
  NUMBER: Scalars['Boolean'];
  ONE_WAY_RELATION: Scalars['Boolean'];
  RELATION: Scalars['Boolean'];
  SMART: Scalars['Boolean'];
  SWITCH: Scalars['Boolean'];
  TEXT: Scalars['Boolean'];
  UUID: Scalars['Boolean'];
};

/** Table Schema Features */
export type SystemTableSchemaFeatures = {
  __typename?: 'SystemTableSchemaFeatures';
  computedFields: Scalars['Boolean'];
  create: SystemTableSchemaCreateFeatures;
  update: Maybe<SystemTableSchemaMetaFieldFeatures>;
};

/** Table Schema Meta Field Features */
export type SystemTableSchemaMetaFieldFeatures = {
  __typename?: 'SystemTableSchemaMetaFieldFeatures';
  displayName: Scalars['Boolean'];
  name: Scalars['Boolean'];
};

/** Table Update Input */
export type SystemTableUpdateInput = {
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
};

/** Team Invitation Details */
export type SystemTeamInvitationDetails = {
  __typename?: 'SystemTeamInvitationDetails';
  accepted: Maybe<Scalars['Boolean']>;
  acceptedOn: Maybe<Scalars['DateTime']>;
  apiHost: Maybe<Scalars['String']>;
  email: Maybe<Scalars['String']>;
  firstName: Maybe<Scalars['String']>;
  id: Maybe<Scalars['String']>;
  invitedBy: Maybe<SystemInvitedByName>;
  isRegistered: Maybe<Scalars['Boolean']>;
  lastName: Maybe<Scalars['String']>;
  resentOn: Maybe<Scalars['DateTime']>;
};

/** Text Field Attributes */
export type SystemTextFieldTypeAttributes = {
  __typename?: 'SystemTextFieldTypeAttributes';
  fieldSize: Maybe<Scalars['Int']>;
  format: Scalars['String'];
};

/** Text Type Format Enum */
export enum SystemTextTypeFormatEnum {
  Ein = 'EIN',
  Email = 'EMAIL',
  Html = 'HTML',
  Markdown = 'MARKDOWN',
  Name = 'NAME',
  Unformatted = 'UNFORMATTED',
}

/** UUID Field Attributes */
export type SystemUuidFieldTypeAttributes = {
  __typename?: 'SystemUUIDFieldTypeAttributes';
  fieldSize: Maybe<Scalars['Int']>;
};

export type SystemUserBillingConfigurationResponse = {
  __typename?: 'SystemUserBillingConfigurationResponse';
  availablePlans: Array<SystemBillingPlanBaseInfo>;
  isCancelSubscriptionAvailable: Scalars['Boolean'];
  isFreePlanAvailable: Scalars['Boolean'];
};

/** User Invitation Details */
export type SystemUserInvitationDetails = {
  __typename?: 'SystemUserInvitationDetails';
  accepted: Maybe<Scalars['Boolean']>;
  acceptedOn: Maybe<Scalars['DateTime']>;
  apiHost: Maybe<Scalars['String']>;
  email: Maybe<Scalars['String']>;
  firstName: Maybe<Scalars['String']>;
  id: Maybe<Scalars['String']>;
  invitedBy: Maybe<SystemInvitedByName>;
  isRegistered: Maybe<Scalars['Boolean']>;
  lastName: Maybe<Scalars['String']>;
  resentOn: Maybe<Scalars['DateTime']>;
};

/** User Invitation List */
export type SystemUserInvitationList = {
  __typename?: 'SystemUserInvitationList';
  count: Maybe<Scalars['Int']>;
  items: Maybe<Array<Maybe<SystemUserInvitationDetails>>>;
};

/** User Type */
export enum SystemUserType {
  Agency = 'Agency',
  MyOwn = 'MyOwn',
  Team = 'Team',
}

/** View Attributes */
export type SystemViewAttributes = {
  __typename?: 'SystemViewAttributes';
  query: Maybe<Scalars['String']>;
};

/** View Create Input */
export type SystemViewCreateInput = {
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  query: Scalars['String'];
};

/** View Update Input */
export type SystemViewUpdateInput = {
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['String']>;
};

/** WorkspaceCreateMutationInput */
export type SystemWorkspaceCreateMutationInput = {
  billingPlanId?: Maybe<Scalars['ID']>;
  description?: Maybe<Scalars['String']>;
  image?: Maybe<GraphQlCreateFileItemInput>;
  kind?: Maybe<SystemWorkspaceKind>;
  name: Scalars['String'];
  organizationId?: Maybe<Scalars['ID']>;
};

export type SystemWorkspaceCreateResponse = {
  __typename?: 'SystemWorkspaceCreateResponse';
  description: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  kind: Maybe<Scalars['String']>;
  name: Maybe<Scalars['String']>;
};

/** WorkspaceDeleteMutationInput */
export type SystemWorkspaceDeleteMutationInput = {
  id: Scalars['ID'];
};

export type SystemWorkspaceImage = {
  __typename?: 'SystemWorkspaceImage';
  downloadUrl: Maybe<Scalars['String']>;
  id: Maybe<Scalars['String']>;
};

export type SystemWorkspaceItem = {
  __typename?: 'SystemWorkspaceItem';
  apiHost: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  description: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  image: Maybe<SystemWorkspaceImage>;
  isCiCdEnabled: Maybe<Scalars['Boolean']>;
  isOwner: Scalars['Boolean'];
  kind: Maybe<Scalars['String']>;
  lastAccess: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  nextPlan: Maybe<SystemBillingNextPlanResponse>;
  organization: Maybe<SystemOrganizationBaseItem>;
  owner: Maybe<SystemMemberAccountInfo>;
  plan: Maybe<SystemBillingCurrentPlanResponse>;
  region: Maybe<Scalars['String']>;
  teamMemberCount: Maybe<Scalars['Int']>;
  webSocket: Maybe<Scalars['String']>;
};

/** Workspace Kind */
export enum SystemWorkspaceKind {
  Frontend = 'frontend',
  General = 'general',
}

/** SystemWorkspaceListResponse output */
export type SystemWorkspaceListResponse = {
  __typename?: 'SystemWorkspaceListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<SystemWorkspaceItem>;
};

/** WorkspacePaymentDetailsUpdateMutationInput */
export type SystemWorkspacePaymentDetailsUpdateMutationInput = {
  cardToken: Scalars['String'];
};

export enum SystemWorkspaceStatus {
  Active = 'active',
  Blocked = 'blocked',
  Canceled = 'canceled',
  Canceling = 'canceling',
  Pending = 'pending',
  Suspended = 'suspended',
}

/** WorkspaceUpdateMutationInput */
export type SystemWorkspaceUpdateMutationInput = {
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  image?: Maybe<GraphQlCreateFileItemInput>;
  name?: Maybe<Scalars['String']>;
};

export type SystemWorkspaceUpdateResponse = {
  __typename?: 'SystemWorkspaceUpdateResponse';
  description: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  image: Maybe<GraphQlFileItemResponse>;
  name: Maybe<Scalars['String']>;
};

/** Table */
export type Table = {
  __typename?: 'Table';
  application: Maybe<Application>;
  attributes: Maybe<TableAttributes>;
  dataFeatures: TableDataFeatures;
  description: Maybe<Scalars['String']>;
  displayName: Maybe<Scalars['String']>;
  fields: Maybe<Array<TableField>>;
  id: Scalars['ID'];
  indexes: Maybe<Array<TableIndex>>;
  isSystem: Scalars['Boolean'];
  name: Scalars['String'];
  origin: SchemaOrigin;
  schemaFeatures: TableSchemaFeatures;
};

/** Table Attributes */
export type TableAttributes = ViewAttributes;

/** Table Create Input */
export type TableCreateInput = {
  applicationId?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  name: Scalars['String'];
};

/** Table Data Features */
export type TableDataFeatures = {
  __typename?: 'TableDataFeatures';
  create: Scalars['Boolean'];
  delete: Scalars['Boolean'];
  update: Scalars['Boolean'];
};

/** Table Delete Input */
export type TableDeleteInput = {
  id: Scalars['ID'];
};

/** TableField */
export type TableField = {
  __typename?: 'TableField';
  computedMode: Maybe<ComputedFieldMode>;
  dataFeatures: FieldDataFeatures;
  defaultValue: Maybe<Scalars['String']>;
  description: Maybe<Scalars['String']>;
  displayName: Maybe<Scalars['String']>;
  expression: Maybe<Scalars['String']>;
  fieldType: FieldType;
  fieldTypeAttributes: Maybe<FieldTypeAttributes>;
  id: Scalars['ID'];
  isList: Scalars['Boolean'];
  isMeta: Scalars['Boolean'];
  isRequired: Scalars['Boolean'];
  isSystem: Scalars['Boolean'];
  isUnique: Maybe<Scalars['Boolean']>;
  name: Scalars['String'];
  origin: SchemaOrigin;
  relation: Maybe<Relation>;
  schemaFeatures: FieldSchemaFeatures;
  table: Table;
};

/** Table Field Create Input */
export type TableFieldCreateInput = {
  computedMode?: Maybe<ComputedFieldMode>;
  defaultValue?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  expression?: Maybe<Scalars['String']>;
  fieldType: FieldType;
  fieldTypeAttributes?: Maybe<FieldTypeAttributesInput>;
  force?: Maybe<Scalars['Boolean']>;
  initialValue?: Maybe<Scalars['String']>;
  isList: Scalars['Boolean'];
  isRequired: Scalars['Boolean'];
  isUnique?: Maybe<Scalars['Boolean']>;
  name: Scalars['String'];
  position?: Maybe<Scalars['Int']>;
  relation?: Maybe<RelationCreateInput>;
  tableId: Scalars['ID'];
};

/** Table Field Delete Input */
export type TableFieldDeleteInput = {
  id: Scalars['ID'];
};

/** Table Field Position Update Input */
export type TableFieldPositionUpdateInput = {
  id: Scalars['ID'];
  newPosition: Scalars['Int'];
};

/** Table Field Update Input */
export type TableFieldUpdateInput = {
  computedMode?: Maybe<ComputedFieldMode>;
  defaultValue?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  expression?: Maybe<Scalars['String']>;
  fieldType?: Maybe<FieldType>;
  fieldTypeAttributes?: Maybe<FieldTypeAttributesInput>;
  force?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  initialValue?: Maybe<Scalars['String']>;
  isList?: Maybe<Scalars['Boolean']>;
  isRequired?: Maybe<Scalars['Boolean']>;
  isUnique?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  position?: Maybe<Scalars['Int']>;
  relation?: Maybe<RelationUpdateInput>;
};

/** Table Index */
export type TableIndex = {
  __typename?: 'TableIndex';
  columns: Maybe<Array<TableIndexColumn>>;
  id: Scalars['ID'];
  isSystem: Scalars['Boolean'];
  name: Maybe<Scalars['String']>;
  table: Table;
  type: Scalars['String'];
};

/** Table Index Column */
export type TableIndexColumn = {
  __typename?: 'TableIndexColumn';
  name: Scalars['String'];
};

/** Table Index Column Input */
export type TableIndexColumnInput = {
  name: Scalars['String'];
};

export enum TableIndexType {
  Index = 'INDEX',
  Unique = 'UNIQUE',
}

/** Table List Application Filter */
export type TableListApplicationFilter = {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** Table List Filter */
export type TableListFilter = {
  applications?: Maybe<Array<Maybe<TableListApplicationFilter>>>;
  onlyUserTables?: Maybe<Scalars['Boolean']>;
  tableNames?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** Table List Response */
export type TableListResponse = {
  __typename?: 'TableListResponse';
  count: Maybe<Scalars['Int']>;
  items: Maybe<Array<Maybe<Table>>>;
};

/** Table Schema Create Features */
export type TableSchemaCreateFeatures = {
  __typename?: 'TableSchemaCreateFeatures';
  DATE: Scalars['Boolean'];
  FILE: Scalars['Boolean'];
  GEO: Scalars['Boolean'];
  ID: Scalars['Boolean'];
  JSON: Scalars['Boolean'];
  MISSING_RELATION: Scalars['Boolean'];
  NUMBER: Scalars['Boolean'];
  ONE_WAY_RELATION: Scalars['Boolean'];
  RELATION: Scalars['Boolean'];
  SMART: Scalars['Boolean'];
  SWITCH: Scalars['Boolean'];
  TEXT: Scalars['Boolean'];
  UUID: Scalars['Boolean'];
};

/** Table Schema Features */
export type TableSchemaFeatures = {
  __typename?: 'TableSchemaFeatures';
  computedFields: Scalars['Boolean'];
  create: TableSchemaCreateFeatures;
  update: Maybe<TableSchemaMetaFieldFeatures>;
};

/** Table Schema Meta Field Features */
export type TableSchemaMetaFieldFeatures = {
  __typename?: 'TableSchemaMetaFieldFeatures';
  displayName: Scalars['Boolean'];
  name: Scalars['Boolean'];
};

/** Table Update Input */
export type TableUpdateInput = {
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
};

export type Team = {
  __typename?: 'Team';
  _description: Maybe<Scalars['String']>;
  attachments: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  facebook: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  instagram: Maybe<Scalars['String']>;
  name: Maybe<Scalars['String']>;
  notes: Maybe<Scalars['String']>;
  slug: Maybe<Scalars['String']>;
  teamAirtableId: Maybe<Scalars['String']>;
  teamLogo: Maybe<File>;
  teamProfile: Maybe<TeamProfileListResponse>;
  teamSchool: Maybe<SchoolTeamListResponse>;
  twitter: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
  youtube: Maybe<Scalars['String']>;
};

export type TeamTeamProfileArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<TeamProfileFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<TeamProfileGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<TeamProfileOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<TeamProfileSort>>;
};

export type TeamTeamSchoolArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<SchoolTeamFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<SchoolTeamGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<SchoolTeamOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<SchoolTeamSort>>;
};

/** Team create input */
export type TeamCreateInput = {
  attachments?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  instagram?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  teamAirtableId?: Maybe<Scalars['String']>;
  teamLogo?: Maybe<TeamTeamLogoRelationInput>;
  teamProfile?: Maybe<TeamTeamProfileRelationInput>;
  teamSchool?: Maybe<TeamTeamSchoolRelationInput>;
  twitter?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Team create many input */
export type TeamCreateManyInput = {
  attachments?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  instagram?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  teamAirtableId?: Maybe<Scalars['String']>;
  teamLogo?: Maybe<TeamTeamLogoManyRelationInput>;
  teamProfile?: Maybe<TeamTeamProfileManyRelationInput>;
  teamSchool?: Maybe<TeamTeamSchoolManyRelationInput>;
  twitter?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Team delete input */
export type TeamDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** TeamFieldsPermissions create input */
export type TeamFieldsPermissions = {
  attachments?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['Boolean']>;
  facebook?: Maybe<Scalars['Boolean']>;
  instagram?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['Boolean']>;
  notes?: Maybe<Scalars['Boolean']>;
  slug?: Maybe<Scalars['Boolean']>;
  teamAirtableId?: Maybe<Scalars['Boolean']>;
  twitter?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
  youtube?: Maybe<Scalars['Boolean']>;
};

export type TeamFilter = {
  AND?: Maybe<Array<TeamFilter>>;
  OR?: Maybe<Array<TeamFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  attachments?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  facebook?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  instagram?: Maybe<StringPredicate>;
  name?: Maybe<StringPredicate>;
  notes?: Maybe<StringPredicate>;
  slug?: Maybe<StringPredicate>;
  teamAirtableId?: Maybe<StringPredicate>;
  teamLogo?: Maybe<FileFilter>;
  teamProfile?: Maybe<TeamProfileRelationFilter>;
  teamSchool?: Maybe<SchoolTeamRelationFilter>;
  twitter?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
  youtube?: Maybe<StringPredicate>;
};

export type TeamGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: TeamGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type TeamGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  attachments?: Maybe<Array<GroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  facebook?: Maybe<Array<GroupByField>>;
  id?: Maybe<Array<GroupByField>>;
  instagram?: Maybe<Array<GroupByField>>;
  name?: Maybe<Array<GroupByField>>;
  notes?: Maybe<Array<GroupByField>>;
  slug?: Maybe<Array<GroupByField>>;
  teamAirtableId?: Maybe<Array<GroupByField>>;
  teamLogo?: Maybe<FileGroupByQuery>;
  teamProfile?: Maybe<TeamProfileGroupByQuery>;
  teamSchool?: Maybe<SchoolTeamGroupByQuery>;
  twitter?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
  youtube?: Maybe<Array<GroupByField>>;
};

export type TeamKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** TeamListResponse output */
export type TeamListResponse = {
  __typename?: 'TeamListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<Team>;
};

/** Team create input from teamLogo */
export type TeamLogo_TeamCreateInput = {
  attachments?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  instagram?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  teamAirtableId?: Maybe<Scalars['String']>;
  teamLogo?: Maybe<TeamTeamLogoRelationInput>;
  teamProfile?: Maybe<TeamTeamProfileRelationInput>;
  teamSchool?: Maybe<TeamTeamSchoolRelationInput>;
  twitter?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Team update input from teamLogo */
export type TeamLogo_TeamUpdateInput = {
  data: TeamUpdateInput;
  filter?: Maybe<TeamKeyFilter>;
};

/** TeamManyResponse output */
export type TeamManyResponse = {
  __typename?: 'TeamManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<Team>;
};

export type TeamMember = {
  __typename?: 'TeamMember';
  _description: Maybe<Scalars['String']>;
  avatar: Maybe<File>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  isOwner: Maybe<Scalars['Boolean']>;
  roles: Maybe<RoleListResponse>;
  status: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
  user: Maybe<User>;
};

export type TeamMemberRolesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<RoleFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<RoleGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<RoleOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<RoleSort>>;
};

/** TeamMembers delete input */
export type TeamMemberDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** TeamMemberFieldsPermissions create input */
export type TeamMemberFieldsPermissions = {
  createdAt?: Maybe<Scalars['Boolean']>;
  isOwner?: Maybe<Scalars['Boolean']>;
  status?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type TeamMemberFilter = {
  AND?: Maybe<Array<TeamMemberFilter>>;
  OR?: Maybe<Array<TeamMemberFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  avatar?: Maybe<FileFilter>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  isOwner?: Maybe<BoolPredicate>;
  roles?: Maybe<RoleRelationFilter>;
  status?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
  user?: Maybe<UserFilter>;
};

export type TeamMemberGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: TeamMemberGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type TeamMemberGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  avatar?: Maybe<FileGroupByQuery>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  id?: Maybe<Array<GroupByField>>;
  isOwner?: Maybe<Array<GroupByField>>;
  roles?: Maybe<RoleGroupByQuery>;
  status?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
  user?: Maybe<UserGroupByQuery>;
};

export type TeamMemberKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** TeamMemberListResponse output */
export type TeamMemberListResponse = {
  __typename?: 'TeamMemberListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<TeamMember>;
};

/** TeamMemberManyResponse output */
export type TeamMemberManyResponse = {
  __typename?: 'TeamMemberManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<TeamMember>;
};

/** No longer supported. Use `sort` instead. */
export enum TeamMemberOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsOwnerAsc = 'isOwner_ASC',
  IsOwnerDesc = 'isOwner_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** TeamMembers subscription payload */
export type TeamMemberPayload = {
  __typename?: 'TeamMemberPayload';
  mutation: MutationType;
  node: Maybe<TeamMember>;
  previousValues: Maybe<TeamMember>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type TeamMemberRelationFilter = {
  every?: Maybe<TeamMemberFilter>;
  none?: Maybe<TeamMemberFilter>;
  some?: Maybe<TeamMemberFilter>;
};

export type TeamMemberSort = {
  avatar?: Maybe<FileSort>;
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  isOwner?: Maybe<SortOrder>;
  status?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  user?: Maybe<UserSort>;
};

/** TeamMembers subscription filter */
export type TeamMemberSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<TeamMemberFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** TeamMembers update input */
export type TeamMemberUpdateByFilterInput = {
  isOwner?: Maybe<Array<Maybe<UpdateByFilterBooleanSwitchInput>>>;
  status?: Maybe<Array<Maybe<UpdateByFilterStringSwitchInput>>>;
};

/** TeamMembers update input */
export type TeamMemberUpdateInput = {
  avatar?: Maybe<TeamMembersAvatarUpdateRelationInput>;
  id?: Maybe<Scalars['ID']>;
  roles?: Maybe<TeamMembersRolesUpdateRelationInput>;
};

export type TeamMember_PermissionFilter = {
  AND?: Maybe<Array<TeamMember_PermissionFilter>>;
  OR?: Maybe<Array<TeamMember_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  avatar?: Maybe<File_PermissionFilter>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  isOwner?: Maybe<BoolPredicate>;
  roles?: Maybe<Role_PermissionRelationFilter>;
  status?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
  user?: Maybe<User_PermissionFilter>;
};

export type TeamMember_PermissionRelationFilter = {
  every?: Maybe<TeamMember_PermissionFilter>;
  none?: Maybe<TeamMember_PermissionFilter>;
  some?: Maybe<TeamMember_PermissionFilter>;
};

/** TeamMembers relation input */
export type TeamMembersAvatarUpdateRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<TeamMembers_Avatar_FileCreateInput>;
  disconnect?: Maybe<FileKeyFilter>;
  reconnect?: Maybe<FileKeyFilter>;
  update?: Maybe<TeamMembers_Avatar_FileUpdateInput>;
};

/** TeamMembers relation input */
export type TeamMembersRolesUpdateRelationInput = {
  connect?: Maybe<Array<RoleKeyFilter>>;
  create?: Maybe<Array<Maybe<TeamMembers_RoleCreateInput>>>;
  disconnect?: Maybe<Array<RoleKeyFilter>>;
  reconnect?: Maybe<Array<RoleKeyFilter>>;
  update?: Maybe<Array<Maybe<TeamMembers_RoleUpdateInput>>>;
};

/** Roles create input from teamMembers */
export type TeamMembers_RoleCreateInput = {
  apiTokens?: Maybe<RolesApiTokensRelationInput>;
  authenticationProfiles?: Maybe<RolesAuthenticationProfilesRelationInput>;
  description?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  permissions?: Maybe<PermissionsInput>;
  teamMembers?: Maybe<RolesTeamMembersRelationInput>;
  users?: Maybe<RolesUsersRelationInput>;
};

/** Roles update input from teamMembers */
export type TeamMembers_RoleUpdateInput = {
  data: RoleUpdateInput;
  filter?: Maybe<RoleKeyFilter>;
};

/** Files create input from teamMembers_avatar */
export type TeamMembers_Avatar_FileCreateInput = {
  brand_logo?: Maybe<FilesBrand_LogoRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8RelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24RelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8RelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8RelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24RelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailRelationInput>;
  video_video?: Maybe<FilesVideo_VideoRelationInput>;
};

/** Files update input from teamMembers_avatar */
export type TeamMembers_Avatar_FileUpdateInput = {
  brand_logo?: Maybe<FilesBrand_LogoUpdateRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverUpdateRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsUpdateRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsUpdateRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoUpdateRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallUpdateRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8UpdateRelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24UpdateRelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoUpdateRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8UpdateRelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8UpdateRelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24UpdateRelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoUpdateRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarUpdateRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoUpdateRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarUpdateRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewUpdateRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailUpdateRelationInput>;
  video_video?: Maybe<FilesVideo_VideoUpdateRelationInput>;
};

/** No longer supported. Use `sort` instead. */
export enum TeamOrderBy {
  AttachmentsAsc = 'attachments_ASC',
  AttachmentsDesc = 'attachments_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  FacebookAsc = 'facebook_ASC',
  FacebookDesc = 'facebook_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  InstagramAsc = 'instagram_ASC',
  InstagramDesc = 'instagram_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  NotesAsc = 'notes_ASC',
  NotesDesc = 'notes_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  TeamAirtableIdAsc = 'teamAirtableId_ASC',
  TeamAirtableIdDesc = 'teamAirtableId_DESC',
  TwitterAsc = 'twitter_ASC',
  TwitterDesc = 'twitter_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  YoutubeAsc = 'youtube_ASC',
  YoutubeDesc = 'youtube_DESC',
}

/** Team subscription payload */
export type TeamPayload = {
  __typename?: 'TeamPayload';
  mutation: MutationType;
  node: Maybe<Team>;
  previousValues: Maybe<Team>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type TeamProfile = {
  __typename?: 'TeamProfile';
  _description: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  idProfile: Maybe<Profile>;
  idTeam: Maybe<Team>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

/** TeamProfile create input */
export type TeamProfileCreateInput = {
  idProfile?: Maybe<TeamProfileIdProfileRelationInput>;
  idTeam?: Maybe<TeamProfileIdTeamRelationInput>;
};

/** TeamProfile create many input */
export type TeamProfileCreateManyInput = {
  idProfile?: Maybe<TeamProfileIdProfileManyRelationInput>;
  idTeam?: Maybe<TeamProfileIdTeamManyRelationInput>;
};

/** TeamProfile delete input */
export type TeamProfileDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** TeamProfileFieldsPermissions create input */
export type TeamProfileFieldsPermissions = {
  createdAt?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type TeamProfileFilter = {
  AND?: Maybe<Array<TeamProfileFilter>>;
  OR?: Maybe<Array<TeamProfileFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  idProfile?: Maybe<ProfileFilter>;
  idTeam?: Maybe<TeamFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type TeamProfileGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: TeamProfileGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type TeamProfileGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  id?: Maybe<Array<GroupByField>>;
  idProfile?: Maybe<ProfileGroupByQuery>;
  idTeam?: Maybe<TeamGroupByQuery>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

/** TeamProfile relation input */
export type TeamProfileIdProfileManyRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
};

/** TeamProfile relation input */
export type TeamProfileIdProfileRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
  create?: Maybe<ProfileTeam_ProfileCreateInput>;
};

/** TeamProfile relation input */
export type TeamProfileIdProfileUpdateRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
  create?: Maybe<ProfileTeam_ProfileCreateInput>;
  disconnect?: Maybe<ProfileKeyFilter>;
  reconnect?: Maybe<ProfileKeyFilter>;
  update?: Maybe<ProfileTeam_ProfileUpdateInput>;
};

/** TeamProfile relation input */
export type TeamProfileIdTeamManyRelationInput = {
  connect?: Maybe<TeamKeyFilter>;
};

/** TeamProfile relation input */
export type TeamProfileIdTeamRelationInput = {
  connect?: Maybe<TeamKeyFilter>;
  create?: Maybe<TeamProfile_TeamCreateInput>;
};

/** TeamProfile relation input */
export type TeamProfileIdTeamUpdateRelationInput = {
  connect?: Maybe<TeamKeyFilter>;
  create?: Maybe<TeamProfile_TeamCreateInput>;
  disconnect?: Maybe<TeamKeyFilter>;
  reconnect?: Maybe<TeamKeyFilter>;
  update?: Maybe<TeamProfile_TeamUpdateInput>;
};

export type TeamProfileKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** TeamProfileListResponse output */
export type TeamProfileListResponse = {
  __typename?: 'TeamProfileListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<TeamProfile>;
};

/** TeamProfileManyResponse output */
export type TeamProfileManyResponse = {
  __typename?: 'TeamProfileManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<TeamProfile>;
};

/** No longer supported. Use `sort` instead. */
export enum TeamProfileOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** TeamProfile subscription payload */
export type TeamProfilePayload = {
  __typename?: 'TeamProfilePayload';
  mutation: MutationType;
  node: Maybe<TeamProfile>;
  previousValues: Maybe<TeamProfile>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type TeamProfileRelationFilter = {
  every?: Maybe<TeamProfileFilter>;
  none?: Maybe<TeamProfileFilter>;
  some?: Maybe<TeamProfileFilter>;
};

export type TeamProfileSort = {
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  idProfile?: Maybe<ProfileSort>;
  idTeam?: Maybe<TeamSort>;
  updatedAt?: Maybe<SortOrder>;
};

/** TeamProfile subscription filter */
export type TeamProfileSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<TeamProfileFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** TeamProfile update input */
export type TeamProfileUpdateInput = {
  id?: Maybe<Scalars['ID']>;
  idProfile?: Maybe<TeamProfileIdProfileUpdateRelationInput>;
  idTeam?: Maybe<TeamProfileIdTeamUpdateRelationInput>;
};

export type TeamProfile_PermissionFilter = {
  AND?: Maybe<Array<TeamProfile_PermissionFilter>>;
  OR?: Maybe<Array<TeamProfile_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  idProfile?: Maybe<Profile_PermissionFilter>;
  idTeam?: Maybe<Team_PermissionFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type TeamProfile_PermissionRelationFilter = {
  every?: Maybe<TeamProfile_PermissionFilter>;
  none?: Maybe<TeamProfile_PermissionFilter>;
  some?: Maybe<TeamProfile_PermissionFilter>;
};

/** Team create input from teamProfile */
export type TeamProfile_TeamCreateInput = {
  attachments?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  instagram?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  teamAirtableId?: Maybe<Scalars['String']>;
  teamLogo?: Maybe<TeamTeamLogoRelationInput>;
  teamProfile?: Maybe<TeamTeamProfileRelationInput>;
  teamSchool?: Maybe<TeamTeamSchoolRelationInput>;
  twitter?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Team update input from teamProfile */
export type TeamProfile_TeamUpdateInput = {
  attachments?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  instagram?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  teamAirtableId?: Maybe<Scalars['String']>;
  teamLogo?: Maybe<TeamTeamLogoUpdateRelationInput>;
  teamProfile?: Maybe<TeamTeamProfileUpdateRelationInput>;
  teamSchool?: Maybe<TeamTeamSchoolUpdateRelationInput>;
  twitter?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

export type TeamRelationFilter = {
  every?: Maybe<TeamFilter>;
  none?: Maybe<TeamFilter>;
  some?: Maybe<TeamFilter>;
};

/** Team create input from teamSchool */
export type TeamSchool_TeamCreateInput = {
  attachments?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  instagram?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  teamAirtableId?: Maybe<Scalars['String']>;
  teamLogo?: Maybe<TeamTeamLogoRelationInput>;
  teamProfile?: Maybe<TeamTeamProfileRelationInput>;
  teamSchool?: Maybe<TeamTeamSchoolRelationInput>;
  twitter?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Team update input from teamSchool */
export type TeamSchool_TeamUpdateInput = {
  attachments?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  instagram?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  teamAirtableId?: Maybe<Scalars['String']>;
  teamLogo?: Maybe<TeamTeamLogoUpdateRelationInput>;
  teamProfile?: Maybe<TeamTeamProfileUpdateRelationInput>;
  teamSchool?: Maybe<TeamTeamSchoolUpdateRelationInput>;
  twitter?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

export type TeamSort = {
  attachments?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  facebook?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  instagram?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  notes?: Maybe<SortOrder>;
  slug?: Maybe<SortOrder>;
  teamAirtableId?: Maybe<SortOrder>;
  teamLogo?: Maybe<FileSort>;
  twitter?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  youtube?: Maybe<SortOrder>;
};

/** Team subscription filter */
export type TeamSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<TeamFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** Team relation input */
export type TeamTeamLogoManyRelationInput = {
  connect?: Maybe<FileKeyFilter>;
};

/** Team relation input */
export type TeamTeamLogoRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Teams_TeamLogo_FileCreateInput>;
};

/** Team relation input */
export type TeamTeamLogoUpdateRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Teams_TeamLogo_FileCreateInput>;
  disconnect?: Maybe<FileKeyFilter>;
  reconnect?: Maybe<FileKeyFilter>;
  update?: Maybe<Teams_TeamLogo_FileUpdateInput>;
};

/** Team relation input */
export type TeamTeamProfileManyRelationInput = {
  connect?: Maybe<Array<TeamProfileKeyFilter>>;
};

/** Team relation input */
export type TeamTeamProfileRelationInput = {
  connect?: Maybe<Array<TeamProfileKeyFilter>>;
  create?: Maybe<Array<Maybe<IdTeam_TeamProfileCreateInput>>>;
};

/** Team relation input */
export type TeamTeamProfileUpdateRelationInput = {
  connect?: Maybe<Array<TeamProfileKeyFilter>>;
  create?: Maybe<Array<Maybe<IdTeam_TeamProfileCreateInput>>>;
  disconnect?: Maybe<Array<TeamProfileKeyFilter>>;
  reconnect?: Maybe<Array<TeamProfileKeyFilter>>;
  update?: Maybe<Array<Maybe<IdTeam_TeamProfileUpdateInput>>>;
};

/** Team relation input */
export type TeamTeamSchoolManyRelationInput = {
  connect?: Maybe<Array<SchoolTeamKeyFilter>>;
};

/** Team relation input */
export type TeamTeamSchoolRelationInput = {
  connect?: Maybe<Array<SchoolTeamKeyFilter>>;
  create?: Maybe<Array<Maybe<IdTeam_SchoolTeamCreateInput>>>;
};

/** Team relation input */
export type TeamTeamSchoolUpdateRelationInput = {
  connect?: Maybe<Array<SchoolTeamKeyFilter>>;
  create?: Maybe<Array<Maybe<IdTeam_SchoolTeamCreateInput>>>;
  disconnect?: Maybe<Array<SchoolTeamKeyFilter>>;
  reconnect?: Maybe<Array<SchoolTeamKeyFilter>>;
  update?: Maybe<Array<Maybe<IdTeam_SchoolTeamUpdateInput>>>;
};

/** Team update input */
export type TeamUpdateByFilterInput = {
  attachments?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  facebook?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  instagram?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  name?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  notes?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  slug?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  teamAirtableId?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  twitter?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  youtube?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** Team update input */
export type TeamUpdateInput = {
  attachments?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  instagram?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  teamAirtableId?: Maybe<Scalars['String']>;
  teamLogo?: Maybe<TeamTeamLogoUpdateRelationInput>;
  teamProfile?: Maybe<TeamTeamProfileUpdateRelationInput>;
  teamSchool?: Maybe<TeamTeamSchoolUpdateRelationInput>;
  twitter?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

export type Team_PermissionFilter = {
  AND?: Maybe<Array<Team_PermissionFilter>>;
  OR?: Maybe<Array<Team_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  attachments?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  facebook?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  instagram?: Maybe<StringPredicate>;
  name?: Maybe<StringPredicate>;
  notes?: Maybe<StringPredicate>;
  slug?: Maybe<StringPredicate>;
  teamAirtableId?: Maybe<StringPredicate>;
  teamLogo?: Maybe<File_PermissionFilter>;
  teamProfile?: Maybe<TeamProfile_PermissionRelationFilter>;
  teamSchool?: Maybe<SchoolTeam_PermissionRelationFilter>;
  twitter?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
  youtube?: Maybe<StringPredicate>;
};

export type Team_PermissionRelationFilter = {
  every?: Maybe<Team_PermissionFilter>;
  none?: Maybe<Team_PermissionFilter>;
  some?: Maybe<Team_PermissionFilter>;
};

/** Files create input from teams_teamLogo */
export type Teams_TeamLogo_FileCreateInput = {
  brand_logo?: Maybe<FilesBrand_LogoRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8RelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24RelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8RelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8RelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24RelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailRelationInput>;
  video_video?: Maybe<FilesVideo_VideoRelationInput>;
};

/** Files update input from teams_teamLogo */
export type Teams_TeamLogo_FileUpdateInput = {
  brand_logo?: Maybe<FilesBrand_LogoUpdateRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverUpdateRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsUpdateRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsUpdateRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoUpdateRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallUpdateRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8UpdateRelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24UpdateRelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoUpdateRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8UpdateRelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8UpdateRelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24UpdateRelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoUpdateRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarUpdateRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoUpdateRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarUpdateRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewUpdateRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailUpdateRelationInput>;
  video_video?: Maybe<FilesVideo_VideoUpdateRelationInput>;
};

export type Text = {
  __typename?: 'Text';
  _description: Maybe<Scalars['String']>;
  airtableId: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  enUS: Maybe<Scalars['String']>;
  es: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  key: Maybe<Scalars['String']>;
  ko: Maybe<Scalars['String']>;
  ptBR: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

/** Text create input */
export type TextCreateInput = {
  airtableId?: Maybe<Scalars['String']>;
  enUS?: Maybe<Scalars['String']>;
  es?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['String']>;
  ko?: Maybe<Scalars['String']>;
  ptBR?: Maybe<Scalars['String']>;
};

/** Text create many input */
export type TextCreateManyInput = {
  airtableId?: Maybe<Scalars['String']>;
  enUS?: Maybe<Scalars['String']>;
  es?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['String']>;
  ko?: Maybe<Scalars['String']>;
  ptBR?: Maybe<Scalars['String']>;
};

/** Text delete input */
export type TextDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** Text Field Attributes */
export type TextFieldTypeAttributes = {
  __typename?: 'TextFieldTypeAttributes';
  fieldSize: Maybe<Scalars['Int']>;
  format: Scalars['String'];
};

/** TextFieldsPermissions create input */
export type TextFieldsPermissions = {
  airtableId?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['Boolean']>;
  enUS?: Maybe<Scalars['Boolean']>;
  es?: Maybe<Scalars['Boolean']>;
  key?: Maybe<Scalars['Boolean']>;
  ko?: Maybe<Scalars['Boolean']>;
  ptBR?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type TextFilter = {
  AND?: Maybe<Array<TextFilter>>;
  OR?: Maybe<Array<TextFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  airtableId?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  enUS?: Maybe<StringPredicate>;
  es?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  key?: Maybe<StringPredicate>;
  ko?: Maybe<StringPredicate>;
  ptBR?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type TextGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: TextGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type TextGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  airtableId?: Maybe<Array<GroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  enUS?: Maybe<Array<GroupByField>>;
  es?: Maybe<Array<GroupByField>>;
  id?: Maybe<Array<GroupByField>>;
  key?: Maybe<Array<GroupByField>>;
  ko?: Maybe<Array<GroupByField>>;
  ptBR?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

export type TextKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** TextListResponse output */
export type TextListResponse = {
  __typename?: 'TextListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<Text>;
};

/** TextManyResponse output */
export type TextManyResponse = {
  __typename?: 'TextManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<Text>;
};

/** No longer supported. Use `sort` instead. */
export enum TextOrderBy {
  AirtableIdAsc = 'airtableId_ASC',
  AirtableIdDesc = 'airtableId_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  EnUsAsc = 'enUS_ASC',
  EnUsDesc = 'enUS_DESC',
  EsAsc = 'es_ASC',
  EsDesc = 'es_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  KeyAsc = 'key_ASC',
  KeyDesc = 'key_DESC',
  KoAsc = 'ko_ASC',
  KoDesc = 'ko_DESC',
  PtBrAsc = 'ptBR_ASC',
  PtBrDesc = 'ptBR_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** Text subscription payload */
export type TextPayload = {
  __typename?: 'TextPayload';
  mutation: MutationType;
  node: Maybe<Text>;
  previousValues: Maybe<Text>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type TextSort = {
  airtableId?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  enUS?: Maybe<SortOrder>;
  es?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  key?: Maybe<SortOrder>;
  ko?: Maybe<SortOrder>;
  ptBR?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
};

/** Text subscription filter */
export type TextSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<TextFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** Text Type Format Enum */
export enum TextTypeFormatEnum {
  Ein = 'EIN',
  Email = 'EMAIL',
  Html = 'HTML',
  Markdown = 'MARKDOWN',
  Name = 'NAME',
  Unformatted = 'UNFORMATTED',
}

/** Text update input */
export type TextUpdateByFilterInput = {
  airtableId?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  enUS?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  es?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  key?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  ko?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  ptBR?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** Text update input */
export type TextUpdateInput = {
  airtableId?: Maybe<Scalars['String']>;
  enUS?: Maybe<Scalars['String']>;
  es?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  key?: Maybe<Scalars['String']>;
  ko?: Maybe<Scalars['String']>;
  ptBR?: Maybe<Scalars['String']>;
};

export type Text_PermissionFilter = {
  AND?: Maybe<Array<Text_PermissionFilter>>;
  OR?: Maybe<Array<Text_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  airtableId?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  enUS?: Maybe<StringPredicate>;
  es?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  key?: Maybe<StringPredicate>;
  ko?: Maybe<StringPredicate>;
  ptBR?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

/** Video create input from thumbnail */
export type Thumbnail_VideoCreateInput = {
  category?: Maybe<Scalars['String']>;
  dutarion?: Maybe<Scalars['Int']>;
  preview?: Maybe<VideoPreviewRelationInput>;
  profile?: Maybe<VideoProfileRelationInput>;
  thumbnail?: Maybe<VideoThumbnailRelationInput>;
  title?: Maybe<Scalars['String']>;
  video?: Maybe<VideoVideoRelationInput>;
  youtubeID?: Maybe<Scalars['String']>;
};

/** Video update input from thumbnail */
export type Thumbnail_VideoUpdateInput = {
  data: VideoUpdateInput;
  filter?: Maybe<VideoKeyFilter>;
};

export type TrimFunctionArguments = {
  mode?: Maybe<StringTrimMode>;
  str: Scalars['String'];
};

/** UUID Field Attributes */
export type UuidFieldTypeAttributes = {
  __typename?: 'UUIDFieldTypeAttributes';
  fieldSize: Maybe<Scalars['Int']>;
};

export type Unknow = {
  __typename?: 'Unknow';
  _description: Maybe<Scalars['String']>;
  academy: Maybe<Scalars['String']>;
  address: Maybe<Scalars['String']>;
  city: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  email: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  instructor: Maybe<Scalars['String']>;
  phone: Maybe<Scalars['String']>;
  school: Maybe<Scalars['String']>;
  site: Maybe<Scalars['String']>;
  unknowAirtableId: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

/** Unknow create input */
export type UnknowCreateInput = {
  academy?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  instructor?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  school?: Maybe<Scalars['String']>;
  site?: Maybe<Scalars['String']>;
  unknowAirtableId?: Maybe<Scalars['String']>;
};

/** Unknow create many input */
export type UnknowCreateManyInput = {
  academy?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  instructor?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  school?: Maybe<Scalars['String']>;
  site?: Maybe<Scalars['String']>;
  unknowAirtableId?: Maybe<Scalars['String']>;
};

/** Unknow delete input */
export type UnknowDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** UnknowFieldsPermissions create input */
export type UnknowFieldsPermissions = {
  academy?: Maybe<Scalars['Boolean']>;
  address?: Maybe<Scalars['Boolean']>;
  city?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['Boolean']>;
  email?: Maybe<Scalars['Boolean']>;
  instructor?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['Boolean']>;
  school?: Maybe<Scalars['Boolean']>;
  site?: Maybe<Scalars['Boolean']>;
  unknowAirtableId?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type UnknowFilter = {
  AND?: Maybe<Array<UnknowFilter>>;
  OR?: Maybe<Array<UnknowFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  academy?: Maybe<StringPredicate>;
  address?: Maybe<StringPredicate>;
  city?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  email?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  instructor?: Maybe<StringPredicate>;
  phone?: Maybe<StringPredicate>;
  school?: Maybe<StringPredicate>;
  site?: Maybe<StringPredicate>;
  unknowAirtableId?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type UnknowGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: UnknowGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type UnknowGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  academy?: Maybe<Array<GroupByField>>;
  address?: Maybe<Array<GroupByField>>;
  city?: Maybe<Array<GroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  email?: Maybe<Array<GroupByField>>;
  id?: Maybe<Array<GroupByField>>;
  instructor?: Maybe<Array<GroupByField>>;
  phone?: Maybe<Array<GroupByField>>;
  school?: Maybe<Array<GroupByField>>;
  site?: Maybe<Array<GroupByField>>;
  unknowAirtableId?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

export type UnknowKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** UnknowListResponse output */
export type UnknowListResponse = {
  __typename?: 'UnknowListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<Unknow>;
};

/** UnknowManyResponse output */
export type UnknowManyResponse = {
  __typename?: 'UnknowManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<Unknow>;
};

/** No longer supported. Use `sort` instead. */
export enum UnknowOrderBy {
  AcademyAsc = 'academy_ASC',
  AcademyDesc = 'academy_DESC',
  AddressAsc = 'address_ASC',
  AddressDesc = 'address_DESC',
  CityAsc = 'city_ASC',
  CityDesc = 'city_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  EmailAsc = 'email_ASC',
  EmailDesc = 'email_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  InstructorAsc = 'instructor_ASC',
  InstructorDesc = 'instructor_DESC',
  PhoneAsc = 'phone_ASC',
  PhoneDesc = 'phone_DESC',
  SchoolAsc = 'school_ASC',
  SchoolDesc = 'school_DESC',
  SiteAsc = 'site_ASC',
  SiteDesc = 'site_DESC',
  UnknowAirtableIdAsc = 'unknowAirtableId_ASC',
  UnknowAirtableIdDesc = 'unknowAirtableId_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** Unknow subscription payload */
export type UnknowPayload = {
  __typename?: 'UnknowPayload';
  mutation: MutationType;
  node: Maybe<Unknow>;
  previousValues: Maybe<Unknow>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type UnknowSort = {
  academy?: Maybe<SortOrder>;
  address?: Maybe<SortOrder>;
  city?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  email?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  instructor?: Maybe<SortOrder>;
  phone?: Maybe<SortOrder>;
  school?: Maybe<SortOrder>;
  site?: Maybe<SortOrder>;
  unknowAirtableId?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
};

/** Unknow subscription filter */
export type UnknowSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<UnknowFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** Unknow update input */
export type UnknowUpdateByFilterInput = {
  academy?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  address?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  city?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  email?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  instructor?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  phone?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  school?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  site?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  unknowAirtableId?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** Unknow update input */
export type UnknowUpdateInput = {
  academy?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  instructor?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  school?: Maybe<Scalars['String']>;
  site?: Maybe<Scalars['String']>;
  unknowAirtableId?: Maybe<Scalars['String']>;
};

export type Unknow_PermissionFilter = {
  AND?: Maybe<Array<Unknow_PermissionFilter>>;
  OR?: Maybe<Array<Unknow_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  academy?: Maybe<StringPredicate>;
  address?: Maybe<StringPredicate>;
  city?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  email?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  instructor?: Maybe<StringPredicate>;
  phone?: Maybe<StringPredicate>;
  school?: Maybe<StringPredicate>;
  site?: Maybe<StringPredicate>;
  unknowAirtableId?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type UpdateByFilterBooleanSwitchInput = {
  invert?: Maybe<Scalars['Boolean']>;
  set?: Maybe<Scalars['Boolean']>;
};

export type UpdateByFilterDateInput = {
  add?: Maybe<UpdateByFilterDatePartsInput>;
  set?: Maybe<Scalars['String']>;
  sub?: Maybe<UpdateByFilterDatePartsInput>;
};

export type UpdateByFilterDatePartsInput = {
  days?: Maybe<Scalars['Int']>;
  months?: Maybe<Scalars['Int']>;
  years?: Maybe<Scalars['Int']>;
};

export type UpdateByFilterDateTimeInput = {
  add?: Maybe<UpdateByFilterDateTimePartsInput>;
  set?: Maybe<Scalars['String']>;
  sub?: Maybe<UpdateByFilterDateTimePartsInput>;
};

export type UpdateByFilterDateTimePartsInput = {
  days?: Maybe<Scalars['Int']>;
  hours?: Maybe<Scalars['Int']>;
  microseconds?: Maybe<Scalars['Int']>;
  minutes?: Maybe<Scalars['Int']>;
  months?: Maybe<Scalars['Int']>;
  seconds?: Maybe<Scalars['Int']>;
  years?: Maybe<Scalars['Int']>;
};

export type UpdateByFilterFloatInput = {
  add?: Maybe<Scalars['Float']>;
  div?: Maybe<Scalars['Float']>;
  mod?: Maybe<Scalars['Float']>;
  mult?: Maybe<Scalars['Float']>;
  pow?: Maybe<Scalars['Float']>;
  prec?: Maybe<Scalars['Int']>;
  set?: Maybe<Scalars['Float']>;
  sqrt?: Maybe<Scalars['Boolean']>;
  sub?: Maybe<Scalars['Float']>;
};

export type UpdateByFilterIntInput = {
  add?: Maybe<Scalars['Int']>;
  div?: Maybe<Scalars['Int']>;
  mod?: Maybe<Scalars['Int']>;
  mult?: Maybe<Scalars['Int']>;
  pow?: Maybe<Scalars['Int']>;
  prec?: Maybe<Scalars['Int']>;
  set?: Maybe<Scalars['Int']>;
  sqrt?: Maybe<Scalars['Boolean']>;
  sub?: Maybe<Scalars['Int']>;
};

export type UpdateByFilterJsonInput = {
  set?: Maybe<Scalars['JSON']>;
};

export type UpdateByFilterListStringInput = {
  insert?: Maybe<UpdateByFilterListStringInsertOperationInput>;
  push?: Maybe<Array<Maybe<Scalars['String']>>>;
  remove?: Maybe<Array<Maybe<Scalars['Int']>>>;
  removeValue?: Maybe<Scalars['String']>;
  set?: Maybe<Array<Maybe<Scalars['String']>>>;
  swap?: Maybe<Array<Maybe<Scalars['Int']>>>;
  unshift?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type UpdateByFilterListStringInsertOperationInput = {
  start: Scalars['Int'];
  values: Array<Scalars['String']>;
};

export type UpdateByFilterStringInput = {
  postfix?: Maybe<Scalars['String']>;
  prefix?: Maybe<Scalars['String']>;
  set?: Maybe<Scalars['String']>;
};

export type UpdateByFilterStringSwitchInput = {
  set?: Maybe<Scalars['String']>;
};

/** UpdatedFieldsFilter */
export type UpdatedFieldsFilter = {
  contains?: Maybe<Array<Maybe<Scalars['String']>>>;
  every?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type User = {
  __typename?: 'User';
  _description: Maybe<Scalars['String']>;
  avatar: Maybe<File>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  email: Maybe<Scalars['String']>;
  firstName: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  idUser: Maybe<UserProfileListResponse>;
  is8base: Maybe<Scalars['Boolean']>;
  lastName: Maybe<Scalars['String']>;
  origin: Maybe<Scalars['String']>;
  permissions: Maybe<UserPermissionList>;
  roles: Maybe<RoleListResponse>;
  schools: Maybe<UserSchoolListResponse>;
  status: Maybe<Scalars['String']>;
  timezone: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

export type UserIdUserArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<UserProfileFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<UserProfileGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<UserProfileOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<UserProfileSort>>;
};

export type UserPermissionsArgs = {
  filter?: Maybe<PermissionInputFilter>;
};

export type UserRolesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<RoleFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<RoleGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<RoleOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<RoleSort>>;
};

export type UserSchoolsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<UserSchoolFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<UserSchoolGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<UserSchoolOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<UserSchoolSort>>;
};

export type UserBillingConfigurationResponse = {
  __typename?: 'UserBillingConfigurationResponse';
  availablePlans: Array<BillingPlanBaseInfo>;
  isCancelSubscriptionAvailable: Scalars['Boolean'];
  isFreePlanAvailable: Scalars['Boolean'];
};

/** Users create input */
export type UserCreateInput = {
  avatar?: Maybe<UsersAvatarRelationInput>;
  email: Scalars['String'];
  firstName?: Maybe<Scalars['String']>;
  idUser?: Maybe<UsersIdUserRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  roles?: Maybe<UsersRolesRelationInput>;
  schools?: Maybe<UsersSchoolsRelationInput>;
  status?: Maybe<Scalars['String']>;
  timezone?: Maybe<Scalars['String']>;
};

/** Users create many input */
export type UserCreateManyInput = {
  avatar?: Maybe<UsersAvatarManyRelationInput>;
  email: Scalars['String'];
  firstName?: Maybe<Scalars['String']>;
  idUser?: Maybe<UsersIdUserManyRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  roles?: Maybe<UsersRolesManyRelationInput>;
  schools?: Maybe<UsersSchoolsManyRelationInput>;
  status?: Maybe<Scalars['String']>;
  timezone?: Maybe<Scalars['String']>;
};

/** Users delete input */
export type UserDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** UserFieldsPermissions create input */
export type UserFieldsPermissions = {
  createdAt?: Maybe<Scalars['Boolean']>;
  email?: Maybe<Scalars['Boolean']>;
  firstName?: Maybe<Scalars['Boolean']>;
  is8base?: Maybe<Scalars['Boolean']>;
  lastName?: Maybe<Scalars['Boolean']>;
  origin?: Maybe<Scalars['Boolean']>;
  status?: Maybe<Scalars['Boolean']>;
  timezone?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type UserFilter = {
  AND?: Maybe<Array<UserFilter>>;
  OR?: Maybe<Array<UserFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  avatar?: Maybe<FileFilter>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  email?: Maybe<StringPredicate>;
  firstName?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  idUser?: Maybe<UserProfileRelationFilter>;
  is8base?: Maybe<BoolPredicate>;
  is_self?: Maybe<Scalars['Boolean']>;
  lastName?: Maybe<StringPredicate>;
  not_self?: Maybe<Scalars['Boolean']>;
  origin?: Maybe<StringPredicate>;
  roles?: Maybe<RoleRelationFilter>;
  schools?: Maybe<UserSchoolRelationFilter>;
  status?: Maybe<StringPredicate>;
  timezone?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type UserGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: UserGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type UserGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  avatar?: Maybe<FileGroupByQuery>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  email?: Maybe<Array<GroupByField>>;
  firstName?: Maybe<Array<GroupByField>>;
  id?: Maybe<Array<GroupByField>>;
  idUser?: Maybe<UserProfileGroupByQuery>;
  is8base?: Maybe<Array<GroupByField>>;
  lastName?: Maybe<Array<GroupByField>>;
  origin?: Maybe<Array<GroupByField>>;
  roles?: Maybe<RoleGroupByQuery>;
  schools?: Maybe<UserSchoolGroupByQuery>;
  status?: Maybe<Array<GroupByField>>;
  timezone?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

/** User Invitation Details */
export type UserInvitationDetails = {
  __typename?: 'UserInvitationDetails';
  accepted: Maybe<Scalars['Boolean']>;
  acceptedOn: Maybe<Scalars['DateTime']>;
  apiHost: Maybe<Scalars['String']>;
  email: Maybe<Scalars['String']>;
  firstName: Maybe<Scalars['String']>;
  id: Maybe<Scalars['String']>;
  invitedBy: Maybe<InvitedByName>;
  isRegistered: Maybe<Scalars['Boolean']>;
  lastName: Maybe<Scalars['String']>;
  resentOn: Maybe<Scalars['DateTime']>;
};

/** User Invitation List */
export type UserInvitationList = {
  __typename?: 'UserInvitationList';
  count: Maybe<Scalars['Int']>;
  items: Maybe<Array<Maybe<UserInvitationDetails>>>;
};

export type UserKeyFilter = {
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
};

/** UserListResponse output */
export type UserListResponse = {
  __typename?: 'UserListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<User>;
};

/** UserLoginInput */
export type UserLoginInput = {
  authProfileId?: Maybe<Scalars['ID']>;
  email: Scalars['String'];
  fromInvitation?: Maybe<Scalars['String']>;
  password: Scalars['String'];
};

/** UserManyResponse output */
export type UserManyResponse = {
  __typename?: 'UserManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<User>;
};

/** No longer supported. Use `sort` instead. */
export enum UserOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  EmailAsc = 'email_ASC',
  EmailDesc = 'email_DESC',
  FirstNameAsc = 'firstName_ASC',
  FirstNameDesc = 'firstName_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  Is8baseAsc = 'is8base_ASC',
  Is8baseDesc = 'is8base_DESC',
  IsOwnerAsc = 'isOwner_ASC',
  IsOwnerDesc = 'isOwner_DESC',
  LastNameAsc = 'lastName_ASC',
  LastNameDesc = 'lastName_DESC',
  OriginAsc = 'origin_ASC',
  OriginDesc = 'origin_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  TimezoneAsc = 'timezone_ASC',
  TimezoneDesc = 'timezone_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** Users subscription payload */
export type UserPayload = {
  __typename?: 'UserPayload';
  mutation: MutationType;
  node: Maybe<User>;
  previousValues: Maybe<User>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** User Permission */
export type UserPermission = {
  __typename?: 'UserPermission';
  permission: Maybe<Scalars['JSON']>;
  resource: Maybe<Scalars['String']>;
  resourceType: Maybe<Scalars['String']>;
};

/** User Permission List */
export type UserPermissionList = {
  __typename?: 'UserPermissionList';
  count: Scalars['Int'];
  items: Maybe<Array<UserPermission>>;
};

export type UserProfile = {
  __typename?: 'UserProfile';
  _description: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  idProfile: Maybe<Profile>;
  idUser: Maybe<User>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

/** UserProfile create input */
export type UserProfileCreateInput = {
  idProfile?: Maybe<UserProfileIdProfileRelationInput>;
  idUser?: Maybe<UserProfileIdUserRelationInput>;
};

/** UserProfile create many input */
export type UserProfileCreateManyInput = {
  idProfile?: Maybe<UserProfileIdProfileManyRelationInput>;
  idUser?: Maybe<UserProfileIdUserManyRelationInput>;
};

/** UserProfile delete input */
export type UserProfileDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** UserProfileFieldsPermissions create input */
export type UserProfileFieldsPermissions = {
  createdAt?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type UserProfileFilter = {
  AND?: Maybe<Array<UserProfileFilter>>;
  OR?: Maybe<Array<UserProfileFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  idProfile?: Maybe<ProfileFilter>;
  idUser?: Maybe<UserFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type UserProfileGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: UserProfileGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type UserProfileGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  id?: Maybe<Array<GroupByField>>;
  idProfile?: Maybe<ProfileGroupByQuery>;
  idUser?: Maybe<UserGroupByQuery>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

/** UserProfile relation input */
export type UserProfileIdProfileManyRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
};

/** UserProfile relation input */
export type UserProfileIdProfileRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
  create?: Maybe<IdProfile_ProfileCreateInput>;
};

/** UserProfile relation input */
export type UserProfileIdProfileUpdateRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
  create?: Maybe<IdProfile_ProfileCreateInput>;
  disconnect?: Maybe<ProfileKeyFilter>;
  reconnect?: Maybe<ProfileKeyFilter>;
  update?: Maybe<IdProfile_ProfileUpdateInput>;
};

/** UserProfile relation input */
export type UserProfileIdUserManyRelationInput = {
  connect?: Maybe<UserKeyFilter>;
};

/** UserProfile relation input */
export type UserProfileIdUserRelationInput = {
  connect?: Maybe<UserKeyFilter>;
  create?: Maybe<IdUser_UserCreateInput>;
};

/** UserProfile relation input */
export type UserProfileIdUserUpdateRelationInput = {
  connect?: Maybe<UserKeyFilter>;
  create?: Maybe<IdUser_UserCreateInput>;
  disconnect?: Maybe<UserKeyFilter>;
  reconnect?: Maybe<UserKeyFilter>;
  update?: Maybe<IdUser_UserUpdateInput>;
};

export type UserProfileKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** UserProfileListResponse output */
export type UserProfileListResponse = {
  __typename?: 'UserProfileListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<UserProfile>;
};

/** UserProfileManyResponse output */
export type UserProfileManyResponse = {
  __typename?: 'UserProfileManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<UserProfile>;
};

/** No longer supported. Use `sort` instead. */
export enum UserProfileOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** UserProfile subscription payload */
export type UserProfilePayload = {
  __typename?: 'UserProfilePayload';
  mutation: MutationType;
  node: Maybe<UserProfile>;
  previousValues: Maybe<UserProfile>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type UserProfileRelationFilter = {
  every?: Maybe<UserProfileFilter>;
  none?: Maybe<UserProfileFilter>;
  some?: Maybe<UserProfileFilter>;
};

export type UserProfileSort = {
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  idProfile?: Maybe<ProfileSort>;
  idUser?: Maybe<UserSort>;
  updatedAt?: Maybe<SortOrder>;
};

/** UserProfile subscription filter */
export type UserProfileSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<UserProfileFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** UserProfile update input */
export type UserProfileUpdateInput = {
  id?: Maybe<Scalars['ID']>;
  idProfile?: Maybe<UserProfileIdProfileUpdateRelationInput>;
  idUser?: Maybe<UserProfileIdUserUpdateRelationInput>;
};

export type UserProfile_PermissionFilter = {
  AND?: Maybe<Array<UserProfile_PermissionFilter>>;
  OR?: Maybe<Array<UserProfile_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  idProfile?: Maybe<Profile_PermissionFilter>;
  idUser?: Maybe<User_PermissionFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type UserProfile_PermissionRelationFilter = {
  every?: Maybe<UserProfile_PermissionFilter>;
  none?: Maybe<UserProfile_PermissionFilter>;
  some?: Maybe<UserProfile_PermissionFilter>;
};

export type UserRelationFilter = {
  every?: Maybe<UserFilter>;
  none?: Maybe<UserFilter>;
  some?: Maybe<UserFilter>;
};

export type UserSchool = {
  __typename?: 'UserSchool';
  _description: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  idSchool: Maybe<School>;
  idUser: Maybe<User>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

/** UserSchool create input */
export type UserSchoolCreateInput = {
  idSchool?: Maybe<UserSchoolIdSchoolRelationInput>;
  idUser?: Maybe<UserSchoolIdUserRelationInput>;
};

/** UserSchool create many input */
export type UserSchoolCreateManyInput = {
  idSchool?: Maybe<UserSchoolIdSchoolManyRelationInput>;
  idUser?: Maybe<UserSchoolIdUserManyRelationInput>;
};

/** UserSchool delete input */
export type UserSchoolDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** UserSchoolFieldsPermissions create input */
export type UserSchoolFieldsPermissions = {
  createdAt?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type UserSchoolFilter = {
  AND?: Maybe<Array<UserSchoolFilter>>;
  OR?: Maybe<Array<UserSchoolFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  idSchool?: Maybe<SchoolFilter>;
  idUser?: Maybe<UserFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type UserSchoolGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: UserSchoolGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type UserSchoolGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  id?: Maybe<Array<GroupByField>>;
  idSchool?: Maybe<SchoolGroupByQuery>;
  idUser?: Maybe<UserGroupByQuery>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

/** UserSchool relation input */
export type UserSchoolIdSchoolManyRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
};

/** UserSchool relation input */
export type UserSchoolIdSchoolRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<User_SchoolCreateInput>;
};

/** UserSchool relation input */
export type UserSchoolIdSchoolUpdateRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<User_SchoolCreateInput>;
  disconnect?: Maybe<SchoolKeyFilter>;
  reconnect?: Maybe<SchoolKeyFilter>;
  update?: Maybe<User_SchoolUpdateInput>;
};

/** UserSchool relation input */
export type UserSchoolIdUserManyRelationInput = {
  connect?: Maybe<UserKeyFilter>;
};

/** UserSchool relation input */
export type UserSchoolIdUserRelationInput = {
  connect?: Maybe<UserKeyFilter>;
  create?: Maybe<Schools_UserCreateInput>;
};

/** UserSchool relation input */
export type UserSchoolIdUserUpdateRelationInput = {
  connect?: Maybe<UserKeyFilter>;
  create?: Maybe<Schools_UserCreateInput>;
  disconnect?: Maybe<UserKeyFilter>;
  reconnect?: Maybe<UserKeyFilter>;
  update?: Maybe<Schools_UserUpdateInput>;
};

export type UserSchoolKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** UserSchoolListResponse output */
export type UserSchoolListResponse = {
  __typename?: 'UserSchoolListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<UserSchool>;
};

/** UserSchoolManyResponse output */
export type UserSchoolManyResponse = {
  __typename?: 'UserSchoolManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<UserSchool>;
};

/** No longer supported. Use `sort` instead. */
export enum UserSchoolOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** UserSchool subscription payload */
export type UserSchoolPayload = {
  __typename?: 'UserSchoolPayload';
  mutation: MutationType;
  node: Maybe<UserSchool>;
  previousValues: Maybe<UserSchool>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type UserSchoolRelationFilter = {
  every?: Maybe<UserSchoolFilter>;
  none?: Maybe<UserSchoolFilter>;
  some?: Maybe<UserSchoolFilter>;
};

export type UserSchoolSort = {
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  idSchool?: Maybe<SchoolSort>;
  idUser?: Maybe<UserSort>;
  updatedAt?: Maybe<SortOrder>;
};

/** UserSchool subscription filter */
export type UserSchoolSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<UserSchoolFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** UserSchool update input */
export type UserSchoolUpdateInput = {
  id?: Maybe<Scalars['ID']>;
  idSchool?: Maybe<UserSchoolIdSchoolUpdateRelationInput>;
  idUser?: Maybe<UserSchoolIdUserUpdateRelationInput>;
};

export type UserSchool_PermissionFilter = {
  AND?: Maybe<Array<UserSchool_PermissionFilter>>;
  OR?: Maybe<Array<UserSchool_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  idSchool?: Maybe<School_PermissionFilter>;
  idUser?: Maybe<User_PermissionFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type UserSchool_PermissionRelationFilter = {
  every?: Maybe<UserSchool_PermissionFilter>;
  none?: Maybe<UserSchool_PermissionFilter>;
  some?: Maybe<UserSchool_PermissionFilter>;
};

export type UserSort = {
  avatar?: Maybe<FileSort>;
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  email?: Maybe<SortOrder>;
  firstName?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  is8base?: Maybe<SortOrder>;
  lastName?: Maybe<SortOrder>;
  origin?: Maybe<SortOrder>;
  status?: Maybe<SortOrder>;
  timezone?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
};

/** Users subscription filter */
export type UserSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<UserFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** Users update input */
export type UserUpdateByFilterInput = {
  email?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  firstName?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  is8base?: Maybe<Array<Maybe<UpdateByFilterBooleanSwitchInput>>>;
  isOwner?: Maybe<Array<Maybe<UpdateByFilterBooleanSwitchInput>>>;
  lastName?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  origin?: Maybe<Array<Maybe<UpdateByFilterStringSwitchInput>>>;
  status?: Maybe<Array<Maybe<UpdateByFilterStringSwitchInput>>>;
  timezone?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** Users update input */
export type UserUpdateInput = {
  avatar?: Maybe<UsersAvatarUpdateRelationInput>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  idUser?: Maybe<UsersIdUserUpdateRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  roles?: Maybe<UsersRolesUpdateRelationInput>;
  schools?: Maybe<UsersSchoolsUpdateRelationInput>;
  status?: Maybe<Scalars['String']>;
  timezone?: Maybe<Scalars['String']>;
};

export type User_PermissionFilter = {
  AND?: Maybe<Array<User_PermissionFilter>>;
  OR?: Maybe<Array<User_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  avatar?: Maybe<File_PermissionFilter>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  email?: Maybe<StringPredicate>;
  firstName?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  idUser?: Maybe<UserProfile_PermissionRelationFilter>;
  is8base?: Maybe<BoolPredicate>;
  is_self?: Maybe<Scalars['Boolean']>;
  lastName?: Maybe<StringPredicate>;
  not_self?: Maybe<Scalars['Boolean']>;
  origin?: Maybe<StringPredicate>;
  roles?: Maybe<Role_PermissionRelationFilter>;
  schools?: Maybe<UserSchool_PermissionRelationFilter>;
  status?: Maybe<StringPredicate>;
  timezone?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type User_PermissionRelationFilter = {
  every?: Maybe<User_PermissionFilter>;
  none?: Maybe<User_PermissionFilter>;
  some?: Maybe<User_PermissionFilter>;
};

/** School create input from user */
export type User_SchoolCreateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountRelationInput>;
  user?: Maybe<SchoolUserRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

/** School update input from user */
export type User_SchoolUpdateInput = {
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  airtableId?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customersSchoolRelation?: Maybe<SchoolCustomersSchoolRelationUpdateRelationInput>;
  email?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  founded?: Maybe<Scalars['Int']>;
  founders?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  geo?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<SchoolGroupalClassUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  lastModifiedTime?: Maybe<Scalars['String']>;
  latitud?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  longitud?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phoneType?: Maybe<Scalars['String']>;
  planSchool?: Maybe<SchoolPlanSchoolUpdateRelationInput>;
  rankIssuedSchool?: Maybe<SchoolRankIssuedSchoolUpdateRelationInput>;
  scheduleSchool?: Maybe<SchoolScheduleSchoolUpdateRelationInput>;
  schoolCustomer?: Maybe<SchoolSchoolCustomerUpdateRelationInput>;
  schoolLogo?: Maybe<SchoolSchoolLogoUpdateRelationInput>;
  schoolMartialArts?: Maybe<SchoolSchoolMartialArtsUpdateRelationInput>;
  schoolName?: Maybe<Scalars['String']>;
  schoolPhoneType?: Maybe<Scalars['String']>;
  schoolPreSignupRelation?: Maybe<SchoolSchoolPreSignupRelationUpdateRelationInput>;
  schoolPrivateClassesRelation?: Maybe<SchoolSchoolPrivateClassesRelationUpdateRelationInput>;
  schoolProductRelation?: Maybe<SchoolSchoolProductRelationUpdateRelationInput>;
  schoolProfile?: Maybe<SchoolSchoolProfileUpdateRelationInput>;
  schoolShortUrlRelation?: Maybe<SchoolSchoolShortUrlRelationUpdateRelationInput>;
  schoolTeam?: Maybe<SchoolSchoolTeamUpdateRelationInput>;
  slug?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<SchoolStripeAccountUpdateRelationInput>;
  user?: Maybe<SchoolUserUpdateRelationInput>;
  verified?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

/** Users relation input */
export type UsersAvatarManyRelationInput = {
  connect?: Maybe<FileKeyFilter>;
};

/** Users relation input */
export type UsersAvatarRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Users_Avatar_FileCreateInput>;
};

/** Users relation input */
export type UsersAvatarUpdateRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Users_Avatar_FileCreateInput>;
  disconnect?: Maybe<FileKeyFilter>;
  reconnect?: Maybe<FileKeyFilter>;
  update?: Maybe<Users_Avatar_FileUpdateInput>;
};

/** Users relation input */
export type UsersIdUserManyRelationInput = {
  connect?: Maybe<Array<UserProfileKeyFilter>>;
};

/** Users relation input */
export type UsersIdUserRelationInput = {
  connect?: Maybe<Array<UserProfileKeyFilter>>;
  create?: Maybe<Array<Maybe<IdUser_UserProfileCreateInput>>>;
};

/** Users relation input */
export type UsersIdUserUpdateRelationInput = {
  connect?: Maybe<Array<UserProfileKeyFilter>>;
  create?: Maybe<Array<Maybe<IdUser_UserProfileCreateInput>>>;
  disconnect?: Maybe<Array<UserProfileKeyFilter>>;
  reconnect?: Maybe<Array<UserProfileKeyFilter>>;
  update?: Maybe<Array<Maybe<IdUser_UserProfileUpdateInput>>>;
};

/** Users relation input */
export type UsersRolesManyRelationInput = {
  connect?: Maybe<Array<RoleKeyFilter>>;
};

/** Users relation input */
export type UsersRolesRelationInput = {
  connect?: Maybe<Array<RoleKeyFilter>>;
  create?: Maybe<Array<Maybe<Users_RoleCreateInput>>>;
};

/** Users relation input */
export type UsersRolesUpdateRelationInput = {
  connect?: Maybe<Array<RoleKeyFilter>>;
  create?: Maybe<Array<Maybe<Users_RoleCreateInput>>>;
  disconnect?: Maybe<Array<RoleKeyFilter>>;
  reconnect?: Maybe<Array<RoleKeyFilter>>;
  update?: Maybe<Array<Maybe<Users_RoleUpdateInput>>>;
};

/** Users relation input */
export type UsersSchoolsManyRelationInput = {
  connect?: Maybe<Array<UserSchoolKeyFilter>>;
};

/** Users relation input */
export type UsersSchoolsRelationInput = {
  connect?: Maybe<Array<UserSchoolKeyFilter>>;
  create?: Maybe<Array<Maybe<IdUser_UserSchoolCreateInput>>>;
};

/** Users relation input */
export type UsersSchoolsUpdateRelationInput = {
  connect?: Maybe<Array<UserSchoolKeyFilter>>;
  create?: Maybe<Array<Maybe<IdUser_UserSchoolCreateInput>>>;
  disconnect?: Maybe<Array<UserSchoolKeyFilter>>;
  reconnect?: Maybe<Array<UserSchoolKeyFilter>>;
  update?: Maybe<Array<Maybe<IdUser_UserSchoolUpdateInput>>>;
};

/** Roles create input from users */
export type Users_RoleCreateInput = {
  apiTokens?: Maybe<RolesApiTokensRelationInput>;
  authenticationProfiles?: Maybe<RolesAuthenticationProfilesRelationInput>;
  description?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  permissions?: Maybe<PermissionsInput>;
  teamMembers?: Maybe<RolesTeamMembersRelationInput>;
  users?: Maybe<RolesUsersRelationInput>;
};

/** Roles update input from users */
export type Users_RoleUpdateInput = {
  data: RoleUpdateInput;
  filter?: Maybe<RoleKeyFilter>;
};

/** Files create input from users_avatar */
export type Users_Avatar_FileCreateInput = {
  brand_logo?: Maybe<FilesBrand_LogoRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8RelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24RelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8RelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8RelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24RelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailRelationInput>;
  video_video?: Maybe<FilesVideo_VideoRelationInput>;
};

/** Files update input from users_avatar */
export type Users_Avatar_FileUpdateInput = {
  brand_logo?: Maybe<FilesBrand_LogoUpdateRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverUpdateRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsUpdateRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsUpdateRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoUpdateRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallUpdateRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8UpdateRelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24UpdateRelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoUpdateRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8UpdateRelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8UpdateRelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24UpdateRelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoUpdateRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarUpdateRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoUpdateRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarUpdateRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewUpdateRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailUpdateRelationInput>;
  video_video?: Maybe<FilesVideo_VideoUpdateRelationInput>;
};

/** VerificationEmailResendInput */
export type VerificationEmailResendInput = {
  email: Scalars['String'];
};

export type Video = {
  __typename?: 'Video';
  _description: Maybe<Scalars['String']>;
  category: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  dutarion: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  preview: Maybe<File>;
  profile: Maybe<Profile>;
  thumbnail: Maybe<File>;
  title: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
  video: Maybe<File>;
  youtubeID: Maybe<Scalars['String']>;
};

/** Video create input */
export type VideoCreateInput = {
  category?: Maybe<Scalars['String']>;
  dutarion?: Maybe<Scalars['Int']>;
  preview?: Maybe<VideoPreviewRelationInput>;
  profile?: Maybe<VideoProfileRelationInput>;
  thumbnail?: Maybe<VideoThumbnailRelationInput>;
  title?: Maybe<Scalars['String']>;
  video?: Maybe<VideoVideoRelationInput>;
  youtubeID?: Maybe<Scalars['String']>;
};

/** Video create many input */
export type VideoCreateManyInput = {
  category?: Maybe<Scalars['String']>;
  dutarion?: Maybe<Scalars['Int']>;
  preview?: Maybe<VideoPreviewManyRelationInput>;
  profile: VideoProfileManyRelationInput;
  thumbnail?: Maybe<VideoThumbnailManyRelationInput>;
  title?: Maybe<Scalars['String']>;
  video?: Maybe<VideoVideoManyRelationInput>;
  youtubeID?: Maybe<Scalars['String']>;
};

/** Video delete input */
export type VideoDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** VideoFieldsPermissions create input */
export type VideoFieldsPermissions = {
  category?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['Boolean']>;
  dutarion?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
  youtubeID?: Maybe<Scalars['Boolean']>;
};

export type VideoFilter = {
  AND?: Maybe<Array<VideoFilter>>;
  OR?: Maybe<Array<VideoFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  category?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  dutarion?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  preview?: Maybe<FileFilter>;
  profile?: Maybe<ProfileFilter>;
  thumbnail?: Maybe<FileFilter>;
  title?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
  video?: Maybe<FileFilter>;
  youtubeID?: Maybe<StringPredicate>;
};

export type VideoGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: VideoGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type VideoGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  category?: Maybe<Array<GroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  dutarion?: Maybe<Array<GroupByField>>;
  id?: Maybe<Array<GroupByField>>;
  preview?: Maybe<FileGroupByQuery>;
  profile?: Maybe<ProfileGroupByQuery>;
  thumbnail?: Maybe<FileGroupByQuery>;
  title?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
  video?: Maybe<FileGroupByQuery>;
  youtubeID?: Maybe<Array<GroupByField>>;
};

export type VideoKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

export type VideoLink = {
  __typename?: 'VideoLink';
  _description: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  imgUrl: Maybe<Scalars['String']>;
  price: Maybe<Scalars['String']>;
  profile: Maybe<Profile>;
  rating: Maybe<Scalars['String']>;
  title: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
  user: Maybe<Scalars['String']>;
  videoUrl: Maybe<Scalars['String']>;
  views: Maybe<Scalars['String']>;
};

/** VideoLink create input */
export type VideoLinkCreateInput = {
  imgUrl?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['String']>;
  profile?: Maybe<VideoLinkProfileRelationInput>;
  rating?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  videoUrl?: Maybe<Scalars['String']>;
  views?: Maybe<Scalars['String']>;
};

/** VideoLink create many input */
export type VideoLinkCreateManyInput = {
  imgUrl?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['String']>;
  profile?: Maybe<VideoLinkProfileManyRelationInput>;
  rating?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  videoUrl?: Maybe<Scalars['String']>;
  views?: Maybe<Scalars['String']>;
};

/** VideoLink delete input */
export type VideoLinkDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** VideoLinkFieldsPermissions create input */
export type VideoLinkFieldsPermissions = {
  createdAt?: Maybe<Scalars['Boolean']>;
  imgUrl?: Maybe<Scalars['Boolean']>;
  price?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
  user?: Maybe<Scalars['Boolean']>;
  videoUrl?: Maybe<Scalars['Boolean']>;
  views?: Maybe<Scalars['Boolean']>;
};

export type VideoLinkFilter = {
  AND?: Maybe<Array<VideoLinkFilter>>;
  OR?: Maybe<Array<VideoLinkFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  imgUrl?: Maybe<StringPredicate>;
  price?: Maybe<StringPredicate>;
  profile?: Maybe<ProfileFilter>;
  rating?: Maybe<StringPredicate>;
  title?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
  user?: Maybe<StringPredicate>;
  videoUrl?: Maybe<StringPredicate>;
  views?: Maybe<StringPredicate>;
};

export type VideoLinkGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: VideoLinkGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type VideoLinkGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  id?: Maybe<Array<GroupByField>>;
  imgUrl?: Maybe<Array<GroupByField>>;
  price?: Maybe<Array<GroupByField>>;
  profile?: Maybe<ProfileGroupByQuery>;
  rating?: Maybe<Array<GroupByField>>;
  title?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
  user?: Maybe<Array<GroupByField>>;
  videoUrl?: Maybe<Array<GroupByField>>;
  views?: Maybe<Array<GroupByField>>;
};

export type VideoLinkKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** VideoLinkListResponse output */
export type VideoLinkListResponse = {
  __typename?: 'VideoLinkListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<VideoLink>;
};

/** VideoLinkManyResponse output */
export type VideoLinkManyResponse = {
  __typename?: 'VideoLinkManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<VideoLink>;
};

/** No longer supported. Use `sort` instead. */
export enum VideoLinkOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  ImgUrlAsc = 'imgUrl_ASC',
  ImgUrlDesc = 'imgUrl_DESC',
  PriceAsc = 'price_ASC',
  PriceDesc = 'price_DESC',
  RatingAsc = 'rating_ASC',
  RatingDesc = 'rating_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  UserAsc = 'user_ASC',
  UserDesc = 'user_DESC',
  VideoUrlAsc = 'videoUrl_ASC',
  VideoUrlDesc = 'videoUrl_DESC',
  ViewsAsc = 'views_ASC',
  ViewsDesc = 'views_DESC',
}

/** VideoLink subscription payload */
export type VideoLinkPayload = {
  __typename?: 'VideoLinkPayload';
  mutation: MutationType;
  node: Maybe<VideoLink>;
  previousValues: Maybe<VideoLink>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** VideoLink relation input */
export type VideoLinkProfileManyRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
};

/** VideoLink relation input */
export type VideoLinkProfileRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
  create?: Maybe<VideoLink_ProfileCreateInput>;
};

/** VideoLink relation input */
export type VideoLinkProfileUpdateRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
  create?: Maybe<VideoLink_ProfileCreateInput>;
  disconnect?: Maybe<ProfileKeyFilter>;
  reconnect?: Maybe<ProfileKeyFilter>;
  update?: Maybe<VideoLink_ProfileUpdateInput>;
};

export type VideoLinkRelationFilter = {
  every?: Maybe<VideoLinkFilter>;
  none?: Maybe<VideoLinkFilter>;
  some?: Maybe<VideoLinkFilter>;
};

export type VideoLinkSort = {
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  imgUrl?: Maybe<SortOrder>;
  price?: Maybe<SortOrder>;
  profile?: Maybe<ProfileSort>;
  rating?: Maybe<SortOrder>;
  title?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  user?: Maybe<SortOrder>;
  videoUrl?: Maybe<SortOrder>;
  views?: Maybe<SortOrder>;
};

/** VideoLink subscription filter */
export type VideoLinkSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<VideoLinkFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** VideoLink update input */
export type VideoLinkUpdateByFilterInput = {
  imgUrl?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  price?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  rating?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  title?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  user?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  videoUrl?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  views?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** VideoLink update input */
export type VideoLinkUpdateInput = {
  id?: Maybe<Scalars['ID']>;
  imgUrl?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['String']>;
  profile?: Maybe<VideoLinkProfileUpdateRelationInput>;
  rating?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  videoUrl?: Maybe<Scalars['String']>;
  views?: Maybe<Scalars['String']>;
};

export type VideoLink_PermissionFilter = {
  AND?: Maybe<Array<VideoLink_PermissionFilter>>;
  OR?: Maybe<Array<VideoLink_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  imgUrl?: Maybe<StringPredicate>;
  price?: Maybe<StringPredicate>;
  profile?: Maybe<Profile_PermissionFilter>;
  rating?: Maybe<StringPredicate>;
  title?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
  user?: Maybe<StringPredicate>;
  videoUrl?: Maybe<StringPredicate>;
  views?: Maybe<StringPredicate>;
};

export type VideoLink_PermissionRelationFilter = {
  every?: Maybe<VideoLink_PermissionFilter>;
  none?: Maybe<VideoLink_PermissionFilter>;
  some?: Maybe<VideoLink_PermissionFilter>;
};

/** Profile create input from videoLink */
export type VideoLink_ProfileCreateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8RelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24RelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Profile update input from videoLink */
export type VideoLink_ProfileUpdateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsUpdateRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinUpdateRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassUpdateRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationUpdateRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileUpdateRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoUpdateRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolUpdateRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationUpdateRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamUpdateRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileUpdateRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallUpdateRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8UpdateRelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24UpdateRelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileUpdateRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountUpdateRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkUpdateRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationUpdateRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** VideoListResponse output */
export type VideoListResponse = {
  __typename?: 'VideoListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<Video>;
};

/** VideoManyResponse output */
export type VideoManyResponse = {
  __typename?: 'VideoManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<Video>;
};

/** No longer supported. Use `sort` instead. */
export enum VideoOrderBy {
  CategoryAsc = 'category_ASC',
  CategoryDesc = 'category_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DutarionAsc = 'dutarion_ASC',
  DutarionDesc = 'dutarion_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  YoutubeIdAsc = 'youtubeID_ASC',
  YoutubeIdDesc = 'youtubeID_DESC',
}

/** Video subscription payload */
export type VideoPayload = {
  __typename?: 'VideoPayload';
  mutation: MutationType;
  node: Maybe<Video>;
  previousValues: Maybe<Video>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** Video relation input */
export type VideoPreviewManyRelationInput = {
  connect?: Maybe<FileKeyFilter>;
};

/** Video relation input */
export type VideoPreviewRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Video_Preview_FileCreateInput>;
};

/** Video relation input */
export type VideoPreviewUpdateRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Video_Preview_FileCreateInput>;
  disconnect?: Maybe<FileKeyFilter>;
  reconnect?: Maybe<FileKeyFilter>;
  update?: Maybe<Video_Preview_FileUpdateInput>;
};

/** Video relation input */
export type VideoProfileManyRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
};

/** Video relation input */
export type VideoProfileRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
  create?: Maybe<VideosProfileRelation_ProfileCreateInput>;
};

/** Video relation input */
export type VideoProfileUpdateRelationInput = {
  connect?: Maybe<ProfileKeyFilter>;
  create?: Maybe<VideosProfileRelation_ProfileCreateInput>;
  disconnect?: Maybe<ProfileKeyFilter>;
  reconnect?: Maybe<ProfileKeyFilter>;
  update?: Maybe<VideosProfileRelation_ProfileUpdateInput>;
};

export type VideoRelationFilter = {
  every?: Maybe<VideoFilter>;
  none?: Maybe<VideoFilter>;
  some?: Maybe<VideoFilter>;
};

export type VideoSort = {
  category?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  dutarion?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  preview?: Maybe<FileSort>;
  profile?: Maybe<ProfileSort>;
  thumbnail?: Maybe<FileSort>;
  title?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  video?: Maybe<FileSort>;
  youtubeID?: Maybe<SortOrder>;
};

/** Video subscription filter */
export type VideoSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<VideoFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** Video relation input */
export type VideoThumbnailManyRelationInput = {
  connect?: Maybe<FileKeyFilter>;
};

/** Video relation input */
export type VideoThumbnailRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Video_Thumbnail_FileCreateInput>;
};

/** Video relation input */
export type VideoThumbnailUpdateRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Video_Thumbnail_FileCreateInput>;
  disconnect?: Maybe<FileKeyFilter>;
  reconnect?: Maybe<FileKeyFilter>;
  update?: Maybe<Video_Thumbnail_FileUpdateInput>;
};

/** Video update input */
export type VideoUpdateByFilterInput = {
  category?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  dutarion?: Maybe<Array<Maybe<UpdateByFilterIntInput>>>;
  title?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  youtubeID?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** Video update input */
export type VideoUpdateInput = {
  category?: Maybe<Scalars['String']>;
  dutarion?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  preview?: Maybe<VideoPreviewUpdateRelationInput>;
  profile?: Maybe<VideoProfileUpdateRelationInput>;
  thumbnail?: Maybe<VideoThumbnailUpdateRelationInput>;
  title?: Maybe<Scalars['String']>;
  video?: Maybe<VideoVideoUpdateRelationInput>;
  youtubeID?: Maybe<Scalars['String']>;
};

/** Video relation input */
export type VideoVideoManyRelationInput = {
  connect?: Maybe<FileKeyFilter>;
};

/** Video relation input */
export type VideoVideoRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Video_Video_FileCreateInput>;
};

/** Video relation input */
export type VideoVideoUpdateRelationInput = {
  connect?: Maybe<FileKeyFilter>;
  create?: Maybe<Video_Video_FileCreateInput>;
  disconnect?: Maybe<FileKeyFilter>;
  reconnect?: Maybe<FileKeyFilter>;
  update?: Maybe<Video_Video_FileUpdateInput>;
};

export type Video_PermissionFilter = {
  AND?: Maybe<Array<Video_PermissionFilter>>;
  OR?: Maybe<Array<Video_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  category?: Maybe<StringPredicate>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  dutarion?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  preview?: Maybe<File_PermissionFilter>;
  profile?: Maybe<Profile_PermissionFilter>;
  thumbnail?: Maybe<File_PermissionFilter>;
  title?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
  video?: Maybe<File_PermissionFilter>;
  youtubeID?: Maybe<StringPredicate>;
};

export type Video_PermissionRelationFilter = {
  every?: Maybe<Video_PermissionFilter>;
  none?: Maybe<Video_PermissionFilter>;
  some?: Maybe<Video_PermissionFilter>;
};

/** Video create input from video */
export type Video_VideoCreateInput = {
  category?: Maybe<Scalars['String']>;
  dutarion?: Maybe<Scalars['Int']>;
  preview?: Maybe<VideoPreviewRelationInput>;
  profile: VideoProfileRelationInput;
  thumbnail?: Maybe<VideoThumbnailRelationInput>;
  title?: Maybe<Scalars['String']>;
  video?: Maybe<VideoVideoRelationInput>;
  youtubeID?: Maybe<Scalars['String']>;
};

/** Video update input from video */
export type Video_VideoUpdateInput = {
  data: VideoUpdateInput;
  filter?: Maybe<VideoKeyFilter>;
};

/** Files create input from video_preview */
export type Video_Preview_FileCreateInput = {
  brand_logo?: Maybe<FilesBrand_LogoRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8RelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24RelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8RelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8RelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24RelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailRelationInput>;
  video_video?: Maybe<FilesVideo_VideoRelationInput>;
};

/** Files update input from video_preview */
export type Video_Preview_FileUpdateInput = {
  brand_logo?: Maybe<FilesBrand_LogoUpdateRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverUpdateRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsUpdateRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsUpdateRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoUpdateRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallUpdateRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8UpdateRelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24UpdateRelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoUpdateRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8UpdateRelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8UpdateRelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24UpdateRelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoUpdateRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarUpdateRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoUpdateRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarUpdateRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewUpdateRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailUpdateRelationInput>;
  video_video?: Maybe<FilesVideo_VideoUpdateRelationInput>;
};

/** Files create input from video_thumbnail */
export type Video_Thumbnail_FileCreateInput = {
  brand_logo?: Maybe<FilesBrand_LogoRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8RelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24RelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8RelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8RelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24RelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailRelationInput>;
  video_video?: Maybe<FilesVideo_VideoRelationInput>;
};

/** Files update input from video_thumbnail */
export type Video_Thumbnail_FileUpdateInput = {
  brand_logo?: Maybe<FilesBrand_LogoUpdateRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverUpdateRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsUpdateRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsUpdateRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoUpdateRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallUpdateRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8UpdateRelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24UpdateRelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoUpdateRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8UpdateRelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8UpdateRelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24UpdateRelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoUpdateRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarUpdateRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoUpdateRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarUpdateRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewUpdateRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailUpdateRelationInput>;
  video_video?: Maybe<FilesVideo_VideoUpdateRelationInput>;
};

/** Files create input from video_video */
export type Video_Video_FileCreateInput = {
  brand_logo?: Maybe<FilesBrand_LogoRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8RelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24RelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8RelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8RelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24RelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailRelationInput>;
  video_video?: Maybe<FilesVideo_VideoRelationInput>;
};

/** Files update input from video_video */
export type Video_Video_FileUpdateInput = {
  brand_logo?: Maybe<FilesBrand_LogoUpdateRelationInput>;
  competition_cover?: Maybe<FilesCompetition_CoverUpdateRelationInput>;
  fileId?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  martialArts_attachments?: Maybe<FilesMartialArts_AttachmentsUpdateRelationInput>;
  meta?: Maybe<Scalars['JSON']>;
  mods?: Maybe<Scalars['JSON']>;
  planCategory_attachments?: Maybe<FilesPlanCategory_AttachmentsUpdateRelationInput>;
  profiles_photo?: Maybe<FilesProfiles_PhotoUpdateRelationInput>;
  profiles_rankSmall?: Maybe<FilesProfiles_RankSmallUpdateRelationInput>;
  profiles_rankw80h8?: Maybe<FilesProfiles_Rankw80h8UpdateRelationInput>;
  profiles_rankw375h24?: Maybe<FilesProfiles_Rankw375h24UpdateRelationInput>;
  public?: Maybe<Scalars['Boolean']>;
  rankIssued_masterPhoto?: Maybe<FilesRankIssued_MasterPhotoUpdateRelationInput>;
  rank_rankImageW64H8?: Maybe<FilesRank_RankImageW64H8UpdateRelationInput>;
  rank_rankImageW80H8?: Maybe<FilesRank_RankImageW80H8UpdateRelationInput>;
  rank_rankImageW375H24?: Maybe<FilesRank_RankImageW375H24UpdateRelationInput>;
  schools_schoolLogo?: Maybe<FilesSchools_SchoolLogoUpdateRelationInput>;
  teamMembers_avatar?: Maybe<FilesTeamMembers_AvatarUpdateRelationInput>;
  teams_teamLogo?: Maybe<FilesTeams_TeamLogoUpdateRelationInput>;
  users_avatar?: Maybe<FilesUsers_AvatarUpdateRelationInput>;
  video_preview?: Maybe<FilesVideo_PreviewUpdateRelationInput>;
  video_thumbnail?: Maybe<FilesVideo_ThumbnailUpdateRelationInput>;
  video_video?: Maybe<FilesVideo_VideoUpdateRelationInput>;
};

/** Profile create input from videosProfileRelation */
export type VideosProfileRelation_ProfileCreateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8RelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24RelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** Profile update input from videosProfileRelation */
export type VideosProfileRelation_ProfileUpdateInput = {
  accountType?: Maybe<Array<Maybe<Scalars['String']>>>;
  achievements?: Maybe<ProfileAchievementsUpdateRelationInput>;
  biography?: Maybe<Scalars['String']>;
  birthdate?: Maybe<Scalars['String']>;
  bjjFanatics?: Maybe<Scalars['String']>;
  bjjHeroes?: Maybe<Scalars['String']>;
  boxRec?: Maybe<Scalars['String']>;
  checkin?: Maybe<ProfileCheckinUpdateRelationInput>;
  displayName?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  espn?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  groupalClass?: Maybe<ProfileGroupalClassUpdateRelationInput>;
  height?: Maybe<Scalars['String']>;
  idProfile?: Maybe<ProfileIdProfileUpdateRelationInput>;
  instagram?: Maybe<Scalars['String']>;
  instructorPrivateClassesRelation?: Maybe<ProfileInstructorPrivateClassesRelationUpdateRelationInput>;
  lastName?: Maybe<Scalars['String']>;
  lineage?: Maybe<Scalars['String']>;
  masterProfile?: Maybe<ProfileMasterProfileUpdateRelationInput>;
  mmaJunkie?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photo?: Maybe<ProfilePhotoUpdateRelationInput>;
  /** Usado para relacionar tablas con airtable */
  profileAirtableId?: Maybe<Scalars['String']>;
  profileSchool?: Maybe<ProfileProfileSchoolUpdateRelationInput>;
  profileShortUrlRelation?: Maybe<ProfileProfileShortUrlRelationUpdateRelationInput>;
  profileTeam?: Maybe<ProfileProfileTeamUpdateRelationInput>;
  rankIssuedProfile?: Maybe<ProfileRankIssuedProfileUpdateRelationInput>;
  rankSmall?: Maybe<ProfileRankSmallUpdateRelationInput>;
  rankw80h8?: Maybe<ProfileRankw80h8UpdateRelationInput>;
  rankw375h24?: Maybe<ProfileRankw375h24UpdateRelationInput>;
  scheduleProfile?: Maybe<ProfileScheduleProfileUpdateRelationInput>;
  sherDog?: Maybe<Scalars['String']>;
  stripeAccount?: Maybe<ProfileStripeAccountUpdateRelationInput>;
  teamOrAffiliation?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  ufc?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  videoLink?: Maybe<ProfileVideoLinkUpdateRelationInput>;
  videosProfileRelation?: Maybe<ProfileVideosProfileRelationUpdateRelationInput>;
  website?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  wikipedia?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

/** View Attributes */
export type ViewAttributes = {
  __typename?: 'ViewAttributes';
  query: Maybe<Scalars['String']>;
};

/** View Create Input */
export type ViewCreateInput = {
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  query: Scalars['String'];
};

/** View Update Input */
export type ViewUpdateInput = {
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['String']>;
};

export type WaitingList = {
  __typename?: 'WaitingList';
  _description: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  date: Maybe<Scalars['DateTime']>;
  deletedAt: Maybe<Scalars['Int']>;
  email: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  instagram: Maybe<Scalars['String']>;
  name: Maybe<Scalars['String']>;
  phone: Maybe<Scalars['String']>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

/** WaitingList create input */
export type WaitingListCreateInput = {
  date?: Maybe<Scalars['DateTime']>;
  email?: Maybe<Scalars['String']>;
  instagram?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
};

/** WaitingList create many input */
export type WaitingListCreateManyInput = {
  date?: Maybe<Scalars['DateTime']>;
  email?: Maybe<Scalars['String']>;
  instagram?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
};

/** WaitingList delete input */
export type WaitingListDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** WaitingListFieldsPermissions create input */
export type WaitingListFieldsPermissions = {
  createdAt?: Maybe<Scalars['Boolean']>;
  date?: Maybe<Scalars['Boolean']>;
  email?: Maybe<Scalars['Boolean']>;
  instagram?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type WaitingListFilter = {
  AND?: Maybe<Array<WaitingListFilter>>;
  OR?: Maybe<Array<WaitingListFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  date?: Maybe<DateTimePredicate>;
  deletedAt?: Maybe<IntPredicate>;
  email?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  instagram?: Maybe<StringPredicate>;
  name?: Maybe<StringPredicate>;
  phone?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type WaitingListGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: WaitingListGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type WaitingListGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  date?: Maybe<Array<GroupByField>>;
  email?: Maybe<Array<GroupByField>>;
  id?: Maybe<Array<GroupByField>>;
  instagram?: Maybe<Array<GroupByField>>;
  name?: Maybe<Array<GroupByField>>;
  phone?: Maybe<Array<GroupByField>>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

export type WaitingListKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** WaitingListListResponse output */
export type WaitingListListResponse = {
  __typename?: 'WaitingListListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<WaitingList>;
};

/** WaitingListManyResponse output */
export type WaitingListManyResponse = {
  __typename?: 'WaitingListManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<WaitingList>;
};

/** No longer supported. Use `sort` instead. */
export enum WaitingListOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DateAsc = 'date_ASC',
  DateDesc = 'date_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  EmailAsc = 'email_ASC',
  EmailDesc = 'email_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  InstagramAsc = 'instagram_ASC',
  InstagramDesc = 'instagram_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PhoneAsc = 'phone_ASC',
  PhoneDesc = 'phone_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** WaitingList subscription payload */
export type WaitingListPayload = {
  __typename?: 'WaitingListPayload';
  mutation: MutationType;
  node: Maybe<WaitingList>;
  previousValues: Maybe<WaitingList>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type WaitingListSort = {
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  date?: Maybe<SortOrder>;
  deletedAt?: Maybe<SortOrder>;
  email?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  instagram?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  phone?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
};

/** WaitingList subscription filter */
export type WaitingListSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<WaitingListFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** WaitingList update input */
export type WaitingListUpdateByFilterInput = {
  date?: Maybe<Array<Maybe<UpdateByFilterDateTimeInput>>>;
  email?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  instagram?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  name?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  phone?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** WaitingList update input */
export type WaitingListUpdateInput = {
  date?: Maybe<Scalars['DateTime']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  instagram?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
};

export type WaitingList_PermissionFilter = {
  AND?: Maybe<Array<WaitingList_PermissionFilter>>;
  OR?: Maybe<Array<WaitingList_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  date?: Maybe<DateTimePredicate>;
  deletedAt?: Maybe<IntPredicate>;
  email?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  instagram?: Maybe<StringPredicate>;
  name?: Maybe<StringPredicate>;
  phone?: Maybe<StringPredicate>;
  updatedAt?: Maybe<DateTimePredicate>;
};

/** WorkspaceCreateMutationInput */
export type WorkspaceCreateMutationInput = {
  billingPlanId?: Maybe<Scalars['ID']>;
  description?: Maybe<Scalars['String']>;
  image?: Maybe<GraphQlCreateFileItemInput>;
  kind?: Maybe<WorkspaceKind>;
  name: Scalars['String'];
  organizationId?: Maybe<Scalars['ID']>;
};

export type WorkspaceCreateResponse = {
  __typename?: 'WorkspaceCreateResponse';
  description: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  kind: Maybe<Scalars['String']>;
  name: Maybe<Scalars['String']>;
};

/** WorkspaceDeleteMutationInput */
export type WorkspaceDeleteMutationInput = {
  id: Scalars['ID'];
};

export type WorkspaceImage = {
  __typename?: 'WorkspaceImage';
  downloadUrl: Maybe<Scalars['String']>;
  id: Maybe<Scalars['String']>;
};

/** LoginResponseWorkspace name and id */
export type WorkspaceInfo = {
  __typename?: 'WorkspaceInfo';
  name: Maybe<Scalars['String']>;
  workspace: Maybe<Scalars['ID']>;
};

export type WorkspaceItem = {
  __typename?: 'WorkspaceItem';
  apiHost: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  description: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  image: Maybe<WorkspaceImage>;
  isCiCdEnabled: Maybe<Scalars['Boolean']>;
  isOwner: Scalars['Boolean'];
  kind: Maybe<Scalars['String']>;
  lastAccess: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  nextPlan: Maybe<BillingNextPlanResponse>;
  organization: Maybe<SystemOrganizationBaseItem>;
  owner: Maybe<SystemMemberAccountInfo>;
  plan: Maybe<BillingCurrentPlanResponse>;
  region: Maybe<Scalars['String']>;
  teamMemberCount: Maybe<Scalars['Int']>;
  webSocket: Maybe<Scalars['String']>;
};

/** Workspace Kind */
export enum WorkspaceKind {
  Frontend = 'frontend',
  General = 'general',
}

/** WorkspaceListResponse output */
export type WorkspaceListResponse = {
  __typename?: 'WorkspaceListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<WorkspaceItem>;
};

export enum WorkspaceStatus {
  Active = 'active',
  Blocked = 'blocked',
  Canceled = 'canceled',
  Canceling = 'canceling',
  Pending = 'pending',
  Suspended = 'suspended',
}

export type WorkspaceTransferItem = {
  __typename?: 'WorkspaceTransferItem';
  newOwnerEmail: Scalars['String'];
  newOwnerFirstName: Maybe<Scalars['String']>;
  newOwnerLastName: Maybe<Scalars['String']>;
  ownerEmail: Scalars['String'];
  ownerFirstName: Maybe<Scalars['String']>;
  ownerLastName: Maybe<Scalars['String']>;
  status: Scalars['String'];
  workspaceId: Scalars['String'];
  workspaceName: Scalars['String'];
};

/** WorkspaceUpdateMutationInput */
export type WorkspaceUpdateMutationInput = {
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  image?: Maybe<GraphQlCreateFileItemInput>;
  name?: Maybe<Scalars['String']>;
};

export type WorkspaceUpdateResponse = {
  __typename?: 'WorkspaceUpdateResponse';
  description: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  image: Maybe<GraphQlFileItemResponse>;
  name: Maybe<Scalars['String']>;
};

export type XCustomer = {
  __typename?: 'XCustomer';
  _description: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  customerAirtableId: Maybe<Scalars['String']>;
  customerSchool: Maybe<XSchoolCustomerListResponse>;
  deletedAt: Maybe<Scalars['Int']>;
  email: Maybe<Scalars['String']>;
  id: Maybe<Scalars['ID']>;
  interest: Maybe<Scalars['String']>;
  name: Maybe<Scalars['String']>;
  notes: Maybe<Scalars['String']>;
  phone: Maybe<Scalars['String']>;
  schools: Maybe<School>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

export type XCustomerCustomerSchoolArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<XSchoolCustomerFilter>;
  first?: Maybe<Scalars['Int']>;
  groupBy?: Maybe<XSchoolCustomerGroupBy>;
  last?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<XSchoolCustomerOrderBy>>>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<XSchoolCustomerSort>>;
};

/** XCustomer create input */
export type XCustomerCreateInput = {
  customerAirtableId?: Maybe<Scalars['String']>;
  customerSchool?: Maybe<XCustomerCustomerSchoolRelationInput>;
  email?: Maybe<Scalars['String']>;
  interest?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  schools?: Maybe<XCustomerSchoolsRelationInput>;
};

/** XCustomer create many input */
export type XCustomerCreateManyInput = {
  customerAirtableId?: Maybe<Scalars['String']>;
  customerSchool?: Maybe<XCustomerCustomerSchoolManyRelationInput>;
  email?: Maybe<Scalars['String']>;
  interest?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  schools?: Maybe<XCustomerSchoolsManyRelationInput>;
};

/** XCustomer relation input */
export type XCustomerCustomerSchoolManyRelationInput = {
  connect?: Maybe<Array<XSchoolCustomerKeyFilter>>;
};

/** XCustomer relation input */
export type XCustomerCustomerSchoolRelationInput = {
  connect?: Maybe<Array<XSchoolCustomerKeyFilter>>;
  create?: Maybe<Array<Maybe<IdCustomer_XSchoolCustomerCreateInput>>>;
};

/** XCustomer relation input */
export type XCustomerCustomerSchoolUpdateRelationInput = {
  connect?: Maybe<Array<XSchoolCustomerKeyFilter>>;
  create?: Maybe<Array<Maybe<IdCustomer_XSchoolCustomerCreateInput>>>;
  disconnect?: Maybe<Array<XSchoolCustomerKeyFilter>>;
  reconnect?: Maybe<Array<XSchoolCustomerKeyFilter>>;
  update?: Maybe<Array<Maybe<IdCustomer_XSchoolCustomerUpdateInput>>>;
};

/** XCustomer delete input */
export type XCustomerDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** XCustomerFieldsPermissions create input */
export type XCustomerFieldsPermissions = {
  createdAt?: Maybe<Scalars['Boolean']>;
  customerAirtableId?: Maybe<Scalars['Boolean']>;
  email?: Maybe<Scalars['Boolean']>;
  interest?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['Boolean']>;
  notes?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type XCustomerFilter = {
  AND?: Maybe<Array<XCustomerFilter>>;
  OR?: Maybe<Array<XCustomerFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  customerAirtableId?: Maybe<StringPredicate>;
  customerSchool?: Maybe<XSchoolCustomerRelationFilter>;
  deletedAt?: Maybe<IntPredicate>;
  email?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  interest?: Maybe<StringPredicate>;
  name?: Maybe<StringPredicate>;
  notes?: Maybe<StringPredicate>;
  phone?: Maybe<StringPredicate>;
  schools?: Maybe<SchoolFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type XCustomerGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: XCustomerGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type XCustomerGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  customerAirtableId?: Maybe<Array<GroupByField>>;
  customerSchool?: Maybe<XSchoolCustomerGroupByQuery>;
  email?: Maybe<Array<GroupByField>>;
  id?: Maybe<Array<GroupByField>>;
  interest?: Maybe<Array<GroupByField>>;
  name?: Maybe<Array<GroupByField>>;
  notes?: Maybe<Array<GroupByField>>;
  phone?: Maybe<Array<GroupByField>>;
  schools?: Maybe<SchoolGroupByQuery>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

export type XCustomerKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** XCustomerListResponse output */
export type XCustomerListResponse = {
  __typename?: 'XCustomerListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<XCustomer>;
};

/** XCustomerManyResponse output */
export type XCustomerManyResponse = {
  __typename?: 'XCustomerManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<XCustomer>;
};

/** No longer supported. Use `sort` instead. */
export enum XCustomerOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CustomerAirtableIdAsc = 'customerAirtableId_ASC',
  CustomerAirtableIdDesc = 'customerAirtableId_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  EmailAsc = 'email_ASC',
  EmailDesc = 'email_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  InterestAsc = 'interest_ASC',
  InterestDesc = 'interest_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  NotesAsc = 'notes_ASC',
  NotesDesc = 'notes_DESC',
  PhoneAsc = 'phone_ASC',
  PhoneDesc = 'phone_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** XCustomer subscription payload */
export type XCustomerPayload = {
  __typename?: 'XCustomerPayload';
  mutation: MutationType;
  node: Maybe<XCustomer>;
  previousValues: Maybe<XCustomer>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type XCustomerRelationFilter = {
  every?: Maybe<XCustomerFilter>;
  none?: Maybe<XCustomerFilter>;
  some?: Maybe<XCustomerFilter>;
};

/** XCustomer relation input */
export type XCustomerSchoolsManyRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
};

/** XCustomer relation input */
export type XCustomerSchoolsRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<CustomersSchoolRelation_SchoolCreateInput>;
};

/** XCustomer relation input */
export type XCustomerSchoolsUpdateRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<CustomersSchoolRelation_SchoolCreateInput>;
  disconnect?: Maybe<SchoolKeyFilter>;
  reconnect?: Maybe<SchoolKeyFilter>;
  update?: Maybe<CustomersSchoolRelation_SchoolUpdateInput>;
};

export type XCustomerSort = {
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  customerAirtableId?: Maybe<SortOrder>;
  deletedAt?: Maybe<SortOrder>;
  email?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  interest?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  notes?: Maybe<SortOrder>;
  phone?: Maybe<SortOrder>;
  schools?: Maybe<SchoolSort>;
  updatedAt?: Maybe<SortOrder>;
};

/** XCustomer subscription filter */
export type XCustomerSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<XCustomerFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** XCustomer update input */
export type XCustomerUpdateByFilterInput = {
  customerAirtableId?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  email?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  interest?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  name?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  notes?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
  phone?: Maybe<Array<Maybe<UpdateByFilterStringInput>>>;
};

/** XCustomer update input */
export type XCustomerUpdateInput = {
  customerAirtableId?: Maybe<Scalars['String']>;
  customerSchool?: Maybe<XCustomerCustomerSchoolUpdateRelationInput>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  interest?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  schools?: Maybe<XCustomerSchoolsUpdateRelationInput>;
};

export type XCustomer_PermissionFilter = {
  AND?: Maybe<Array<XCustomer_PermissionFilter>>;
  OR?: Maybe<Array<XCustomer_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  customerAirtableId?: Maybe<StringPredicate>;
  customerSchool?: Maybe<XSchoolCustomer_PermissionRelationFilter>;
  deletedAt?: Maybe<IntPredicate>;
  email?: Maybe<StringPredicate>;
  id?: Maybe<IdPredicate>;
  interest?: Maybe<StringPredicate>;
  name?: Maybe<StringPredicate>;
  notes?: Maybe<StringPredicate>;
  phone?: Maybe<StringPredicate>;
  schools?: Maybe<School_PermissionFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type XCustomer_PermissionRelationFilter = {
  every?: Maybe<XCustomer_PermissionFilter>;
  none?: Maybe<XCustomer_PermissionFilter>;
  some?: Maybe<XCustomer_PermissionFilter>;
};

export type XSchoolCustomer = {
  __typename?: 'XSchoolCustomer';
  _description: Maybe<Scalars['String']>;
  createdAt: Maybe<Scalars['DateTime']>;
  createdBy: Maybe<User>;
  deletedAt: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  idCustomer: Maybe<XCustomer>;
  idSchool: Maybe<School>;
  updatedAt: Maybe<Scalars['DateTime']>;
};

/** XSchoolCustomer create input */
export type XSchoolCustomerCreateInput = {
  idCustomer?: Maybe<XSchoolCustomerIdCustomerRelationInput>;
  idSchool?: Maybe<XSchoolCustomerIdSchoolRelationInput>;
};

/** XSchoolCustomer create many input */
export type XSchoolCustomerCreateManyInput = {
  idCustomer?: Maybe<XSchoolCustomerIdCustomerManyRelationInput>;
  idSchool?: Maybe<XSchoolCustomerIdSchoolManyRelationInput>;
};

/** XSchoolCustomer delete input */
export type XSchoolCustomerDeleteInput = {
  force?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
};

/** XSchoolCustomerFieldsPermissions create input */
export type XSchoolCustomerFieldsPermissions = {
  createdAt?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['Boolean']>;
};

export type XSchoolCustomerFilter = {
  AND?: Maybe<Array<XSchoolCustomerFilter>>;
  OR?: Maybe<Array<XSchoolCustomerFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<UserFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  idCustomer?: Maybe<XCustomerFilter>;
  idSchool?: Maybe<SchoolFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type XSchoolCustomerGroupBy = {
  first?: Maybe<Scalars['Int']>;
  having?: Maybe<Having>;
  last?: Maybe<Scalars['Int']>;
  query: XSchoolCustomerGroupByQuery;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<GroupBySort>>;
};

export type XSchoolCustomerGroupByQuery = {
  _group?: Maybe<Array<GroupIdentifiersGroupByField>>;
  createdAt?: Maybe<Array<GroupByField>>;
  createdBy?: Maybe<UserGroupByQuery>;
  id?: Maybe<Array<GroupByField>>;
  idCustomer?: Maybe<XCustomerGroupByQuery>;
  idSchool?: Maybe<SchoolGroupByQuery>;
  updatedAt?: Maybe<Array<GroupByField>>;
};

/** XSchoolCustomer relation input */
export type XSchoolCustomerIdCustomerManyRelationInput = {
  connect?: Maybe<XCustomerKeyFilter>;
};

/** XSchoolCustomer relation input */
export type XSchoolCustomerIdCustomerRelationInput = {
  connect?: Maybe<XCustomerKeyFilter>;
  create?: Maybe<CustomerSchool_XCustomerCreateInput>;
};

/** XSchoolCustomer relation input */
export type XSchoolCustomerIdCustomerUpdateRelationInput = {
  connect?: Maybe<XCustomerKeyFilter>;
  create?: Maybe<CustomerSchool_XCustomerCreateInput>;
  disconnect?: Maybe<XCustomerKeyFilter>;
  reconnect?: Maybe<XCustomerKeyFilter>;
  update?: Maybe<CustomerSchool_XCustomerUpdateInput>;
};

/** XSchoolCustomer relation input */
export type XSchoolCustomerIdSchoolManyRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
};

/** XSchoolCustomer relation input */
export type XSchoolCustomerIdSchoolRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<SchoolCustomer_SchoolCreateInput>;
};

/** XSchoolCustomer relation input */
export type XSchoolCustomerIdSchoolUpdateRelationInput = {
  connect?: Maybe<SchoolKeyFilter>;
  create?: Maybe<SchoolCustomer_SchoolCreateInput>;
  disconnect?: Maybe<SchoolKeyFilter>;
  reconnect?: Maybe<SchoolKeyFilter>;
  update?: Maybe<SchoolCustomer_SchoolUpdateInput>;
};

export type XSchoolCustomerKeyFilter = {
  id?: Maybe<Scalars['ID']>;
};

/** XSchoolCustomerListResponse output */
export type XSchoolCustomerListResponse = {
  __typename?: 'XSchoolCustomerListResponse';
  /** List items count */
  count: Scalars['Int'];
  /** Aggregated items */
  groups: Array<GroupByResponse>;
  /** List items */
  items: Array<XSchoolCustomer>;
};

/** XSchoolCustomerManyResponse output */
export type XSchoolCustomerManyResponse = {
  __typename?: 'XSchoolCustomerManyResponse';
  /** List items count */
  count: Scalars['Int'];
  /** List items */
  items: Array<XSchoolCustomer>;
};

/** No longer supported. Use `sort` instead. */
export enum XSchoolCustomerOrderBy {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

/** XSchoolCustomer subscription payload */
export type XSchoolCustomerPayload = {
  __typename?: 'XSchoolCustomerPayload';
  mutation: MutationType;
  node: Maybe<XSchoolCustomer>;
  previousValues: Maybe<XSchoolCustomer>;
  updatedFields: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type XSchoolCustomerRelationFilter = {
  every?: Maybe<XSchoolCustomerFilter>;
  none?: Maybe<XSchoolCustomerFilter>;
  some?: Maybe<XSchoolCustomerFilter>;
};

export type XSchoolCustomerSort = {
  createdAt?: Maybe<SortOrder>;
  createdBy?: Maybe<UserSort>;
  deletedAt?: Maybe<SortOrder>;
  id?: Maybe<SortOrder>;
  idCustomer?: Maybe<XCustomerSort>;
  idSchool?: Maybe<SchoolSort>;
  updatedAt?: Maybe<SortOrder>;
};

/** XSchoolCustomer subscription filter */
export type XSchoolCustomerSubscriptionFilter = {
  mutation_in?: Maybe<Array<Maybe<MutationType>>>;
  node?: Maybe<XSchoolCustomerFilter>;
  updatedFields?: Maybe<UpdatedFieldsFilter>;
};

/** XSchoolCustomer update input */
export type XSchoolCustomerUpdateInput = {
  id?: Maybe<Scalars['ID']>;
  idCustomer?: Maybe<XSchoolCustomerIdCustomerUpdateRelationInput>;
  idSchool?: Maybe<XSchoolCustomerIdSchoolUpdateRelationInput>;
};

export type XSchoolCustomer_PermissionFilter = {
  AND?: Maybe<Array<XSchoolCustomer_PermissionFilter>>;
  OR?: Maybe<Array<XSchoolCustomer_PermissionFilter>>;
  _fullText?: Maybe<Scalars['String']>;
  createdAt?: Maybe<DateTimePredicate>;
  createdBy?: Maybe<User_PermissionFilter>;
  deletedAt?: Maybe<IntPredicate>;
  id?: Maybe<IdPredicate>;
  idCustomer?: Maybe<XCustomer_PermissionFilter>;
  idSchool?: Maybe<School_PermissionFilter>;
  updatedAt?: Maybe<DateTimePredicate>;
};

export type XSchoolCustomer_PermissionRelationFilter = {
  every?: Maybe<XSchoolCustomer_PermissionFilter>;
  none?: Maybe<XSchoolCustomer_PermissionFilter>;
  some?: Maybe<XSchoolCustomer_PermissionFilter>;
};

export type UploadCsvResponse = {
  __typename?: 'uploadCSVResponse';
  message: Maybe<Scalars['String']>;
};

export type GetAchivementsQueryVariables = Exact<{
  profileId: Scalars['ID'];
}>;

export type GetAchivementsQuery = {
  __typename?: 'Query';
  achievementsList: {
    __typename?: 'AchievementListResponse';
    items: Array<{
      __typename?: 'Achievement';
      id: string | null | undefined;
      name: string | null | undefined;
      championship: string | null | undefined;
      beltLevel: string | null | undefined;
      weight: string | null | undefined;
      rankResult: string | null | undefined;
      ageDivision: string | null | undefined;
      gender: string | null | undefined;
      location: string | null | undefined;
      year: number | null | undefined;
      martialArt:
        | {
            __typename?: 'MartialArt';
            id: string | null | undefined;
            name: string | null | undefined;
          }
        | null
        | undefined;
    }>;
  };
};

export type UploadSchoolScvMutationVariables = Exact<{
  data: Scalars['JSON'];
  entity: Scalars['String'];
}>;

export type UploadSchoolScvMutation = {
  __typename?: 'Mutation';
  uploadCSV:
    | { __typename?: 'uploadCSVResponse'; message: string | null | undefined }
    | null
    | undefined;
};

export type GetProfileGroupsQueryVariables = Exact<{
  profileId: Scalars['ID'];
}>;

export type GetProfileGroupsQuery = {
  __typename?: 'Query';
  schoolsList: {
    __typename?: 'SchoolListResponse';
    items: Array<{
      __typename?: 'School';
      id: string | null | undefined;
      schoolName: string | null | undefined;
      schoolLogo:
        | { __typename?: 'File'; downloadUrl: string | null | undefined }
        | null
        | undefined;
      schoolProfile:
        | {
            __typename?: 'SchoolProfileListResponse';
            count: number;
            items: Array<{
              __typename?: 'SchoolProfile';
              idProfile:
                | {
                    __typename?: 'Profile';
                    photo:
                      | {
                          __typename?: 'File';
                          downloadUrl: string | null | undefined;
                        }
                      | null
                      | undefined;
                    rankSmall:
                      | {
                          __typename?: 'File';
                          downloadUrl: string | null | undefined;
                        }
                      | null
                      | undefined;
                  }
                | null
                | undefined;
            }>;
          }
        | null
        | undefined;
    }>;
  };
};

export type GetPlansQueryVariables = Exact<{
  slug?: Maybe<Scalars['String']>;
}>;

export type GetPlansQuery = {
  __typename?: 'Query';
  schoolsList: {
    __typename?: 'SchoolListResponse';
    items: Array<{
      __typename?: 'School';
      phone: string | null | undefined;
      schoolName: string | null | undefined;
      schoolPhoneType: string | null | undefined;
      address1: string | null | undefined;
      address2: string | null | undefined;
      state: string | null | undefined;
      city: string | null | undefined;
      zip: string | null | undefined;
      schoolLogo:
        | { __typename?: 'File'; downloadUrl: string | null | undefined }
        | null
        | undefined;
      schoolProductRelation:
        | {
            __typename?: 'ProductListResponse';
            count: number;
            items: Array<{
              __typename?: 'Product';
              id: string | null | undefined;
              lookupKey: string | null | undefined;
              feesLookupKey: string | null | undefined;
              feesAmount: number | null | undefined;
              name: string | null | undefined;
              description: string | null | undefined;
              amount: number | null | undefined;
              isActive: boolean | null | undefined;
              interval: string | null | undefined;
              currency: string | null | undefined;
            }>;
          }
        | null
        | undefined;
    }>;
  };
};

export type CreateCheckoutSessionMutationVariables = Exact<{
  data: CreateCheckoutSessionInput;
}>;

export type CreateCheckoutSessionMutation = {
  __typename?: 'Mutation';
  createCheckoutSessionResolver: {
    __typename?: 'CreateCheckoutSessionResponse';
    redirectUrl: string | null | undefined;
  };
};

export type GetPrivateClassQueryVariables = Exact<{
  username?: Maybe<Scalars['String']>;
}>;

export type GetPrivateClassQuery = {
  __typename?: 'Query';
  privateClassesList: {
    __typename?: 'PrivateClassListResponse';
    groups: Array<{
      __typename?: 'GroupByResponse';
      schoolId: string | null | undefined;
      schoolName: string | null | undefined;
      schoolAddress: string | null | undefined;
      schoolLogo: string | null | undefined;
      schoolState: string | null | undefined;
      schoolCity: string | null | undefined;
      countClass: number | null | undefined;
      classesList: {
        __typename?: 'PrivateClassListResponse';
        items: Array<{
          __typename?: 'PrivateClass';
          currency: string | null | undefined;
          stripeProductId: string | null | undefined;
          startTime: any | null | undefined;
          name: string | null | undefined;
          lookupKey: string | null | undefined;
          isActive: boolean | null | undefined;
          id: string | null | undefined;
          endTime: any | null | undefined;
          duration: number | null | undefined;
          description: string | null | undefined;
          days: string | null | undefined;
          amount: number | null | undefined;
        }>;
      };
    }>;
  };
};

export type CreatePrivateClassMutationVariables = Exact<{
  data: CreatePrivateClassCheckoutInput;
}>;

export type CreatePrivateClassMutation = {
  __typename?: 'Mutation';
  privateClassCheckout: {
    __typename?: 'PrivateClassCheckoutResponse';
    redirectUrl: string | null | undefined;
  };
};

export type GetPrivateClassPurchasesByDayQueryVariables = Exact<{
  start?: Maybe<Scalars['DateTime']>;
  end?: Maybe<Scalars['DateTime']>;
  instructorUsername: Scalars['String'];
}>;

export type GetPrivateClassPurchasesByDayQuery = {
  __typename?: 'Query';
  privateClassPurchasesList: {
    __typename?: 'PrivateClassPurchaseListResponse';
    items: Array<{
      __typename?: 'PrivateClassPurchase';
      id: string | null | undefined;
      startTime: any | null | undefined;
    }>;
  };
};

export type GetProfileQueryVariables = Exact<{
  username?: Maybe<Scalars['String']>;
}>;

export type GetProfileQuery = {
  __typename?: 'Query';
  profile:
    | {
        __typename?: 'Profile';
        id: string | null | undefined;
        username: string | null | undefined;
        firstName: string | null | undefined;
        lastName: string | null | undefined;
        nickname: string | null | undefined;
        facebook: string | null | undefined;
        instagram: string | null | undefined;
        twitter: string | null | undefined;
        youtube: string | null | undefined;
        accountType: Array<string | null | undefined> | null | undefined;
        profileSchool:
          | { __typename?: 'SchoolProfileListResponse'; count: number }
          | null
          | undefined;
        rankw375h24:
          | { __typename?: 'File'; downloadUrl: string | null | undefined }
          | null
          | undefined;
        photo:
          | { __typename?: 'File'; downloadUrl: string | null | undefined }
          | null
          | undefined;
      }
    | null
    | undefined;
  privateClassesList: {
    __typename?: 'PrivateClassListResponse';
    count: number;
  };
};

export type GetRanksQueryVariables = Exact<{
  profileId: Scalars['ID'];
}>;

export type GetRanksQuery = {
  __typename?: 'Query';
  profile:
    | {
        __typename?: 'Profile';
        username: string | null | undefined;
        rankIssuedProfile:
          | {
              __typename?: 'RankIssuedListResponse';
              items: Array<{
                __typename?: 'RankIssued';
                id: string | null | undefined;
                graduated: any | null | undefined;
                verified: boolean | null | undefined;
                master:
                  | {
                      __typename?: 'Profile';
                      fullName: string | null | undefined;
                      photo:
                        | {
                            __typename?: 'File';
                            downloadUrl: string | null | undefined;
                          }
                        | null
                        | undefined;
                      rankw375h24:
                        | {
                            __typename?: 'File';
                            downloadUrl: string | null | undefined;
                          }
                        | null
                        | undefined;
                      rankw80h8:
                        | {
                            __typename?: 'File';
                            downloadUrl: string | null | undefined;
                          }
                        | null
                        | undefined;
                      rankSmall:
                        | {
                            __typename?: 'File';
                            downloadUrl: string | null | undefined;
                          }
                        | null
                        | undefined;
                    }
                  | null
                  | undefined;
                masterPhoto:
                  | {
                      __typename?: 'File';
                      downloadUrl: string | null | undefined;
                    }
                  | null
                  | undefined;
                school:
                  | {
                      __typename?: 'School';
                      schoolName: string | null | undefined;
                      schoolLogo:
                        | {
                            __typename?: 'File';
                            downloadUrl: string | null | undefined;
                          }
                        | null
                        | undefined;
                    }
                  | null
                  | undefined;
                rank:
                  | {
                      __typename?: 'Rank';
                      id: string | null | undefined;
                      level: string | null | undefined;
                      order: number | null | undefined;
                      degree: string | null | undefined;
                      martialArt:
                        | {
                            __typename?: 'MartialArt';
                            name: string | null | undefined;
                          }
                        | null
                        | undefined;
                      rankImageW375H24:
                        | {
                            __typename?: 'File';
                            downloadUrl: string | null | undefined;
                          }
                        | null
                        | undefined;
                    }
                  | null
                  | undefined;
              }>;
            }
          | null
          | undefined;
      }
    | null
    | undefined;
};

export type GetSchoolSchedulesQueryVariables = Exact<{
  slug?: Maybe<Scalars['String']>;
}>;

export type GetSchoolSchedulesQuery = {
  __typename?: 'Query';
  schoolsList: {
    __typename?: 'SchoolListResponse';
    items: Array<{
      __typename?: 'School';
      id: string | null | undefined;
      phone: string | null | undefined;
      schoolName: string | null | undefined;
      schoolPhoneType: string | null | undefined;
      address1: string | null | undefined;
      address2: string | null | undefined;
      state: string | null | undefined;
      city: string | null | undefined;
      zip: string | null | undefined;
      schoolLogo:
        | { __typename?: 'File'; downloadUrl: string | null | undefined }
        | null
        | undefined;
      scheduleSchool:
        | {
            __typename?: 'ScheduleListResponse';
            items: Array<{
              __typename?: 'Schedule';
              id: string | null | undefined;
              name: string | null | undefined;
              startTime: string | null | undefined;
              endTime: string | null | undefined;
              room: string | null | undefined;
              weekday: string | null | undefined;
              idProfile:
                | {
                    __typename?: 'Profile';
                    firstName: string | null | undefined;
                    lastName: string | null | undefined;
                  }
                | null
                | undefined;
              idMartialArt:
                | { __typename?: 'MartialArt'; name: string | null | undefined }
                | null
                | undefined;
            }>;
          }
        | null
        | undefined;
      schoolProductRelation:
        | { __typename?: 'ProductListResponse'; count: number }
        | null
        | undefined;
    }>;
  };
};

export type GetSchoolListQueryVariables = Exact<{ [key: string]: never }>;

export type GetSchoolListQuery = {
  __typename?: 'Query';
  schoolsList: {
    __typename?: 'SchoolListResponse';
    count: number;
    items: Array<{
      __typename?: 'School';
      schoolName: string | null | undefined;
      slug: string | null | undefined;
    }>;
  };
};

export type CreatePreSignupMutationVariables = Exact<{
  data: PreSignupCreateInput;
}>;

export type CreatePreSignupMutation = {
  __typename?: 'Mutation';
  preSignupCreate: { __typename?: 'PreSignup'; id: string | null | undefined };
};

export type GetUserInformationQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetUserInformationQuery = {
  __typename?: 'Query';
  profile:
    | {
        __typename?: 'Profile';
        firstName: string | null | undefined;
        lastName: string | null | undefined;
        nickname: string | null | undefined;
        username: string | null | undefined;
        gender: string | null | undefined;
        nationality: string | null | undefined;
        birthdate: string | null | undefined;
        height: string | null | undefined;
        weight: string | null | undefined;
        biography: string | null | undefined;
        email: string | null | undefined;
        phone: string | null | undefined;
      }
    | null
    | undefined;
};

export type GetProfileVideosQueryVariables = Exact<{
  profileId: Scalars['ID'];
}>;

export type GetProfileVideosQuery = {
  __typename?: 'Query';
  videosList: {
    __typename?: 'VideoListResponse';
    items: Array<{
      __typename?: 'Video';
      id: string | null | undefined;
      title: string | null | undefined;
      youtubeID: string | null | undefined;
      category: string | null | undefined;
      dutarion: number | null | undefined;
      video:
        | { __typename?: 'File'; downloadUrl: string | null | undefined }
        | null
        | undefined;
      profile:
        | { __typename?: 'Profile'; fullName: string | null | undefined }
        | null
        | undefined;
    }>;
  };
};

export type GetSlugSchoolQueryVariables = Exact<{ [key: string]: never }>;

export type GetSlugSchoolQuery = {
  __typename?: 'Query';
  schoolsList: {
    __typename?: 'SchoolListResponse';
    count: number;
    items: Array<{
      __typename?: 'School';
      id: string | null | undefined;
      schoolName: string | null | undefined;
      slug: string | null | undefined;
      schoolShortUrlRelation:
        | {
            __typename?: 'ShortUrlListResponse';
            items: Array<{
              __typename?: 'ShortUrl';
              id: string | null | undefined;
              slug: string | null | undefined;
            }>;
          }
        | null
        | undefined;
    }>;
  };
};

export type SetSlugSchoolMutationVariables = Exact<{
  id?: Maybe<Scalars['ID']>;
  slug?: Maybe<Scalars['String']>;
  short?: Maybe<SchoolSchoolShortUrlRelationUpdateRelationInput>;
}>;

export type SetSlugSchoolMutation = {
  __typename?: 'Mutation';
  schoolUpdate: { __typename?: 'School'; id: string | null | undefined };
};

export type GetSlugProfileQueryVariables = Exact<{ [key: string]: never }>;

export type GetSlugProfileQuery = {
  __typename?: 'Query';
  profilesList: {
    __typename?: 'ProfileListResponse';
    items: Array<{
      __typename?: 'Profile';
      id: string | null | undefined;
      username: string | null | undefined;
      firstName: string | null | undefined;
      nickname: string | null | undefined;
      lastName: string | null | undefined;
      profileShortUrlRelation:
        | {
            __typename?: 'ShortUrlListResponse';
            items: Array<{
              __typename?: 'ShortUrl';
              id: string | null | undefined;
              slug: string | null | undefined;
            }>;
          }
        | null
        | undefined;
    }>;
  };
};

export type SetSlugProfileMutationVariables = Exact<{
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  short?: Maybe<ProfileProfileShortUrlRelationUpdateRelationInput>;
}>;

export type SetSlugProfileMutation = {
  __typename?: 'Mutation';
  profileUpdate: { __typename?: 'Profile'; id: string | null | undefined };
};

export type ExampleQueryQueryVariables = Exact<{ [key: string]: never }>;

export type ExampleQueryQuery = {
  __typename?: 'Query';
  usersList: {
    __typename?: 'UserListResponse';
    items: Array<{ __typename?: 'User'; id: string | null | undefined }>;
  };
};

export const GetAchivementsDocument = gql`
  query GetAchivements($profileId: ID!) {
    achievementsList(
      orderBy: year_DESC
      filter: { profile: { id: { equals: $profileId } } }
    ) {
      items {
        id
        name
        martialArt {
          id
          name
        }
        championship
        beltLevel
        weight
        rankResult
        ageDivision
        gender
        location
        year
      }
    }
  }
`;

/**
 * __useGetAchivementsQuery__
 *
 * To run a query within a React component, call `useGetAchivementsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAchivementsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAchivementsQuery({
 *   variables: {
 *      profileId: // value for 'profileId'
 *   },
 * });
 */
export function useGetAchivementsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetAchivementsQuery,
    GetAchivementsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetAchivementsQuery, GetAchivementsQueryVariables>(
    GetAchivementsDocument,
    options,
  );
}
export function useGetAchivementsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAchivementsQuery,
    GetAchivementsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetAchivementsQuery, GetAchivementsQueryVariables>(
    GetAchivementsDocument,
    options,
  );
}
export type GetAchivementsQueryHookResult = ReturnType<
  typeof useGetAchivementsQuery
>;
export type GetAchivementsLazyQueryHookResult = ReturnType<
  typeof useGetAchivementsLazyQuery
>;
export type GetAchivementsQueryResult = Apollo.QueryResult<
  GetAchivementsQuery,
  GetAchivementsQueryVariables
>;
export const UploadSchoolScvDocument = gql`
  mutation uploadSchoolSCV($data: JSON!, $entity: String!) {
    uploadCSV(source: $data, entity: $entity) {
      message
    }
  }
`;
export type UploadSchoolScvMutationFn = Apollo.MutationFunction<
  UploadSchoolScvMutation,
  UploadSchoolScvMutationVariables
>;

/**
 * __useUploadSchoolScvMutation__
 *
 * To run a mutation, you first call `useUploadSchoolScvMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUploadSchoolScvMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [uploadSchoolScvMutation, { data, loading, error }] = useUploadSchoolScvMutation({
 *   variables: {
 *      data: // value for 'data'
 *      entity: // value for 'entity'
 *   },
 * });
 */
export function useUploadSchoolScvMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UploadSchoolScvMutation,
    UploadSchoolScvMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UploadSchoolScvMutation,
    UploadSchoolScvMutationVariables
  >(UploadSchoolScvDocument, options);
}
export type UploadSchoolScvMutationHookResult = ReturnType<
  typeof useUploadSchoolScvMutation
>;
export type UploadSchoolScvMutationResult =
  Apollo.MutationResult<UploadSchoolScvMutation>;
export type UploadSchoolScvMutationOptions = Apollo.BaseMutationOptions<
  UploadSchoolScvMutation,
  UploadSchoolScvMutationVariables
>;
export const GetProfileGroupsDocument = gql`
  query GetProfileGroups($profileId: ID!) {
    schoolsList(
      filter: {
        schoolProfile: { some: { idProfile: { id: { equals: $profileId } } } }
      }
    ) {
      items {
        id
        schoolName
        schoolLogo {
          downloadUrl
        }
        schoolProfile(
          filter: { idProfile: { id: { not_equals: $profileId } } }
        ) {
          count
          items {
            idProfile {
              photo {
                downloadUrl
              }
              rankSmall {
                downloadUrl
              }
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetProfileGroupsQuery__
 *
 * To run a query within a React component, call `useGetProfileGroupsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProfileGroupsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProfileGroupsQuery({
 *   variables: {
 *      profileId: // value for 'profileId'
 *   },
 * });
 */
export function useGetProfileGroupsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetProfileGroupsQuery,
    GetProfileGroupsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetProfileGroupsQuery, GetProfileGroupsQueryVariables>(
    GetProfileGroupsDocument,
    options,
  );
}
export function useGetProfileGroupsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetProfileGroupsQuery,
    GetProfileGroupsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetProfileGroupsQuery,
    GetProfileGroupsQueryVariables
  >(GetProfileGroupsDocument, options);
}
export type GetProfileGroupsQueryHookResult = ReturnType<
  typeof useGetProfileGroupsQuery
>;
export type GetProfileGroupsLazyQueryHookResult = ReturnType<
  typeof useGetProfileGroupsLazyQuery
>;
export type GetProfileGroupsQueryResult = Apollo.QueryResult<
  GetProfileGroupsQuery,
  GetProfileGroupsQueryVariables
>;
export const GetPlansDocument = gql`
  query GetPlans($slug: String) {
    schoolsList(filter: { slug: { equals: $slug } }) {
      items {
        phone
        schoolName
        schoolPhoneType
        schoolLogo {
          downloadUrl
        }
        address1
        address2
        state
        city
        zip
        schoolProductRelation {
          count
          items {
            id
            lookupKey
            feesLookupKey
            feesAmount
            name
            description
            amount
            isActive
            interval
            currency
          }
        }
      }
    }
  }
`;

/**
 * __useGetPlansQuery__
 *
 * To run a query within a React component, call `useGetPlansQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPlansQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPlansQuery({
 *   variables: {
 *      slug: // value for 'slug'
 *   },
 * });
 */
export function useGetPlansQuery(
  baseOptions?: Apollo.QueryHookOptions<GetPlansQuery, GetPlansQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetPlansQuery, GetPlansQueryVariables>(
    GetPlansDocument,
    options,
  );
}
export function useGetPlansLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetPlansQuery,
    GetPlansQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetPlansQuery, GetPlansQueryVariables>(
    GetPlansDocument,
    options,
  );
}
export type GetPlansQueryHookResult = ReturnType<typeof useGetPlansQuery>;
export type GetPlansLazyQueryHookResult = ReturnType<
  typeof useGetPlansLazyQuery
>;
export type GetPlansQueryResult = Apollo.QueryResult<
  GetPlansQuery,
  GetPlansQueryVariables
>;
export const CreateCheckoutSessionDocument = gql`
  mutation createCheckoutSession($data: CreateCheckoutSessionInput!) {
    createCheckoutSessionResolver(data: $data) {
      redirectUrl
    }
  }
`;
export type CreateCheckoutSessionMutationFn = Apollo.MutationFunction<
  CreateCheckoutSessionMutation,
  CreateCheckoutSessionMutationVariables
>;

/**
 * __useCreateCheckoutSessionMutation__
 *
 * To run a mutation, you first call `useCreateCheckoutSessionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCheckoutSessionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCheckoutSessionMutation, { data, loading, error }] = useCreateCheckoutSessionMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateCheckoutSessionMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateCheckoutSessionMutation,
    CreateCheckoutSessionMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateCheckoutSessionMutation,
    CreateCheckoutSessionMutationVariables
  >(CreateCheckoutSessionDocument, options);
}
export type CreateCheckoutSessionMutationHookResult = ReturnType<
  typeof useCreateCheckoutSessionMutation
>;
export type CreateCheckoutSessionMutationResult =
  Apollo.MutationResult<CreateCheckoutSessionMutation>;
export type CreateCheckoutSessionMutationOptions = Apollo.BaseMutationOptions<
  CreateCheckoutSessionMutation,
  CreateCheckoutSessionMutationVariables
>;
export const GetPrivateClassDocument = gql`
  query GetPrivateClass($username: String) {
    privateClassesList(
      groupBy: {
        query: {
          school: {
            id: { as: "schoolId" }
            schoolName: { as: "schoolName" }
            address1: { as: "schoolAddress" }
            schoolLogo: { downloadUrl: { as: "schoolLogo" } }
            state: { as: "schoolState" }
            city: { as: "schoolCity" }
          }
          id: { as: "countClass", fn: { aggregate: COUNT } }
          _group: { as: "classesList" }
        }
      }
      filter: { instructor: { username: { equals: $username } } }
    ) {
      groups {
        schoolId: String
        schoolName: String
        schoolAddress: String
        schoolLogo: String
        schoolState: String
        schoolCity: String
        countClass: Int
        classesList: PrivateClassGroup {
          items {
            currency
            stripeProductId
            startTime
            name
            lookupKey
            isActive
            id
            endTime
            duration
            description
            days
            amount
          }
        }
      }
    }
  }
`;

/**
 * __useGetPrivateClassQuery__
 *
 * To run a query within a React component, call `useGetPrivateClassQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPrivateClassQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPrivateClassQuery({
 *   variables: {
 *      username: // value for 'username'
 *   },
 * });
 */
export function useGetPrivateClassQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetPrivateClassQuery,
    GetPrivateClassQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetPrivateClassQuery, GetPrivateClassQueryVariables>(
    GetPrivateClassDocument,
    options,
  );
}
export function useGetPrivateClassLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetPrivateClassQuery,
    GetPrivateClassQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetPrivateClassQuery,
    GetPrivateClassQueryVariables
  >(GetPrivateClassDocument, options);
}
export type GetPrivateClassQueryHookResult = ReturnType<
  typeof useGetPrivateClassQuery
>;
export type GetPrivateClassLazyQueryHookResult = ReturnType<
  typeof useGetPrivateClassLazyQuery
>;
export type GetPrivateClassQueryResult = Apollo.QueryResult<
  GetPrivateClassQuery,
  GetPrivateClassQueryVariables
>;
export const CreatePrivateClassDocument = gql`
  mutation createPrivateClass($data: CreatePrivateClassCheckoutInput!) {
    privateClassCheckout(data: $data) {
      redirectUrl
    }
  }
`;
export type CreatePrivateClassMutationFn = Apollo.MutationFunction<
  CreatePrivateClassMutation,
  CreatePrivateClassMutationVariables
>;

/**
 * __useCreatePrivateClassMutation__
 *
 * To run a mutation, you first call `useCreatePrivateClassMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreatePrivateClassMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createPrivateClassMutation, { data, loading, error }] = useCreatePrivateClassMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreatePrivateClassMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreatePrivateClassMutation,
    CreatePrivateClassMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreatePrivateClassMutation,
    CreatePrivateClassMutationVariables
  >(CreatePrivateClassDocument, options);
}
export type CreatePrivateClassMutationHookResult = ReturnType<
  typeof useCreatePrivateClassMutation
>;
export type CreatePrivateClassMutationResult =
  Apollo.MutationResult<CreatePrivateClassMutation>;
export type CreatePrivateClassMutationOptions = Apollo.BaseMutationOptions<
  CreatePrivateClassMutation,
  CreatePrivateClassMutationVariables
>;
export const GetPrivateClassPurchasesByDayDocument = gql`
  query getPrivateClassPurchasesByDay(
    $start: DateTime
    $end: DateTime
    $instructorUsername: String!
  ) {
    privateClassPurchasesList(
      filter: {
        class: { instructor: { username: { equals: $instructorUsername } } }
        AND: [{ startTime: { lte: $end } }, { startTime: { gte: $start } }]
      }
    ) {
      items {
        id
        startTime
      }
    }
  }
`;

/**
 * __useGetPrivateClassPurchasesByDayQuery__
 *
 * To run a query within a React component, call `useGetPrivateClassPurchasesByDayQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPrivateClassPurchasesByDayQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPrivateClassPurchasesByDayQuery({
 *   variables: {
 *      start: // value for 'start'
 *      end: // value for 'end'
 *      instructorUsername: // value for 'instructorUsername'
 *   },
 * });
 */
export function useGetPrivateClassPurchasesByDayQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetPrivateClassPurchasesByDayQuery,
    GetPrivateClassPurchasesByDayQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetPrivateClassPurchasesByDayQuery,
    GetPrivateClassPurchasesByDayQueryVariables
  >(GetPrivateClassPurchasesByDayDocument, options);
}
export function useGetPrivateClassPurchasesByDayLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetPrivateClassPurchasesByDayQuery,
    GetPrivateClassPurchasesByDayQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetPrivateClassPurchasesByDayQuery,
    GetPrivateClassPurchasesByDayQueryVariables
  >(GetPrivateClassPurchasesByDayDocument, options);
}
export type GetPrivateClassPurchasesByDayQueryHookResult = ReturnType<
  typeof useGetPrivateClassPurchasesByDayQuery
>;
export type GetPrivateClassPurchasesByDayLazyQueryHookResult = ReturnType<
  typeof useGetPrivateClassPurchasesByDayLazyQuery
>;
export type GetPrivateClassPurchasesByDayQueryResult = Apollo.QueryResult<
  GetPrivateClassPurchasesByDayQuery,
  GetPrivateClassPurchasesByDayQueryVariables
>;
export const GetProfileDocument = gql`
  query GetProfile($username: String) {
    profile(username: $username) {
      id
      username
      firstName
      lastName
      nickname
      facebook
      instagram
      twitter
      youtube
      profileSchool {
        count
      }
      accountType
      rankw375h24 {
        downloadUrl
      }
      photo {
        downloadUrl
      }
    }
    privateClassesList(
      filter: {
        instructor: { username: { equals: $username } }
        isActive: { equals: true }
      }
    ) {
      count
    }
  }
`;

/**
 * __useGetProfileQuery__
 *
 * To run a query within a React component, call `useGetProfileQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProfileQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProfileQuery({
 *   variables: {
 *      username: // value for 'username'
 *   },
 * });
 */
export function useGetProfileQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetProfileQuery,
    GetProfileQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetProfileQuery, GetProfileQueryVariables>(
    GetProfileDocument,
    options,
  );
}
export function useGetProfileLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetProfileQuery,
    GetProfileQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetProfileQuery, GetProfileQueryVariables>(
    GetProfileDocument,
    options,
  );
}
export type GetProfileQueryHookResult = ReturnType<typeof useGetProfileQuery>;
export type GetProfileLazyQueryHookResult = ReturnType<
  typeof useGetProfileLazyQuery
>;
export type GetProfileQueryResult = Apollo.QueryResult<
  GetProfileQuery,
  GetProfileQueryVariables
>;
export const GetRanksDocument = gql`
  query GetRanks($profileId: ID!) {
    profile(id: $profileId) {
      username
      rankIssuedProfile(sort: { rank: { order: DESC } }) {
        items {
          id
          graduated
          verified
          master {
            photo {
              downloadUrl
            }
            fullName
            rankw375h24 {
              downloadUrl
            }
            rankw80h8 {
              downloadUrl
            }
            rankSmall {
              downloadUrl
            }
          }
          masterPhoto {
            downloadUrl
          }
          school {
            schoolName
            schoolLogo {
              downloadUrl
            }
          }
          rank {
            id
            level
            order
            degree
            martialArt {
              name
            }
            rankImageW375H24 {
              downloadUrl
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetRanksQuery__
 *
 * To run a query within a React component, call `useGetRanksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRanksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRanksQuery({
 *   variables: {
 *      profileId: // value for 'profileId'
 *   },
 * });
 */
export function useGetRanksQuery(
  baseOptions: Apollo.QueryHookOptions<GetRanksQuery, GetRanksQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetRanksQuery, GetRanksQueryVariables>(
    GetRanksDocument,
    options,
  );
}
export function useGetRanksLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetRanksQuery,
    GetRanksQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetRanksQuery, GetRanksQueryVariables>(
    GetRanksDocument,
    options,
  );
}
export type GetRanksQueryHookResult = ReturnType<typeof useGetRanksQuery>;
export type GetRanksLazyQueryHookResult = ReturnType<
  typeof useGetRanksLazyQuery
>;
export type GetRanksQueryResult = Apollo.QueryResult<
  GetRanksQuery,
  GetRanksQueryVariables
>;
export const GetSchoolSchedulesDocument = gql`
  query GetSchoolSchedules($slug: String) {
    schoolsList(filter: { slug: { equals: $slug } }) {
      items {
        id
        phone
        schoolName
        schoolPhoneType
        schoolLogo {
          downloadUrl
        }
        address1
        address2
        state
        city
        zip
        scheduleSchool(orderBy: [weekday_ASC, startTime_ASC]) {
          items {
            id
            name
            startTime
            endTime
            room
            weekday
            idProfile {
              firstName
              lastName
            }
            idMartialArt {
              name
            }
          }
        }
        schoolProductRelation {
          count
        }
      }
    }
  }
`;

/**
 * __useGetSchoolSchedulesQuery__
 *
 * To run a query within a React component, call `useGetSchoolSchedulesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSchoolSchedulesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSchoolSchedulesQuery({
 *   variables: {
 *      slug: // value for 'slug'
 *   },
 * });
 */
export function useGetSchoolSchedulesQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetSchoolSchedulesQuery,
    GetSchoolSchedulesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetSchoolSchedulesQuery,
    GetSchoolSchedulesQueryVariables
  >(GetSchoolSchedulesDocument, options);
}
export function useGetSchoolSchedulesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetSchoolSchedulesQuery,
    GetSchoolSchedulesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetSchoolSchedulesQuery,
    GetSchoolSchedulesQueryVariables
  >(GetSchoolSchedulesDocument, options);
}
export type GetSchoolSchedulesQueryHookResult = ReturnType<
  typeof useGetSchoolSchedulesQuery
>;
export type GetSchoolSchedulesLazyQueryHookResult = ReturnType<
  typeof useGetSchoolSchedulesLazyQuery
>;
export type GetSchoolSchedulesQueryResult = Apollo.QueryResult<
  GetSchoolSchedulesQuery,
  GetSchoolSchedulesQueryVariables
>;
export const GetSchoolListDocument = gql`
  query getSchoolList {
    schoolsList(orderBy: [createdAt_DESC]) {
      count
      items {
        schoolName
        slug
      }
    }
  }
`;

/**
 * __useGetSchoolListQuery__
 *
 * To run a query within a React component, call `useGetSchoolListQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSchoolListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSchoolListQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetSchoolListQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetSchoolListQuery,
    GetSchoolListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetSchoolListQuery, GetSchoolListQueryVariables>(
    GetSchoolListDocument,
    options,
  );
}
export function useGetSchoolListLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetSchoolListQuery,
    GetSchoolListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetSchoolListQuery, GetSchoolListQueryVariables>(
    GetSchoolListDocument,
    options,
  );
}
export type GetSchoolListQueryHookResult = ReturnType<
  typeof useGetSchoolListQuery
>;
export type GetSchoolListLazyQueryHookResult = ReturnType<
  typeof useGetSchoolListLazyQuery
>;
export type GetSchoolListQueryResult = Apollo.QueryResult<
  GetSchoolListQuery,
  GetSchoolListQueryVariables
>;
export const CreatePreSignupDocument = gql`
  mutation CreatePreSignup($data: PreSignupCreateInput!) {
    preSignupCreate(data: $data) {
      id
    }
  }
`;
export type CreatePreSignupMutationFn = Apollo.MutationFunction<
  CreatePreSignupMutation,
  CreatePreSignupMutationVariables
>;

/**
 * __useCreatePreSignupMutation__
 *
 * To run a mutation, you first call `useCreatePreSignupMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreatePreSignupMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createPreSignupMutation, { data, loading, error }] = useCreatePreSignupMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreatePreSignupMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreatePreSignupMutation,
    CreatePreSignupMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreatePreSignupMutation,
    CreatePreSignupMutationVariables
  >(CreatePreSignupDocument, options);
}
export type CreatePreSignupMutationHookResult = ReturnType<
  typeof useCreatePreSignupMutation
>;
export type CreatePreSignupMutationResult =
  Apollo.MutationResult<CreatePreSignupMutation>;
export type CreatePreSignupMutationOptions = Apollo.BaseMutationOptions<
  CreatePreSignupMutation,
  CreatePreSignupMutationVariables
>;
export const GetUserInformationDocument = gql`
  query GetUserInformation($id: ID!) {
    profile(id: $id) {
      firstName
      lastName
      nickname
      username
      gender
      nationality
      birthdate
      height
      weight
      biography
      email
      phone
    }
  }
`;

/**
 * __useGetUserInformationQuery__
 *
 * To run a query within a React component, call `useGetUserInformationQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserInformationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserInformationQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetUserInformationQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetUserInformationQuery,
    GetUserInformationQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetUserInformationQuery,
    GetUserInformationQueryVariables
  >(GetUserInformationDocument, options);
}
export function useGetUserInformationLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetUserInformationQuery,
    GetUserInformationQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetUserInformationQuery,
    GetUserInformationQueryVariables
  >(GetUserInformationDocument, options);
}
export type GetUserInformationQueryHookResult = ReturnType<
  typeof useGetUserInformationQuery
>;
export type GetUserInformationLazyQueryHookResult = ReturnType<
  typeof useGetUserInformationLazyQuery
>;
export type GetUserInformationQueryResult = Apollo.QueryResult<
  GetUserInformationQuery,
  GetUserInformationQueryVariables
>;
export const GetProfileVideosDocument = gql`
  query GetProfileVideos($profileId: ID!) {
    videosList(
      orderBy: createdAt_DESC
      filter: { profile: { id: { equals: $profileId } } }
    ) {
      items {
        id
        title
        youtubeID
        category
        dutarion
        video {
          downloadUrl
        }
        profile {
          fullName
        }
      }
    }
  }
`;

/**
 * __useGetProfileVideosQuery__
 *
 * To run a query within a React component, call `useGetProfileVideosQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProfileVideosQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProfileVideosQuery({
 *   variables: {
 *      profileId: // value for 'profileId'
 *   },
 * });
 */
export function useGetProfileVideosQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetProfileVideosQuery,
    GetProfileVideosQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetProfileVideosQuery, GetProfileVideosQueryVariables>(
    GetProfileVideosDocument,
    options,
  );
}
export function useGetProfileVideosLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetProfileVideosQuery,
    GetProfileVideosQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetProfileVideosQuery,
    GetProfileVideosQueryVariables
  >(GetProfileVideosDocument, options);
}
export type GetProfileVideosQueryHookResult = ReturnType<
  typeof useGetProfileVideosQuery
>;
export type GetProfileVideosLazyQueryHookResult = ReturnType<
  typeof useGetProfileVideosLazyQuery
>;
export type GetProfileVideosQueryResult = Apollo.QueryResult<
  GetProfileVideosQuery,
  GetProfileVideosQueryVariables
>;
export const GetSlugSchoolDocument = gql`
  query getSlugSchool {
    schoolsList(orderBy: createdAt_ASC) {
      items {
        id
        schoolName
        slug
        schoolShortUrlRelation {
          items {
            id
            slug
          }
        }
      }
      count
    }
  }
`;

/**
 * __useGetSlugSchoolQuery__
 *
 * To run a query within a React component, call `useGetSlugSchoolQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSlugSchoolQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSlugSchoolQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetSlugSchoolQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetSlugSchoolQuery,
    GetSlugSchoolQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetSlugSchoolQuery, GetSlugSchoolQueryVariables>(
    GetSlugSchoolDocument,
    options,
  );
}
export function useGetSlugSchoolLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetSlugSchoolQuery,
    GetSlugSchoolQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetSlugSchoolQuery, GetSlugSchoolQueryVariables>(
    GetSlugSchoolDocument,
    options,
  );
}
export type GetSlugSchoolQueryHookResult = ReturnType<
  typeof useGetSlugSchoolQuery
>;
export type GetSlugSchoolLazyQueryHookResult = ReturnType<
  typeof useGetSlugSchoolLazyQuery
>;
export type GetSlugSchoolQueryResult = Apollo.QueryResult<
  GetSlugSchoolQuery,
  GetSlugSchoolQueryVariables
>;
export const SetSlugSchoolDocument = gql`
  mutation setSlugSchool(
    $id: ID
    $slug: String
    $short: SchoolSchoolShortUrlRelationUpdateRelationInput
  ) {
    schoolUpdate(
      filter: { id: $id }
      data: { slug: $slug, schoolShortUrlRelation: $short }
    ) {
      id
    }
  }
`;
export type SetSlugSchoolMutationFn = Apollo.MutationFunction<
  SetSlugSchoolMutation,
  SetSlugSchoolMutationVariables
>;

/**
 * __useSetSlugSchoolMutation__
 *
 * To run a mutation, you first call `useSetSlugSchoolMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetSlugSchoolMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setSlugSchoolMutation, { data, loading, error }] = useSetSlugSchoolMutation({
 *   variables: {
 *      id: // value for 'id'
 *      slug: // value for 'slug'
 *      short: // value for 'short'
 *   },
 * });
 */
export function useSetSlugSchoolMutation(
  baseOptions?: Apollo.MutationHookOptions<
    SetSlugSchoolMutation,
    SetSlugSchoolMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    SetSlugSchoolMutation,
    SetSlugSchoolMutationVariables
  >(SetSlugSchoolDocument, options);
}
export type SetSlugSchoolMutationHookResult = ReturnType<
  typeof useSetSlugSchoolMutation
>;
export type SetSlugSchoolMutationResult =
  Apollo.MutationResult<SetSlugSchoolMutation>;
export type SetSlugSchoolMutationOptions = Apollo.BaseMutationOptions<
  SetSlugSchoolMutation,
  SetSlugSchoolMutationVariables
>;
export const GetSlugProfileDocument = gql`
  query getSlugProfile {
    profilesList {
      items {
        id
        username
        firstName
        nickname
        lastName
        profileShortUrlRelation {
          items {
            id
            slug
          }
        }
      }
    }
  }
`;

/**
 * __useGetSlugProfileQuery__
 *
 * To run a query within a React component, call `useGetSlugProfileQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSlugProfileQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSlugProfileQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetSlugProfileQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetSlugProfileQuery,
    GetSlugProfileQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetSlugProfileQuery, GetSlugProfileQueryVariables>(
    GetSlugProfileDocument,
    options,
  );
}
export function useGetSlugProfileLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetSlugProfileQuery,
    GetSlugProfileQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetSlugProfileQuery, GetSlugProfileQueryVariables>(
    GetSlugProfileDocument,
    options,
  );
}
export type GetSlugProfileQueryHookResult = ReturnType<
  typeof useGetSlugProfileQuery
>;
export type GetSlugProfileLazyQueryHookResult = ReturnType<
  typeof useGetSlugProfileLazyQuery
>;
export type GetSlugProfileQueryResult = Apollo.QueryResult<
  GetSlugProfileQuery,
  GetSlugProfileQueryVariables
>;
export const SetSlugProfileDocument = gql`
  mutation setSlugProfile(
    $id: ID
    $username: String
    $short: ProfileProfileShortUrlRelationUpdateRelationInput
  ) {
    profileUpdate(
      filter: { id: $id }
      data: { username: $username, profileShortUrlRelation: $short }
    ) {
      id
    }
  }
`;
export type SetSlugProfileMutationFn = Apollo.MutationFunction<
  SetSlugProfileMutation,
  SetSlugProfileMutationVariables
>;

/**
 * __useSetSlugProfileMutation__
 *
 * To run a mutation, you first call `useSetSlugProfileMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetSlugProfileMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setSlugProfileMutation, { data, loading, error }] = useSetSlugProfileMutation({
 *   variables: {
 *      id: // value for 'id'
 *      username: // value for 'username'
 *      short: // value for 'short'
 *   },
 * });
 */
export function useSetSlugProfileMutation(
  baseOptions?: Apollo.MutationHookOptions<
    SetSlugProfileMutation,
    SetSlugProfileMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    SetSlugProfileMutation,
    SetSlugProfileMutationVariables
  >(SetSlugProfileDocument, options);
}
export type SetSlugProfileMutationHookResult = ReturnType<
  typeof useSetSlugProfileMutation
>;
export type SetSlugProfileMutationResult =
  Apollo.MutationResult<SetSlugProfileMutation>;
export type SetSlugProfileMutationOptions = Apollo.BaseMutationOptions<
  SetSlugProfileMutation,
  SetSlugProfileMutationVariables
>;
export const ExampleQueryDocument = gql`
  query ExampleQuery {
    usersList {
      items {
        id
      }
    }
  }
`;

/**
 * __useExampleQueryQuery__
 *
 * To run a query within a React component, call `useExampleQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `useExampleQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useExampleQueryQuery({
 *   variables: {
 *   },
 * });
 */
export function useExampleQueryQuery(
  baseOptions?: Apollo.QueryHookOptions<
    ExampleQueryQuery,
    ExampleQueryQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<ExampleQueryQuery, ExampleQueryQueryVariables>(
    ExampleQueryDocument,
    options,
  );
}
export function useExampleQueryLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    ExampleQueryQuery,
    ExampleQueryQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<ExampleQueryQuery, ExampleQueryQueryVariables>(
    ExampleQueryDocument,
    options,
  );
}
export type ExampleQueryQueryHookResult = ReturnType<
  typeof useExampleQueryQuery
>;
export type ExampleQueryLazyQueryHookResult = ReturnType<
  typeof useExampleQueryLazyQuery
>;
export type ExampleQueryQueryResult = Apollo.QueryResult<
  ExampleQueryQuery,
  ExampleQueryQueryVariables
>;
