{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react'; // Define general type for useWindowSize hook, which includes width and height\n\nexport const useWindowSize = () => {\n  _s();\n\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const {\n    0: windowSize,\n    1: setWindowSize\n  } = useState({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(() => {\n    const handleResize = () => {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    }; // Add event listener\n\n\n    window.addEventListener('resize', handleResize); // Call handler right away so state gets updated with initial window size\n\n    handleResize(); // Remove event listener on cleanup\n\n    return () => window.removeEventListener('resize', handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n};\n\n_s(useWindowSize, \"c4qf3T3ntwaWr7rmXJcJwcTfMJk=\");","map":{"version":3,"sources":["C:/Users/Public.DESKTOP-5K819ES/Documents/GitHub/dojoplus/src/shared/hooks/useWindowsSize.ts"],"names":["useState","useEffect","useWindowSize","windowSize","setWindowSize","width","undefined","height","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CACA;;AAMA,OAAO,MAAMC,aAAa,GAAG,MAAY;AAAA;;AACvC;AACA;AACA,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BJ,QAAQ,CAAO;AACjDK,IAAAA,KAAK,EAAEC,SAD0C;AAEjDC,IAAAA,MAAM,EAAED;AAFyC,GAAP,CAA5C;AAIAL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,YAAY,GAAG,MAAY;AAC/BJ,MAAAA,aAAa,CAAC;AACZC,QAAAA,KAAK,EAAEI,MAAM,CAACC,UADF;AAEZH,QAAAA,MAAM,EAAEE,MAAM,CAACE;AAFH,OAAD,CAAb;AAID,KALD,CADc,CAOd;;;AACAF,IAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCJ,YAAlC,EARc,CASd;;AACAA,IAAAA,YAAY,GAVE,CAWd;;AACA,WAAO,MAAMC,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCL,YAArC,CAAb;AACD,GAbQ,EAaN,EAbM,CAAT,CAPuC,CAoB/B;;AACR,SAAOL,UAAP;AACD,CAtBM;;GAAMD,a","sourcesContent":["import { useState, useEffect } from 'react';\r\n// Define general type for useWindowSize hook, which includes width and height\r\ninterface Size {\r\n  width: number | undefined;\r\n  height: number | undefined;\r\n}\r\n\r\nexport const useWindowSize = (): Size => {\r\n  // Initialize state with undefined width/height so server and client renders match\r\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\r\n  const [windowSize, setWindowSize] = useState<Size>({\r\n    width: undefined,\r\n    height: undefined,\r\n  });\r\n  useEffect(() => {\r\n    const handleResize = (): void => {\r\n      setWindowSize({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n      });\r\n    };\r\n    // Add event listener\r\n    window.addEventListener('resize', handleResize);\r\n    // Call handler right away so state gets updated with initial window size\r\n    handleResize();\r\n    // Remove event listener on cleanup\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []); // Empty array ensures that effect is only run on mount\r\n  return windowSize;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}