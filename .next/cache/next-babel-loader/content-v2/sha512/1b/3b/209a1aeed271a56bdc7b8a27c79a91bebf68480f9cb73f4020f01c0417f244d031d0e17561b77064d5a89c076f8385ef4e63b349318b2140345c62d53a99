{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable class-methods-use-this */\nimport { TABLES, getTableInstance } from './Airtable';\nconst table = getTableInstance(TABLES.TIMETABLE);\nconst schoolsTable = getTableInstance(TABLES.SCHOOLS);\nconst plansTable = getTableInstance(TABLES.PLANS);\n\nclass TimetableService {\n  /**\r\n   * @description - get Profile after send page to browser.\r\n   * @param username - Username.\r\n   * @returns - Return user profile basic data like username and avatar.\r\n   */\n  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n  async getTimetable(schoolName) {\n    try {\n      const requests = [];\n      let schoolRecord = [];\n      let timetableRecords = [];\n      requests.push(schoolsTable.select({\n        filterByFormula: `{Slug} = '${schoolName}'`\n      }).all());\n      requests.push(table.select({\n        filterByFormula: `{Slug Lookup} = '${schoolName}'`\n      }).all());\n      await Promise.all(requests).then(res => {\n        schoolRecord = [...res[0]];\n        timetableRecords = [...res[1]];\n      });\n      const plans = schoolRecord[0] && (await plansTable.select({\n        filterByFormula: `FIND(\"${schoolRecord[0].fields['School Name']}\", ARRAYJOIN({School Name (from School)}))`\n      }).all());\n      return _objectSpread(_objectSpread({}, schoolRecord[0]), {}, {\n        scheduleSchool: timetableRecords,\n        plans: plans || []\n      });\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  }\n\n}\n\nexport default new TimetableService();","map":null,"metadata":{},"sourceType":"module"}