{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport _ from 'lodash';\nexport const formattedResponse = records => {\n  return records.map(record => _objectSpread(_objectSpread({}, _.mapKeys(record.fields, (v, k) => _.camelCase(k))), {}, {\n    id: record.id\n  }));\n};","map":{"version":3,"sources":["C:/Users/Public.DESKTOP-5K819ES/Documents/GitHub/dojoplus/src/shared/utils/airtable-utils.ts"],"names":["_","formattedResponse","records","map","record","mapKeys","fields","v","k","camelCase","id"],"mappings":";;;;;;AAAA,OAAOA,CAAP,MAAc,QAAd;AAEA,OAAO,MAAMC,iBAA0C,GAAIC,OAAD,IAAa;AACrE,SAAOA,OAAO,CAACC,GAAR,CAAaC,MAAD,oCACdJ,CAAC,CAACK,OAAF,CAAUD,MAAM,CAACE,MAAjB,EAAyB,CAACC,CAAD,EAAIC,CAAJ,KAAUR,CAAC,CAACS,SAAF,CAAYD,CAAZ,CAAnC,CADc;AAEjBE,IAAAA,EAAE,EAAEN,MAAM,CAACM;AAFM,IAAZ,CAAP;AAID,CALM","sourcesContent":["import _ from 'lodash';\r\n\r\nexport const formattedResponse: (records: any[]) => any = (records) => {\r\n  return records.map((record) => ({\r\n    ..._.mapKeys(record.fields, (v, k) => _.camelCase(k)),\r\n    id: record.id,\r\n  }));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}