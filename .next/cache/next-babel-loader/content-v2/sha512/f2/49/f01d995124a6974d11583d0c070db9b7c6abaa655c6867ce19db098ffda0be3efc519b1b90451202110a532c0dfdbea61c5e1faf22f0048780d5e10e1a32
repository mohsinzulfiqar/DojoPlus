{"ast":null,"code":"/* eslint-disable no-unused-vars */\nimport { buffer } from 'micro';\nimport Cors from 'micro-cors';\nimport Stripe from 'stripe';\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n  // https://github.com/stripe/stripe-node#configuration\n  apiVersion: '2020-08-27'\n});\nconst webhookSecret = process.env.STRIPE_WEBHOOK_SECRET; // Stripe requires the raw body to construct the event.\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nconst cors = Cors({\n  allowMethods: ['POST', 'HEAD']\n});\n/**\r\n * @description - Webhook handler to get payment run time status.\r\n * @param req - Req.\r\n * @param res - Res.\r\n * @returns - Return run time response from stripe.\r\n */\n\nconst webhookHandler = async (req, res) => {\n  if (req.method === 'POST') {\n    const buf = await buffer(req);\n    const sig = req.headers['stripe-signature'];\n    let event;\n\n    try {\n      event = stripe.webhooks.constructEvent(buf.toString(), sig, webhookSecret);\n    } catch (err) {\n      // On error, log and return the error message.\n      res.status(400).send(`Webhook Error: ${err.message}`);\n      return;\n    } // Cast event data to Stripe object.\n\n\n    if (event.type === 'payment_intent.succeeded') {\n      const paymentIntent = event.data.object;\n    } else if (event.type === 'payment_intent.payment_failed') {\n      const paymentIntent = event.data.object;\n    } else if (event.type === 'charge.succeeded') {\n      const charge = event.data.object;\n    } // Return a response to acknowledge receipt of the event.\n\n\n    res.json({\n      received: true\n    });\n  } else {\n    res.setHeader('Allow', 'POST');\n    res.status(405).end('Method Not Allowed');\n  }\n};\n\nexport default cors(webhookHandler);","map":null,"metadata":{},"sourceType":"module"}