{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components'; // import AddIcon from '@mui/icons-material/Add';\n// import Button from '@mui/material/Button';\n\nimport { useTranslation } from 'react-i18next';\nimport axios from 'axios';\nimport { ProfileTabLoading } from '../../shared/components/TabLoading';\nimport { ProfileTabEmptyMessage } from '../../shared/components/ProfileTabEmptyMessage';\nimport { AchievementItem } from './components/AchievementItem';\nimport { COLOR_BACKGROUND_LIGHT } from '../../shared/styles/colors';\nimport { TextWhite18UppercaseRegular } from '../../shared/components/texts';\nconst LastestSection = styled.div.withConfig({\n  displayName: \"Achievements__LastestSection\",\n  componentId: \"sc-1wpu0mz-0\"\n})([\"margin-top:20px;display:flex;justify-content:center;align-items:center;flex-direction:column;\"]);\nconst AllAchievementBar = styled.div.withConfig({\n  displayName: \"Achievements__AllAchievementBar\",\n  componentId: \"sc-1wpu0mz-1\"\n})([\"display:flex;flex-wrap:wrap;background-color:\", \";padding:1rem;\"], COLOR_BACKGROUND_LIGHT);\nconst AllAchievementSection = styled.div.withConfig({\n  displayName: \"Achievements__AllAchievementSection\",\n  componentId: \"sc-1wpu0mz-2\"\n})([\"display:flex;justify-content:space-around;flex-direction:row;flex-wrap:wrap;\"]);\nexport const Achievements = ({\n  username\n}) => {\n  const {\n    0: isLoading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: achievements,\n    1: setAchievements\n  } = useState();\n  useEffect(() => {\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    if (username) {\n      axios('/api/Achievement', {\n        params: {\n          username\n        }\n      }).then(res => {\n        console.log(res.data);\n        setAchievements(res.data);\n        setLoading(false);\n      });\n    }\n  }, [username]);\n  const {\n    t\n  } = useTranslation();\n  const textLastAchi = t('LastAchie').toUpperCase();\n  const textAllAchie = t('AllAchie').toUpperCase();\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsx(ProfileTabLoading, {});\n  }\n\n  if (!username || !achievements || achievements.length === 0) {\n    return /*#__PURE__*/_jsx(ProfileTabEmptyMessage, {\n      value: \"There is no achievements to show\"\n    });\n  }\n\n  const lastestAchivement = achievements[0];\n  const allAchievements = achievements.length > 1 ? achievements.slice(1, achievements.length) : [];\n  console.log(allAchievements);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(LastestSection, {\n      children: [/*#__PURE__*/_jsx(TextWhite18UppercaseRegular, {\n        children: textLastAchi\n      }), /*#__PURE__*/_jsx(AchievementItem, {\n        achievement: lastestAchivement\n      })]\n    }), /*#__PURE__*/_jsx(AllAchievementBar, {\n      children: /*#__PURE__*/_jsx(TextWhite18UppercaseRegular, {\n        children: textAllAchie\n      })\n    }), /*#__PURE__*/_jsx(AllAchievementSection, {\n      children: allAchievements.length > 0 ? allAchievements.map(achievement => /*#__PURE__*/_jsx(AchievementItem, {\n        achievement: achievement\n      }, achievement.id)) : null\n    })]\n  });\n};","map":null,"metadata":{},"sourceType":"module"}